
Test_nucleo_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005598  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f0  080057f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f8  080057f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000070  08005870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08005870  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ceb  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d2  00000000  00000000  00033d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00036760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  000378a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028055  00000000  00000000  000388e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001344e  00000000  00000000  0006093d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbabe  00000000  00000000  00073d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d04  00000000  00000000  0016f89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005780 	.word	0x08005780

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005780 	.word	0x08005780

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0c0      	sub	sp, #256	; 0x100
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	index_buff = 0;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <main+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	ws_receive_flag = 0;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <main+0x78>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	time_100ms_Flag = 0;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <main+0x7c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	vitesse = 0;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <main+0x80>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fd41 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f837 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f9af 	bl	8000960 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f94f 	bl	80008a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000606:	f000 f97d 	bl	8000904 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800060a:	f000 f8c9 	bl	80007a0 <MX_TIM3_Init>
  MX_UART4_Init();
 800060e:	f000 f919 	bl	8000844 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, (uint8_t *)aRxBuffer, 10);
 8000612:	220a      	movs	r2, #10
 8000614:	4911      	ldr	r1, [pc, #68]	; (800065c <main+0x84>)
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <main+0x88>)
 8000618:	f003 f991 	bl	800393e <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */
	  //uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
	  //HAL_UART_Transmit(&huart3,Test,sizeof(Test),10);// Sending in normal mode
	  //HAL_Delay(1000);

	  if(time_100ms_Flag == 1)
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <main+0x7c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d1fb      	bne.n	800061c <main+0x44>
	  {
		  char message[256];
		  time_100ms_Flag = 0 ;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <main+0x7c>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
		  snprintf(message,sizeof(message),"Rpm = %d \n\r",vitesse);
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <main+0x80>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4638      	mov	r0, r7
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <main+0x8c>)
 8000632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000636:	f004 fc61 	bl	8004efc <sniprintf>
		  HAL_UART_Transmit(&huart3,message,sizeof(message),10);
 800063a:	4639      	mov	r1, r7
 800063c:	230a      	movs	r3, #10
 800063e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <main+0x90>)
 8000644:	f003 f8e8 	bl	8003818 <HAL_UART_Transmit>
	  if(time_100ms_Flag == 1)
 8000648:	e7e8      	b.n	800061c <main+0x44>
 800064a:	bf00      	nop
 800064c:	200000a4 	.word	0x200000a4
 8000650:	20000654 	.word	0x20000654
 8000654:	200005bc 	.word	0x200005bc
 8000658:	200005c0 	.word	0x200005c0
 800065c:	200005c4 	.word	0x200005c4
 8000660:	200005d0 	.word	0x200005d0
 8000664:	08005798 	.word	0x08005798
 8000668:	200000e8 	.word	0x200000e8

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0b8      	sub	sp, #224	; 0xe0
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fc36 	bl	8004eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2290      	movs	r2, #144	; 0x90
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fc27 	bl	8004eec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069e:	f001 fa67 	bl	8001b70 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <SystemClock_Config+0x128>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	4a3b      	ldr	r2, [pc, #236]	; (8000794 <SystemClock_Config+0x128>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
 80006ae:	4b39      	ldr	r3, [pc, #228]	; (8000794 <SystemClock_Config+0x128>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <SystemClock_Config+0x12c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c2:	4a35      	ldr	r2, [pc, #212]	; (8000798 <SystemClock_Config+0x12c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <SystemClock_Config+0x12c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fa8b 	bl	8001c30 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000720:	f000 fa2e 	bl	8000b80 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000724:	f001 fa34 	bl	8001b90 <HAL_PWREx_EnableOverDrive>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072e:	f000 fa27 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000750:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000754:	2101      	movs	r1, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fd18 	bl	800218c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000762:	f000 fa0d 	bl	8000b80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <SystemClock_Config+0x130>)
 8000768:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800076e:	2300      	movs	r3, #0
 8000770:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4618      	mov	r0, r3
 800077e:	f001 ff07 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000788:	f000 f9fa 	bl	8000b80 <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	37e0      	adds	r7, #224	; 0xe0
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000
 800079c:	00200300 	.word	0x00200300

080007a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_TIM3_Init+0x9c>)
 80007c0:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <MX_TIM3_Init+0xa0>)
 80007c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_TIM3_Init+0x9c>)
 80007c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_TIM3_Init+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_TIM3_Init+0x9c>)
 80007d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_TIM3_Init+0x9c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_TIM3_Init+0x9c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007e6:	4815      	ldr	r0, [pc, #84]	; (800083c <MX_TIM3_Init+0x9c>)
 80007e8:	f002 fafa 	bl	8002de0 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80007f2:	f000 f9c5 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <MX_TIM3_Init+0x9c>)
 8000804:	f002 fcdc 	bl	80031c0 <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800080e:	f000 f9b7 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM3_Init+0x9c>)
 8000820:	f002 ff00 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800082a:	f000 f9a9 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM3_Init+0x9c>)
 8000830:	f002 fb2e 	bl	8002e90 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000570 	.word	0x20000570
 8000840:	40000400 	.word	0x40000400

08000844 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_UART4_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <MX_UART4_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 4800;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_UART4_Init+0x58>)
 8000850:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000854:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_UART4_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_UART4_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_UART4_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_UART4_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_UART4_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_UART4_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_UART4_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_UART4_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_UART4_Init+0x58>)
 8000888:	f002 ff78 	bl	800377c <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f975 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200005d0 	.word	0x200005d0
 80008a0:	40004c00 	.word	0x40004c00

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_USART3_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008e8:	f002 ff48 	bl	800377c <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 f945 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000e8 	.word	0x200000e8
 8000900:	40004800 	.word	0x40004800

08000904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800090e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2206      	movs	r2, #6
 8000914:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2202      	movs	r2, #2
 8000926:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2201      	movs	r2, #1
 800092c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2201      	movs	r2, #1
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	f000 ffc9 	bl	80018de <HAL_PCD_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f915 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000016c 	.word	0x2000016c

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b7b      	ldr	r3, [pc, #492]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a7a      	ldr	r2, [pc, #488]	; (8000b64 <MX_GPIO_Init+0x204>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b78      	ldr	r3, [pc, #480]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b75      	ldr	r3, [pc, #468]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a74      	ldr	r2, [pc, #464]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <MX_GPIO_Init+0x204>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b6f      	ldr	r3, [pc, #444]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a6e      	ldr	r2, [pc, #440]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b6c      	ldr	r3, [pc, #432]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b69      	ldr	r3, [pc, #420]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a68      	ldr	r2, [pc, #416]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b66      	ldr	r3, [pc, #408]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a62      	ldr	r2, [pc, #392]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b60      	ldr	r3, [pc, #384]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a5c      	ldr	r2, [pc, #368]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x204>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a06:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a56      	ldr	r2, [pc, #344]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b54      	ldr	r3, [pc, #336]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a24:	4850      	ldr	r0, [pc, #320]	; (8000b68 <MX_GPIO_Init+0x208>)
 8000a26:	f000 ff03 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	484f      	ldr	r0, [pc, #316]	; (8000b6c <MX_GPIO_Init+0x20c>)
 8000a30:	f000 fefe 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	4b4d      	ldr	r3, [pc, #308]	; (8000b70 <MX_GPIO_Init+0x210>)
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	484a      	ldr	r0, [pc, #296]	; (8000b74 <MX_GPIO_Init+0x214>)
 8000a4a:	f000 fd45 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WheelRPM_Pin */
  GPIO_InitStruct.Pin = WheelRPM_Pin;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	4b47      	ldr	r3, [pc, #284]	; (8000b70 <MX_GPIO_Init+0x210>)
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WheelRPM_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4845      	ldr	r0, [pc, #276]	; (8000b78 <MX_GPIO_Init+0x218>)
 8000a62:	f000 fd39 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a66:	2332      	movs	r3, #50	; 0x32
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a76:	230b      	movs	r3, #11
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	483c      	ldr	r0, [pc, #240]	; (8000b74 <MX_GPIO_Init+0x214>)
 8000a82:	f000 fd29 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a86:	2386      	movs	r3, #134	; 0x86
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a96:	230b      	movs	r3, #11
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4836      	ldr	r0, [pc, #216]	; (8000b7c <MX_GPIO_Init+0x21c>)
 8000aa2:	f000 fd19 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aa6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	482a      	ldr	r0, [pc, #168]	; (8000b68 <MX_GPIO_Init+0x208>)
 8000ac0:	f000 fd0a 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad6:	230b      	movs	r3, #11
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <MX_GPIO_Init+0x208>)
 8000ae2:	f000 fcf9 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	481b      	ldr	r0, [pc, #108]	; (8000b6c <MX_GPIO_Init+0x20c>)
 8000afe:	f000 fceb 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4815      	ldr	r0, [pc, #84]	; (8000b6c <MX_GPIO_Init+0x20c>)
 8000b16:	f000 fcdf 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_GPIO_Init+0x20c>)
 8000b38:	f000 fcce 	bl	80014d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2008      	movs	r0, #8
 8000b42:	f000 fc00 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b46:	2008      	movs	r0, #8
 8000b48:	f000 fc19 	bl	800137e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f000 fbf8 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f000 fc11 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	10110000 	.word	0x10110000
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40021400 	.word	0x40021400
 8000b7c:	40020000 	.word	0x40020000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_TIM_Base_MspInit+0x44>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d113      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	201d      	movs	r0, #29
 8000c04:	f000 fb9f 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c08:	201d      	movs	r0, #29
 8000c0a:	f000 fbb8 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a41      	ldr	r2, [pc, #260]	; (8000d44 <HAL_UART_MspInit+0x124>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d14d      	bne.n	8000cde <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a3a      	ldr	r2, [pc, #232]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a34      	ldr	r2, [pc, #208]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4829      	ldr	r0, [pc, #164]	; (8000d4c <HAL_UART_MspInit+0x12c>)
 8000ca6:	f000 fc17 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4822      	ldr	r0, [pc, #136]	; (8000d50 <HAL_UART_MspInit+0x130>)
 8000cc8:	f000 fc06 	bl	80014d8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2034      	movs	r0, #52	; 0x34
 8000cd2:	f000 fb38 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cd6:	2034      	movs	r0, #52	; 0x34
 8000cd8:	f000 fb51 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cdc:	e02d      	b.n	8000d3a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_UART_MspInit+0x134>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d128      	bne.n	8000d3a <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_UART_MspInit+0x128>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_UART_MspInit+0x138>)
 8000d36:	f000 fbcf 	bl	80014d8 <HAL_GPIO_Init>
}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	; 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40004c00 	.word	0x40004c00
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40004800 	.word	0x40004800
 8000d58:	40020c00 	.word	0x40020c00

08000d5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d7c:	d141      	bne.n	8000e02 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da8:	230a      	movs	r3, #10
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4817      	ldr	r0, [pc, #92]	; (8000e10 <HAL_PCD_MspInit+0xb4>)
 8000db4:	f000 fb90 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4810      	ldr	r0, [pc, #64]	; (8000e10 <HAL_PCD_MspInit+0xb4>)
 8000dce:	f000 fb83 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ddc:	6353      	str	r3, [r2, #52]	; 0x34
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_PCD_MspInit+0xb0>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f952 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f000 fd13 	bl	8001898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  compteur++;
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <EXTI2_IRQHandler+0x18>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a01      	ldr	r2, [pc, #4]	; (8000e80 <EXTI2_IRQHandler+0x18>)
 8000e7a:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000008c 	.word	0x2000008c

08000e84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	static int Led_Toggle=0;

	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,Led_Toggle);
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <TIM3_IRQHandler+0x48>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <TIM3_IRQHandler+0x4c>)
 8000e94:	f000 fccc 	bl	8001830 <HAL_GPIO_WritePin>
	Led_Toggle=!Led_Toggle;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <TIM3_IRQHandler+0x48>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2301      	moveq	r3, #1
 8000ea2:	2300      	movne	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <TIM3_IRQHandler+0x48>)
 8000eaa:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <TIM3_IRQHandler+0x50>)
 8000eae:	f002 f867 	bl	8002f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  time_100ms_Flag =1;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <TIM3_IRQHandler+0x54>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
  vitesse=compteur;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <TIM3_IRQHandler+0x58>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <TIM3_IRQHandler+0x5c>)
 8000ebe:	6013      	str	r3, [r2, #0]
  compteur = 0;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <TIM3_IRQHandler+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	20000570 	.word	0x20000570
 8000ed8:	200005bc 	.word	0x200005bc
 8000edc:	2000008c 	.word	0x2000008c
 8000ee0:	200005c0 	.word	0x200005c0

08000ee4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static int Led_Toggle=0;

	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,Led_Toggle);
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <EXTI15_10_IRQHandler+0x38>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <EXTI15_10_IRQHandler+0x3c>)
 8000ef6:	f000 fc9b 	bl	8001830 <HAL_GPIO_WritePin>
	Led_Toggle=!Led_Toggle;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <EXTI15_10_IRQHandler+0x38>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <EXTI15_10_IRQHandler+0x38>)
 8000f0c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f0e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f12:	f000 fcc1 	bl	8001898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	40020400 	.word	0x40020400

08000f24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <UART4_IRQHandler+0x5c>)
 8000f30:	f000 fc97 	bl	8001862 <HAL_GPIO_TogglePin>

	if ((UART4->ISR & UART_IT_RXNE)) {
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <UART4_IRQHandler+0x60>)
 8000f36:	69da      	ldr	r2, [r3, #28]
 8000f38:	f240 5325 	movw	r3, #1317	; 0x525
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d015      	beq.n	8000f6e <UART4_IRQHandler+0x4a>
	  uint8_t rbyte = huart4.Instance->RDR;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <UART4_IRQHandler+0x64>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	71fb      	strb	r3, [r7, #7]
	  //HAL_UART_Transmit(&huart3, &rbyte, 1, 1000);
	  rx_buff[index_buff]=rbyte;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <UART4_IRQHandler+0x68>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <UART4_IRQHandler+0x6c>)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	5453      	strb	r3, [r2, r1]
	  index_buff++;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <UART4_IRQHandler+0x68>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <UART4_IRQHandler+0x68>)
 8000f60:	701a      	strb	r2, [r3, #0]

	  if(rbyte=='$'){
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b24      	cmp	r3, #36	; 0x24
 8000f66:	d102      	bne.n	8000f6e <UART4_IRQHandler+0x4a>

		  ws_receive_flag = 1;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <UART4_IRQHandler+0x70>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]

	  //__HAL_UART_SEND_REQ(&huart4, UART_RXDATA_FLUSH_REQUEST);
	  //__HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
	}

  if (UART4->ISR & UART_IT_ORE)
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <UART4_IRQHandler+0x60>)
 8000f70:	69db      	ldr	r3, [r3, #28]
  {
	  //__HAL_UART_SEND_REQ(&huart4, UART_RXDATA_FLUSH_REQUEST);
	  //__HAL_UART_ENABLE_IT(&huart4,UART_IT_ORE);
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <UART4_IRQHandler+0x64>)
 8000f74:	f002 fd20 	bl	80039b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40004c00 	.word	0x40004c00
 8000f88:	200005d0 	.word	0x200005d0
 8000f8c:	200000a4 	.word	0x200000a4
 8000f90:	200000a8 	.word	0x200000a8
 8000f94:	20000654 	.word	0x20000654

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f003 ff66 	bl	8004e98 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20080000 	.word	0x20080000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	20000098 	.word	0x20000098
 8001000:	20000670 	.word	0x20000670

08001004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f003 ff25 	bl	8004ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fabd 	bl	80005d8 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800106c:	08005800 	.word	0x08005800
  ldr r2, =_sbss
 8001070:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001074:	2000066c 	.word	0x2000066c

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x28>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f94f 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fd78 	bl	8000b8c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f967 	bl	800139a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f92f 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000658 	.word	0x20000658

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000658 	.word	0x20000658

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff feb6 	bl	8001130 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e052      	b.n	800148a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0216 	bic.w	r2, r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001402:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <HAL_DMA_Abort+0x62>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0208 	bic.w	r2, r2, #8
 8001422:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001434:	e013      	b.n	800145e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001436:	f7ff fe7b 	bl	8001130 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b05      	cmp	r3, #5
 8001442:	d90c      	bls.n	800145e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e015      	b.n	800148a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e4      	bne.n	8001436 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	223f      	movs	r2, #63	; 0x3f
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d004      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e00c      	b.n	80014ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2205      	movs	r2, #5
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e175      	b.n	80017e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8164 	bne.w	80017de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d00b      	beq.n	8001536 <HAL_GPIO_Init+0x5e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800152a:	2b11      	cmp	r3, #17
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b12      	cmp	r3, #18
 8001534:	d130      	bne.n	8001598 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 0201 	and.w	r2, r3, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x100>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b12      	cmp	r3, #18
 80015d6:	d123      	bne.n	8001620 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	69b9      	ldr	r1, [r7, #24]
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80be 	beq.w	80017de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b66      	ldr	r3, [pc, #408]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a65      	ldr	r2, [pc, #404]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_GPIO_Init+0x324>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800167a:	4a61      	ldr	r2, [pc, #388]	; (8001800 <HAL_GPIO_Init+0x328>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_GPIO_Init+0x32c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d037      	beq.n	8001716 <HAL_GPIO_Init+0x23e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_GPIO_Init+0x330>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d031      	beq.n	8001712 <HAL_GPIO_Init+0x23a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a56      	ldr	r2, [pc, #344]	; (800180c <HAL_GPIO_Init+0x334>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d02b      	beq.n	800170e <HAL_GPIO_Init+0x236>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a55      	ldr	r2, [pc, #340]	; (8001810 <HAL_GPIO_Init+0x338>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d025      	beq.n	800170a <HAL_GPIO_Init+0x232>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a54      	ldr	r2, [pc, #336]	; (8001814 <HAL_GPIO_Init+0x33c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01f      	beq.n	8001706 <HAL_GPIO_Init+0x22e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a53      	ldr	r2, [pc, #332]	; (8001818 <HAL_GPIO_Init+0x340>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x22a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_GPIO_Init+0x344>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x226>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a51      	ldr	r2, [pc, #324]	; (8001820 <HAL_GPIO_Init+0x348>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x222>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a50      	ldr	r2, [pc, #320]	; (8001824 <HAL_GPIO_Init+0x34c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x21e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <HAL_GPIO_Init+0x350>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x21a>
 80016ee:	2309      	movs	r3, #9
 80016f0:	e012      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016f2:	230a      	movs	r3, #10
 80016f4:	e010      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e00e      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e00c      	b.n	8001718 <HAL_GPIO_Init+0x240>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00a      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001702:	2305      	movs	r3, #5
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001706:	2304      	movs	r3, #4
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x240>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x240>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x240>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	; (8001800 <HAL_GPIO_Init+0x328>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_GPIO_Init+0x354>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175a:	4a34      	ldr	r2, [pc, #208]	; (800182c <HAL_GPIO_Init+0x354>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_GPIO_Init+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001784:	4a29      	ldr	r2, [pc, #164]	; (800182c <HAL_GPIO_Init+0x354>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_GPIO_Init+0x354>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_GPIO_Init+0x354>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_GPIO_Init+0x354>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_GPIO_Init+0x354>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f ae86 	bls.w	80014f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40021400 	.word	0x40021400
 800181c:	40021800 	.word	0x40021800
 8001820:	40021c00 	.word	0x40021c00
 8001824:	40022000 	.word	0x40022000
 8001828:	40022400 	.word	0x40022400
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	619a      	str	r2, [r3, #24]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001874:	887a      	ldrh	r2, [r7, #2]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	041a      	lsls	r2, r3, #16
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43d9      	mvns	r1, r3
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	400b      	ands	r3, r1
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f806 	bl	80018c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e0:	b08f      	sub	sp, #60	; 0x3c
 80018e2:	af0a      	add	r7, sp, #40	; 0x28
 80018e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e116      	b.n	8001b1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fa26 	bl	8000d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f852 	bl	80049d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	687e      	ldr	r6, [r7, #4]
 800193c:	466d      	mov	r5, sp
 800193e:	f106 0410 	add.w	r4, r6, #16
 8001942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800194e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001952:	1d33      	adds	r3, r6, #4
 8001954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	f002 ffe6 	bl	8004928 <USB_CoreInit>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2202      	movs	r2, #2
 8001966:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0d7      	b.n	8001b1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f003 f840 	bl	80049fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e04a      	b.n	8001a16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	333d      	adds	r3, #61	; 0x3d
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	333c      	adds	r3, #60	; 0x3c
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	b298      	uxth	r0, r3
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	3342      	adds	r3, #66	; 0x42
 80019bc:	4602      	mov	r2, r0
 80019be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	333f      	adds	r3, #63	; 0x3f
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	3344      	adds	r3, #68	; 0x44
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	3348      	adds	r3, #72	; 0x48
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3350      	adds	r3, #80	; 0x50
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	3301      	adds	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3af      	bcc.n	8001980 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e044      	b.n	8001ab0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	3301      	adds	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3b5      	bcc.n	8001a26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	687e      	ldr	r6, [r7, #4]
 8001ac2:	466d      	mov	r5, sp
 8001ac4:	f106 0410 	add.w	r4, r6, #16
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ad8:	1d33      	adds	r3, r6, #4
 8001ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001adc:	6838      	ldr	r0, [r7, #0]
 8001ade:	f002 ffb7 	bl	8004a50 <USB_DevInit>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e014      	b.n	8001b1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f80b 	bl	8001b28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 f969 	bl	8004dee <USB_DevDisconnect>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_PCDEx_ActivateLPM+0x44>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	10000003 	.word	0x10000003

08001b70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40007000 	.word	0x40007000

08001b90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bbe:	f7ff fab7 	bl	8001130 <HAL_GetTick>
 8001bc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bc4:	e009      	b.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc6:	f7ff fab3 	bl	8001130 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd4:	d901      	bls.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e022      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fa9c 	bl	8001130 <HAL_GetTick>
 8001bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bfa:	e009      	b.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bfc:	f7ff fa98 	bl	8001130 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c0a:	d901      	bls.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e007      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e29b      	b.n	800217e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8087 	beq.w	8001d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c54:	4b96      	ldr	r3, [pc, #600]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d00c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c60:	4b93      	ldr	r3, [pc, #588]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d112      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
 8001c6c:	4b90      	ldr	r3, [pc, #576]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x130>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d168      	bne.n	8001d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e275      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x7a>
 8001c9c:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e02e      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x9c>
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7b      	ldr	r2, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a72      	ldr	r2, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6b      	ldr	r2, [pc, #428]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fa0e 	bl	8001130 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fa0a 	bl	8001130 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e229      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xe8>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f9fa 	bl	8001130 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff f9f6 	bl	8001130 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e215      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x110>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d069      	beq.n	8001e42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1e9      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	493d      	ldr	r1, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e040      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d023      	beq.n	8001e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a38      	ldr	r2, [pc, #224]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f9ac 	bl	8001130 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff f9a8 	bl	8001130 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1c7      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f988 	bl	8001130 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff f984 	bl	8001130 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1a3      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d038      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff f965 	bl	8001130 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f961 	bl	8001130 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e180      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x23a>
 8001e88:	e01a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff f94b 	bl	8001130 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f947 	bl	8001130 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d903      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e166      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
 8001eb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a4 	beq.w	8002016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b89      	ldr	r3, [pc, #548]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a88      	ldr	r2, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b86      	ldr	r3, [pc, #536]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef6:	4b83      	ldr	r3, [pc, #524]	; (8002104 <HAL_RCC_OscConfig+0x4d4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f02:	4b80      	ldr	r3, [pc, #512]	; (8002104 <HAL_RCC_OscConfig+0x4d4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7f      	ldr	r2, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x4d4>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f90f 	bl	8001130 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff f90b 	bl	8001130 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e12a      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f28:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x4d4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x31a>
 8001f3c:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a6f      	ldr	r2, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x33c>
 8001f52:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a67      	ldr	r2, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x35e>
 8001f74:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a61      	ldr	r2, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a5e      	ldr	r2, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a5b      	ldr	r2, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7ff f8bf 	bl	8001130 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff f8bb 	bl	8001130 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0d8      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x386>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff f8a9 	bl	8001130 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff f8a5 	bl	8001130 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0c2      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80ae 	beq.w	800217c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d06d      	beq.n	8002108 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d14b      	bne.n	80020cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a31      	ldr	r2, [pc, #196]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff f876 	bl	8001130 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff f872 	bl	8001130 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e091      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	071b      	lsls	r3, r3, #28
 8002092:	491b      	ldr	r1, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f844 	bl	8001130 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f840 	bl	8001130 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e05f      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x47c>
 80020ca:	e057      	b.n	800217c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 80020d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f82a 	bl	8001130 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f826 	bl	8001130 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e045      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4b0>
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x54c>
 8002100:	40023800 	.word	0x40023800
 8002104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_RCC_OscConfig+0x558>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d030      	beq.n	8002178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d129      	bne.n	8002178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d122      	bne.n	8002178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800213e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002140:	4293      	cmp	r3, r2
 8002142:	d119      	bne.n	8002178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	3b01      	subs	r3, #1
 8002152:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d10f      	bne.n	8002178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0d0      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d910      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 020f 	bic.w	r2, r3, #15
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b59      	ldr	r3, [pc, #356]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002204:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800220e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b50      	ldr	r3, [pc, #320]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	494d      	ldr	r1, [pc, #308]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d040      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e073      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06b      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4936      	ldr	r1, [pc, #216]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002280:	f7fe ff56 	bl	8001130 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7fe ff52 	bl	8001130 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e053      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d210      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 020f 	bic.w	r2, r3, #15
 80022c6:	4922      	ldr	r1, [pc, #136]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e032      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4916      	ldr	r1, [pc, #88]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	490e      	ldr	r1, [pc, #56]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231e:	f000 f821 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490a      	ldr	r1, [pc, #40]	; (8002358 <HAL_RCC_ClockConfig+0x1cc>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1d0>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1d4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe feb2 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023c00 	.word	0x40023c00
 8002354:	40023800 	.word	0x40023800
 8002358:	080057a4 	.word	0x080057a4
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	2300      	movs	r3, #0
 8002376:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800237c:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d00d      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002388:	2b08      	cmp	r3, #8
 800238a:	f200 80bd 	bhi.w	8002508 <HAL_RCC_GetSysClockFreq+0x1a4>
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x34>
 8002392:	2b04      	cmp	r3, #4
 8002394:	d003      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x3a>
 8002396:	e0b7      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800239a:	60bb      	str	r3, [r7, #8]
      break;
 800239c:	e0b7      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800239e:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80023a0:	60bb      	str	r3, [r7, #8]
      break;
 80023a2:	e0b4      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a4:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023ae:	4b5b      	ldr	r3, [pc, #364]	; (800251c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04d      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ba:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	461a      	mov	r2, r3
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ca:	f04f 0100 	mov.w	r1, #0
 80023ce:	ea02 0800 	and.w	r8, r2, r0
 80023d2:	ea03 0901 	and.w	r9, r3, r1
 80023d6:	4640      	mov	r0, r8
 80023d8:	4649      	mov	r1, r9
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	014b      	lsls	r3, r1, #5
 80023e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023e8:	0142      	lsls	r2, r0, #5
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	ebb0 0008 	subs.w	r0, r0, r8
 80023f2:	eb61 0109 	sbc.w	r1, r1, r9
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	018b      	lsls	r3, r1, #6
 8002400:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002404:	0182      	lsls	r2, r0, #6
 8002406:	1a12      	subs	r2, r2, r0
 8002408:	eb63 0301 	sbc.w	r3, r3, r1
 800240c:	f04f 0000 	mov.w	r0, #0
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	00d9      	lsls	r1, r3, #3
 8002416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800241a:	00d0      	lsls	r0, r2, #3
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	eb12 0208 	adds.w	r2, r2, r8
 8002424:	eb43 0309 	adc.w	r3, r3, r9
 8002428:	f04f 0000 	mov.w	r0, #0
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	0259      	lsls	r1, r3, #9
 8002432:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002436:	0250      	lsls	r0, r2, #9
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	f7fd ff4a 	bl	80002e0 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e04a      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	461a      	mov	r2, r3
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	ea02 0400 	and.w	r4, r2, r0
 800246e:	ea03 0501 	and.w	r5, r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	014b      	lsls	r3, r1, #5
 8002480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002484:	0142      	lsls	r2, r0, #5
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	1b00      	subs	r0, r0, r4
 800248c:	eb61 0105 	sbc.w	r1, r1, r5
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	018b      	lsls	r3, r1, #6
 800249a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800249e:	0182      	lsls	r2, r0, #6
 80024a0:	1a12      	subs	r2, r2, r0
 80024a2:	eb63 0301 	sbc.w	r3, r3, r1
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	00d9      	lsls	r1, r3, #3
 80024b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024b4:	00d0      	lsls	r0, r2, #3
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	1912      	adds	r2, r2, r4
 80024bc:	eb45 0303 	adc.w	r3, r5, r3
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	0299      	lsls	r1, r3, #10
 80024ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024ce:	0290      	lsls	r0, r2, #10
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	461a      	mov	r2, r3
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	f7fd fefe 	bl	80002e0 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	60bb      	str	r3, [r7, #8]
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800250a:	60bb      	str	r3, [r7, #8]
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	68bb      	ldr	r3, [r7, #8]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	00f42400 	.word	0x00f42400
 8002524:	007a1200 	.word	0x007a1200

08002528 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002544:	f7ff fff0 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	080057b4 	.word	0x080057b4

08002568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800256c:	f7ff ffdc 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0b5b      	lsrs	r3, r3, #13
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK2Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	080057b4 	.word	0x080057b4

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025b8:	4b69      	ldr	r3, [pc, #420]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a68      	ldr	r2, [pc, #416]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025c2:	6093      	str	r3, [r2, #8]
 80025c4:	4b66      	ldr	r3, [pc, #408]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	4964      	ldr	r1, [pc, #400]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d017      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	4959      	ldr	r1, [pc, #356]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002608:	d101      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800260a:	2301      	movs	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d017      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002626:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	494a      	ldr	r1, [pc, #296]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002644:	d101      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 808b 	beq.w	800278a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4a39      	ldr	r2, [pc, #228]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	; 0x40
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800268c:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a34      	ldr	r2, [pc, #208]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fd4a 	bl	8001130 <HAL_GetTick>
 800269c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe fd46 	bl	8001130 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e38f      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026be:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d035      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d02e      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026dc:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d114      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fd0e 	bl	8001130 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fd0a 	bl	8001130 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e351      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ee      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002746:	d111      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002756:	400b      	ands	r3, r1
 8002758:	4901      	ldr	r1, [pc, #4]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
 800275e:	e00b      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002760:	40023800 	.word	0x40023800
 8002764:	40007000 	.word	0x40007000
 8002768:	0ffffcff 	.word	0x0ffffcff
 800276c:	4bb3      	ldr	r3, [pc, #716]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4ab2      	ldr	r2, [pc, #712]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002772:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002776:	6093      	str	r3, [r2, #8]
 8002778:	4bb0      	ldr	r3, [pc, #704]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800277a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	49ad      	ldr	r1, [pc, #692]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002786:	4313      	orrs	r3, r2
 8002788:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	d010      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002796:	4ba9      	ldr	r3, [pc, #676]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279c:	4aa7      	ldr	r2, [pc, #668]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027a6:	4ba5      	ldr	r3, [pc, #660]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	49a2      	ldr	r1, [pc, #648]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c4:	4b9d      	ldr	r3, [pc, #628]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d2:	499a      	ldr	r1, [pc, #616]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e6:	4b95      	ldr	r3, [pc, #596]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	4991      	ldr	r1, [pc, #580]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002808:	4b8c      	ldr	r3, [pc, #560]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002816:	4989      	ldr	r1, [pc, #548]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800282a:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4980      	ldr	r1, [pc, #512]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284c:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4978      	ldr	r1, [pc, #480]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800286e:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f023 020c 	bic.w	r2, r3, #12
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287c:	496f      	ldr	r1, [pc, #444]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002890:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4967      	ldr	r1, [pc, #412]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b2:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	495e      	ldr	r1, [pc, #376]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	4956      	ldr	r1, [pc, #344]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	494d      	ldr	r1, [pc, #308]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002918:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	4945      	ldr	r1, [pc, #276]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800293a:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002948:	493c      	ldr	r1, [pc, #240]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	4934      	ldr	r1, [pc, #208]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298c:	492b      	ldr	r1, [pc, #172]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299c:	d101      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029be:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	491b      	ldr	r1, [pc, #108]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f0:	4912      	ldr	r1, [pc, #72]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a04:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a14:	4909      	ldr	r1, [pc, #36]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	e002      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	4986      	ldr	r1, [pc, #536]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a54:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a64:	497d      	ldr	r1, [pc, #500]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d006      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80d6 	beq.w	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a80:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a75      	ldr	r2, [pc, #468]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fb50 	bl	8001130 <HAL_GetTick>
 8002a90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a94:	f7fe fb4c 	bl	8001130 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e195      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa6:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d021      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11d      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ada:	0e1b      	lsrs	r3, r3, #24
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	019a      	lsls	r2, r3, #6
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	071b      	lsls	r3, r3, #28
 8002afa:	4958      	ldr	r1, [pc, #352]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02e      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b2c:	d129      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b2e:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b42:	0f1b      	lsrs	r3, r3, #28
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	019a      	lsls	r2, r3, #6
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	071b      	lsls	r3, r3, #28
 8002b62:	493e      	ldr	r1, [pc, #248]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b70:	f023 021f 	bic.w	r2, r3, #31
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	4938      	ldr	r1, [pc, #224]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01d      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b94:	0e1b      	lsrs	r3, r3, #24
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b9c:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba2:	0f1b      	lsrs	r3, r3, #28
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	019a      	lsls	r2, r3, #6
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	071b      	lsls	r3, r3, #28
 8002bc2:	4926      	ldr	r1, [pc, #152]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d011      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	019a      	lsls	r2, r3, #6
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	071b      	lsls	r3, r3, #28
 8002bf2:	491a      	ldr	r1, [pc, #104]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c06:	f7fe fa93 	bl	8001130 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c0e:	f7fe fa8f 	bl	8001130 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b64      	cmp	r3, #100	; 0x64
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0d8      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 80ce 	bne.w	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe fa76 	bl	8001130 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c46:	e00b      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c48:	f7fe fa72 	bl	8001130 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d904      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0bb      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c60:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6c:	d0ec      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02e      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d12a      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c96:	4b51      	ldr	r3, [pc, #324]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	0f1b      	lsrs	r3, r3, #28
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	019a      	lsls	r2, r3, #6
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	061b      	lsls	r3, r3, #24
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	071b      	lsls	r3, r3, #28
 8002cca:	4944      	ldr	r1, [pc, #272]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cd2:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	493d      	ldr	r1, [pc, #244]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d022      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d00:	d11d      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	0e1b      	lsrs	r3, r3, #24
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d10:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	0f1b      	lsrs	r3, r3, #28
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	019a      	lsls	r2, r3, #6
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	061b      	lsls	r3, r3, #24
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	071b      	lsls	r3, r3, #28
 8002d36:	4929      	ldr	r1, [pc, #164]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d028      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	0e1b      	lsrs	r3, r3, #24
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	0c1b      	lsrs	r3, r3, #16
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	019a      	lsls	r2, r3, #6
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	041b      	lsls	r3, r3, #16
 8002d70:	431a      	orrs	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	071b      	lsls	r3, r3, #28
 8002d7e:	4917      	ldr	r1, [pc, #92]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4911      	ldr	r1, [pc, #68]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da8:	f7fe f9c2 	bl	8001130 <HAL_GetTick>
 8002dac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db0:	f7fe f9be 	bl	8001130 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e007      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dce:	d1ef      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800

08002de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e049      	b.n	8002e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fee4 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f000 fac6 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e054      	b.n	8002f52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d022      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d01d      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d115      	bne.n	8002f3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_TIM_Base_Start_IT+0xec>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d015      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0xbe>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d011      	beq.n	8002f4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3a:	e008      	b.n	8002f4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e000      	b.n	8002f50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40010400 	.word	0x40010400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40001800 	.word	0x40001800
 8002f7c:	00010007 	.word	0x00010007

08002f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0202 	mvn.w	r2, #2
 8002fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f9d6 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f9c8 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f9d9 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0204 	mvn.w	r2, #4
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f9ac 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f99e 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9af 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0208 	mvn.w	r2, #8
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f982 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f974 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f985 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b10      	cmp	r3, #16
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2208      	movs	r2, #8
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f958 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f94a 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f95b 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0201 	mvn.w	r2, #1
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f924 	bl	800334c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fb12 	bl	8003754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313e:	d10e      	bne.n	800315e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b80      	cmp	r3, #128	; 0x80
 800314c:	d107      	bne.n	800315e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb05 	bl	8003768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d10e      	bne.n	800318a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d107      	bne.n	800318a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f909 	bl	800339c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b20      	cmp	r3, #32
 8003196:	d10e      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0220 	mvn.w	r2, #32
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fac5 	bl	8003740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_TIM_ConfigClockSource+0x18>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0b3      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x180>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4b55      	ldr	r3, [pc, #340]	; (8003348 <HAL_TIM_ConfigClockSource+0x188>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003210:	d03e      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0xd0>
 8003212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003216:	f200 8087 	bhi.w	8003328 <HAL_TIM_ConfigClockSource+0x168>
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	f000 8085 	beq.w	800332c <HAL_TIM_ConfigClockSource+0x16c>
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	d87f      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
 8003228:	2b70      	cmp	r3, #112	; 0x70
 800322a:	d01a      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0xa2>
 800322c:	2b70      	cmp	r3, #112	; 0x70
 800322e:	d87b      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
 8003230:	2b60      	cmp	r3, #96	; 0x60
 8003232:	d050      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x116>
 8003234:	2b60      	cmp	r3, #96	; 0x60
 8003236:	d877      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
 8003238:	2b50      	cmp	r3, #80	; 0x50
 800323a:	d03c      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xf6>
 800323c:	2b50      	cmp	r3, #80	; 0x50
 800323e:	d873      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d058      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x136>
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d86f      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
 8003248:	2b30      	cmp	r3, #48	; 0x30
 800324a:	d064      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x156>
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	d86b      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
 8003250:	2b20      	cmp	r3, #32
 8003252:	d060      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x156>
 8003254:	2b20      	cmp	r3, #32
 8003256:	d867      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05c      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x156>
 800325c:	2b10      	cmp	r3, #16
 800325e:	d05a      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003260:	e062      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6899      	ldr	r1, [r3, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f000 f9b7 	bl	80035e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003284:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]
      break;
 800328e:	e04e      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f000 f9a0 	bl	80035e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b2:	609a      	str	r2, [r3, #8]
      break;
 80032b4:	e03b      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f000 f914 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2150      	movs	r1, #80	; 0x50
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f96d 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 80032d4:	e02b      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f000 f933 	bl	800354e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2160      	movs	r1, #96	; 0x60
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f95d 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 80032f4:	e01b      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	461a      	mov	r2, r3
 8003304:	f000 f8f4 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f94d 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8003314:	e00b      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f000 f944 	bl	80035ae <TIM_ITRx_SetConfig>
        break;
 8003326:	e002      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003328:	bf00      	nop
 800332a:	e000      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800332c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	fffeff88 	.word	0xfffeff88

0800334c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a40      	ldr	r2, [pc, #256]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d00f      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3a      	ldr	r2, [pc, #232]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d027      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d023      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <TIM_Base_SetConfig+0x128>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <TIM_Base_SetConfig+0x12c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <TIM_Base_SetConfig+0x130>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <TIM_Base_SetConfig+0x134>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <TIM_Base_SetConfig+0x138>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a23      	ldr	r2, [pc, #140]	; (80034ec <TIM_Base_SetConfig+0x13c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	40001800 	.word	0x40001800
 80034e8:	40001c00 	.word	0x40001c00
 80034ec:	40002000 	.word	0x40002000

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 030a 	bic.w	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b087      	sub	sp, #28
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0210 	bic.w	r2, r3, #16
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800358a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f043 0307 	orr.w	r3, r3, #7
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	431a      	orrs	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	609a      	str	r2, [r3, #8]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e06d      	b.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a30      	ldr	r2, [pc, #192]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2f      	ldr	r2, [pc, #188]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a20      	ldr	r2, [pc, #128]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ae:	d01d      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a15      	ldr	r2, [pc, #84]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40010000 	.word	0x40010000
 8003728:	40010400 	.word	0x40010400
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40014000 	.word	0x40014000
 800373c:	40001800 	.word	0x40001800

08003740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e040      	b.n	8003810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fa3e 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	; 0x24
 80037a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fb30 	bl	8003e20 <UART_SetConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e022      	b.n	8003810 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fd86 	bl	80042e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fe0d 	bl	8004428 <UART_CheckIdleState>
 800380e:	4603      	mov	r3, r0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382c:	2b20      	cmp	r3, #32
 800382e:	f040 8081 	bne.w	8003934 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_Transmit+0x26>
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e079      	b.n	8003936 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_UART_Transmit+0x38>
 800384c:	2302      	movs	r3, #2
 800384e:	e072      	b.n	8003936 <HAL_UART_Transmit+0x11e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2221      	movs	r2, #33	; 0x21
 8003864:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003866:	f7fd fc63 	bl	8001130 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003884:	d108      	bne.n	8003898 <HAL_UART_Transmit+0x80>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e003      	b.n	80038a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038a8:	e02c      	b.n	8003904 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fe00 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e038      	b.n	8003936 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	3302      	adds	r3, #2
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e007      	b.n	80038f2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1cc      	bne.n	80038aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fdcd 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e005      	b.n	8003936 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003950:	2b20      	cmp	r3, #32
 8003952:	d12c      	bne.n	80039ae <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_UART_Receive_IT+0x22>
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e025      	b.n	80039b0 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_UART_Receive_IT+0x34>
 800396e:	2302      	movs	r3, #2
 8003970:	e01e      	b.n	80039b0 <HAL_UART_Receive_IT+0x72>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800399c:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	461a      	mov	r2, r3
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fe05 	bl	80045b4 <UART_Start_Receive_IT>
 80039aa:	4603      	mov	r3, r0
 80039ac:	e000      	b.n	80039b0 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	f640 030f 	movw	r3, #2063	; 0x80f
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d113      	bne.n	8003a10 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 81cc 	beq.w	8003d9e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
      }
      return;
 8003a0e:	e1c6      	b.n	8003d9e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80e3 	beq.w	8003bde <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4ba5      	ldr	r3, [pc, #660]	; (8003cbc <HAL_UART_IRQHandler+0x304>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80d8 	beq.w	8003bde <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_UART_IRQHandler+0xa2>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2201      	movs	r2, #1
 8003a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a50:	f043 0201 	orr.w	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <HAL_UART_IRQHandler+0xce>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2202      	movs	r2, #2
 8003a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7c:	f043 0204 	orr.w	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xfa>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa8:	f043 0202 	orr.w	r2, r3, #2
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ade:	f043 0208 	orr.w	r2, r3, #8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d011      	beq.n	8003b16 <HAL_UART_IRQHandler+0x15e>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8140 	beq.w	8003da2 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d004      	beq.n	8003b66 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d031      	beq.n	8003bca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fdac 	bl	80046c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d123      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b88:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_UART_IRQHandler+0x308>)
 8003b98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fc77 	bl	8001492 <HAL_DMA_Abort_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e00f      	b.n	8003bda <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f910 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	e00b      	b.n	8003bda <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f90c 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e007      	b.n	8003bda <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f908 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003bd8:	e0e3      	b.n	8003da2 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bda:	bf00      	nop
    return;
 8003bdc:	e0e1      	b.n	8003da2 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	f040 80a7 	bne.w	8003d36 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80a1 	beq.w	8003d36 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 809b 	beq.w	8003d36 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2210      	movs	r2, #16
 8003c06:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d156      	bne.n	8003cc4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003c20:	893b      	ldrh	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80bf 	beq.w	8003da6 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c2e:	893a      	ldrh	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	f080 80b8 	bcs.w	8003da6 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	893a      	ldrh	r2, [r7, #8]
 8003c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c48:	d02a      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c78:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0210 	bic.w	r2, r2, #16
 8003c94:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fb89 	bl	80013b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f89d 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cba:	e074      	b.n	8003da6 <HAL_UART_IRQHandler+0x3ee>
 8003cbc:	04000120 	.word	0x04000120
 8003cc0:	08004723 	.word	0x08004723
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d063      	beq.n	8003daa <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d060      	beq.n	8003daa <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0210 	bic.w	r2, r2, #16
 8003d28:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f860 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d34:	e039      	b.n	8003daa <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_UART_IRQHandler+0x3a4>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f859 	bl	8003e0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d5a:	e029      	b.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00d      	beq.n	8003d82 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
    }
    return;
 8003d80:	e015      	b.n	8003dae <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d011      	beq.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fcd9 	bl	800474e <UART_EndTransmit_IT>
    return;
 8003d9c:	e008      	b.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003d9e:	bf00      	nop
 8003da0:	e006      	b.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003dae:	bf00      	nop
  }

}
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop

08003db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4ba7      	ldr	r3, [pc, #668]	; (80040e8 <UART_SetConfig+0x2c8>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	6979      	ldr	r1, [r7, #20]
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a95      	ldr	r2, [pc, #596]	; (80040ec <UART_SetConfig+0x2cc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d120      	bne.n	8003ede <UART_SetConfig+0xbe>
 8003e9c:	4b94      	ldr	r3, [pc, #592]	; (80040f0 <UART_SetConfig+0x2d0>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d816      	bhi.n	8003ed8 <UART_SetConfig+0xb8>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <UART_SetConfig+0x90>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ec1 	.word	0x08003ec1
 8003eb4:	08003ecd 	.word	0x08003ecd
 8003eb8:	08003ec7 	.word	0x08003ec7
 8003ebc:	08003ed3 	.word	0x08003ed3
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e14f      	b.n	8004166 <UART_SetConfig+0x346>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e14c      	b.n	8004166 <UART_SetConfig+0x346>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e149      	b.n	8004166 <UART_SetConfig+0x346>
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e146      	b.n	8004166 <UART_SetConfig+0x346>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e143      	b.n	8004166 <UART_SetConfig+0x346>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a84      	ldr	r2, [pc, #528]	; (80040f4 <UART_SetConfig+0x2d4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d132      	bne.n	8003f4e <UART_SetConfig+0x12e>
 8003ee8:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <UART_SetConfig+0x2d0>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d828      	bhi.n	8003f48 <UART_SetConfig+0x128>
 8003ef6:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <UART_SetConfig+0xdc>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f49 	.word	0x08003f49
 8003f04:	08003f49 	.word	0x08003f49
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f3d 	.word	0x08003f3d
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	08003f49 	.word	0x08003f49
 8003f1c:	08003f37 	.word	0x08003f37
 8003f20:	08003f49 	.word	0x08003f49
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f49 	.word	0x08003f49
 8003f2c:	08003f43 	.word	0x08003f43
 8003f30:	2300      	movs	r3, #0
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e117      	b.n	8004166 <UART_SetConfig+0x346>
 8003f36:	2302      	movs	r3, #2
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	e114      	b.n	8004166 <UART_SetConfig+0x346>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e111      	b.n	8004166 <UART_SetConfig+0x346>
 8003f42:	2308      	movs	r3, #8
 8003f44:	77fb      	strb	r3, [r7, #31]
 8003f46:	e10e      	b.n	8004166 <UART_SetConfig+0x346>
 8003f48:	2310      	movs	r3, #16
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e10b      	b.n	8004166 <UART_SetConfig+0x346>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <UART_SetConfig+0x2d8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d120      	bne.n	8003f9a <UART_SetConfig+0x17a>
 8003f58:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <UART_SetConfig+0x2d0>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f62:	2b30      	cmp	r3, #48	; 0x30
 8003f64:	d013      	beq.n	8003f8e <UART_SetConfig+0x16e>
 8003f66:	2b30      	cmp	r3, #48	; 0x30
 8003f68:	d814      	bhi.n	8003f94 <UART_SetConfig+0x174>
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d009      	beq.n	8003f82 <UART_SetConfig+0x162>
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d810      	bhi.n	8003f94 <UART_SetConfig+0x174>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <UART_SetConfig+0x15c>
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d006      	beq.n	8003f88 <UART_SetConfig+0x168>
 8003f7a:	e00b      	b.n	8003f94 <UART_SetConfig+0x174>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e0f1      	b.n	8004166 <UART_SetConfig+0x346>
 8003f82:	2302      	movs	r3, #2
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e0ee      	b.n	8004166 <UART_SetConfig+0x346>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e0eb      	b.n	8004166 <UART_SetConfig+0x346>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	77fb      	strb	r3, [r7, #31]
 8003f92:	e0e8      	b.n	8004166 <UART_SetConfig+0x346>
 8003f94:	2310      	movs	r3, #16
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e0e5      	b.n	8004166 <UART_SetConfig+0x346>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a57      	ldr	r2, [pc, #348]	; (80040fc <UART_SetConfig+0x2dc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d120      	bne.n	8003fe6 <UART_SetConfig+0x1c6>
 8003fa4:	4b52      	ldr	r3, [pc, #328]	; (80040f0 <UART_SetConfig+0x2d0>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fae:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb0:	d013      	beq.n	8003fda <UART_SetConfig+0x1ba>
 8003fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb4:	d814      	bhi.n	8003fe0 <UART_SetConfig+0x1c0>
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d009      	beq.n	8003fce <UART_SetConfig+0x1ae>
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d810      	bhi.n	8003fe0 <UART_SetConfig+0x1c0>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <UART_SetConfig+0x1a8>
 8003fc2:	2b40      	cmp	r3, #64	; 0x40
 8003fc4:	d006      	beq.n	8003fd4 <UART_SetConfig+0x1b4>
 8003fc6:	e00b      	b.n	8003fe0 <UART_SetConfig+0x1c0>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e0cb      	b.n	8004166 <UART_SetConfig+0x346>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e0c8      	b.n	8004166 <UART_SetConfig+0x346>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e0c5      	b.n	8004166 <UART_SetConfig+0x346>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e0c2      	b.n	8004166 <UART_SetConfig+0x346>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e0bf      	b.n	8004166 <UART_SetConfig+0x346>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a45      	ldr	r2, [pc, #276]	; (8004100 <UART_SetConfig+0x2e0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d125      	bne.n	800403c <UART_SetConfig+0x21c>
 8003ff0:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <UART_SetConfig+0x2d0>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ffe:	d017      	beq.n	8004030 <UART_SetConfig+0x210>
 8004000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004004:	d817      	bhi.n	8004036 <UART_SetConfig+0x216>
 8004006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400a:	d00b      	beq.n	8004024 <UART_SetConfig+0x204>
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d811      	bhi.n	8004036 <UART_SetConfig+0x216>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <UART_SetConfig+0x1fe>
 8004016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401a:	d006      	beq.n	800402a <UART_SetConfig+0x20a>
 800401c:	e00b      	b.n	8004036 <UART_SetConfig+0x216>
 800401e:	2300      	movs	r3, #0
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e0a0      	b.n	8004166 <UART_SetConfig+0x346>
 8004024:	2302      	movs	r3, #2
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e09d      	b.n	8004166 <UART_SetConfig+0x346>
 800402a:	2304      	movs	r3, #4
 800402c:	77fb      	strb	r3, [r7, #31]
 800402e:	e09a      	b.n	8004166 <UART_SetConfig+0x346>
 8004030:	2308      	movs	r3, #8
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e097      	b.n	8004166 <UART_SetConfig+0x346>
 8004036:	2310      	movs	r3, #16
 8004038:	77fb      	strb	r3, [r7, #31]
 800403a:	e094      	b.n	8004166 <UART_SetConfig+0x346>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a30      	ldr	r2, [pc, #192]	; (8004104 <UART_SetConfig+0x2e4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d125      	bne.n	8004092 <UART_SetConfig+0x272>
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <UART_SetConfig+0x2d0>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004050:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004054:	d017      	beq.n	8004086 <UART_SetConfig+0x266>
 8004056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800405a:	d817      	bhi.n	800408c <UART_SetConfig+0x26c>
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004060:	d00b      	beq.n	800407a <UART_SetConfig+0x25a>
 8004062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004066:	d811      	bhi.n	800408c <UART_SetConfig+0x26c>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <UART_SetConfig+0x254>
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004070:	d006      	beq.n	8004080 <UART_SetConfig+0x260>
 8004072:	e00b      	b.n	800408c <UART_SetConfig+0x26c>
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e075      	b.n	8004166 <UART_SetConfig+0x346>
 800407a:	2302      	movs	r3, #2
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e072      	b.n	8004166 <UART_SetConfig+0x346>
 8004080:	2304      	movs	r3, #4
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e06f      	b.n	8004166 <UART_SetConfig+0x346>
 8004086:	2308      	movs	r3, #8
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e06c      	b.n	8004166 <UART_SetConfig+0x346>
 800408c:	2310      	movs	r3, #16
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e069      	b.n	8004166 <UART_SetConfig+0x346>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <UART_SetConfig+0x2e8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d137      	bne.n	800410c <UART_SetConfig+0x2ec>
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <UART_SetConfig+0x2d0>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040aa:	d017      	beq.n	80040dc <UART_SetConfig+0x2bc>
 80040ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040b0:	d817      	bhi.n	80040e2 <UART_SetConfig+0x2c2>
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b6:	d00b      	beq.n	80040d0 <UART_SetConfig+0x2b0>
 80040b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040bc:	d811      	bhi.n	80040e2 <UART_SetConfig+0x2c2>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <UART_SetConfig+0x2aa>
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d006      	beq.n	80040d6 <UART_SetConfig+0x2b6>
 80040c8:	e00b      	b.n	80040e2 <UART_SetConfig+0x2c2>
 80040ca:	2300      	movs	r3, #0
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e04a      	b.n	8004166 <UART_SetConfig+0x346>
 80040d0:	2302      	movs	r3, #2
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e047      	b.n	8004166 <UART_SetConfig+0x346>
 80040d6:	2304      	movs	r3, #4
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e044      	b.n	8004166 <UART_SetConfig+0x346>
 80040dc:	2308      	movs	r3, #8
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e041      	b.n	8004166 <UART_SetConfig+0x346>
 80040e2:	2310      	movs	r3, #16
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e03e      	b.n	8004166 <UART_SetConfig+0x346>
 80040e8:	efff69f3 	.word	0xefff69f3
 80040ec:	40011000 	.word	0x40011000
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40004400 	.word	0x40004400
 80040f8:	40004800 	.word	0x40004800
 80040fc:	40004c00 	.word	0x40004c00
 8004100:	40005000 	.word	0x40005000
 8004104:	40011400 	.word	0x40011400
 8004108:	40007800 	.word	0x40007800
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a71      	ldr	r2, [pc, #452]	; (80042d8 <UART_SetConfig+0x4b8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d125      	bne.n	8004162 <UART_SetConfig+0x342>
 8004116:	4b71      	ldr	r3, [pc, #452]	; (80042dc <UART_SetConfig+0x4bc>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004120:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004124:	d017      	beq.n	8004156 <UART_SetConfig+0x336>
 8004126:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800412a:	d817      	bhi.n	800415c <UART_SetConfig+0x33c>
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004130:	d00b      	beq.n	800414a <UART_SetConfig+0x32a>
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004136:	d811      	bhi.n	800415c <UART_SetConfig+0x33c>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <UART_SetConfig+0x324>
 800413c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004140:	d006      	beq.n	8004150 <UART_SetConfig+0x330>
 8004142:	e00b      	b.n	800415c <UART_SetConfig+0x33c>
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e00d      	b.n	8004166 <UART_SetConfig+0x346>
 800414a:	2302      	movs	r3, #2
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e00a      	b.n	8004166 <UART_SetConfig+0x346>
 8004150:	2304      	movs	r3, #4
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e007      	b.n	8004166 <UART_SetConfig+0x346>
 8004156:	2308      	movs	r3, #8
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e004      	b.n	8004166 <UART_SetConfig+0x346>
 800415c:	2310      	movs	r3, #16
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e001      	b.n	8004166 <UART_SetConfig+0x346>
 8004162:	2310      	movs	r3, #16
 8004164:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416e:	d15b      	bne.n	8004228 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004170:	7ffb      	ldrb	r3, [r7, #31]
 8004172:	2b08      	cmp	r3, #8
 8004174:	d827      	bhi.n	80041c6 <UART_SetConfig+0x3a6>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0x35c>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041c7 	.word	0x080041c7
 800418c:	080041b7 	.word	0x080041b7
 8004190:	080041c7 	.word	0x080041c7
 8004194:	080041c7 	.word	0x080041c7
 8004198:	080041c7 	.word	0x080041c7
 800419c:	080041bf 	.word	0x080041bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7fe f9ce 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 80041a4:	61b8      	str	r0, [r7, #24]
        break;
 80041a6:	e013      	b.n	80041d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a8:	f7fe f9de 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 80041ac:	61b8      	str	r0, [r7, #24]
        break;
 80041ae:	e00f      	b.n	80041d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b0:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <UART_SetConfig+0x4c0>)
 80041b2:	61bb      	str	r3, [r7, #24]
        break;
 80041b4:	e00c      	b.n	80041d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b6:	f7fe f8d5 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80041ba:	61b8      	str	r0, [r7, #24]
        break;
 80041bc:	e008      	b.n	80041d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	61bb      	str	r3, [r7, #24]
        break;
 80041c4:	e004      	b.n	80041d0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	77bb      	strb	r3, [r7, #30]
        break;
 80041ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d074      	beq.n	80042c0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	005a      	lsls	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	441a      	add	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b0f      	cmp	r3, #15
 80041f2:	d916      	bls.n	8004222 <UART_SetConfig+0x402>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fa:	d212      	bcs.n	8004222 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f023 030f 	bic.w	r3, r3, #15
 8004204:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	b29a      	uxth	r2, r3
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	4313      	orrs	r3, r2
 8004216:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	89fa      	ldrh	r2, [r7, #14]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	e04e      	b.n	80042c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77bb      	strb	r3, [r7, #30]
 8004226:	e04b      	b.n	80042c0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d827      	bhi.n	800427e <UART_SetConfig+0x45e>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <UART_SetConfig+0x414>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004259 	.word	0x08004259
 8004238:	08004261 	.word	0x08004261
 800423c:	08004269 	.word	0x08004269
 8004240:	0800427f 	.word	0x0800427f
 8004244:	0800426f 	.word	0x0800426f
 8004248:	0800427f 	.word	0x0800427f
 800424c:	0800427f 	.word	0x0800427f
 8004250:	0800427f 	.word	0x0800427f
 8004254:	08004277 	.word	0x08004277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004258:	f7fe f972 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 800425c:	61b8      	str	r0, [r7, #24]
        break;
 800425e:	e013      	b.n	8004288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7fe f982 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8004264:	61b8      	str	r0, [r7, #24]
        break;
 8004266:	e00f      	b.n	8004288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <UART_SetConfig+0x4c0>)
 800426a:	61bb      	str	r3, [r7, #24]
        break;
 800426c:	e00c      	b.n	8004288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426e:	f7fe f879 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8004272:	61b8      	str	r0, [r7, #24]
        break;
 8004274:	e008      	b.n	8004288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427a:	61bb      	str	r3, [r7, #24]
        break;
 800427c:	e004      	b.n	8004288 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	77bb      	strb	r3, [r7, #30]
        break;
 8004286:	bf00      	nop
    }

    if (pclk != 0U)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d018      	beq.n	80042c0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085a      	lsrs	r2, r3, #1
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	441a      	add	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b0f      	cmp	r3, #15
 80042a8:	d908      	bls.n	80042bc <UART_SetConfig+0x49c>
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b0:	d204      	bcs.n	80042bc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	60da      	str	r2, [r3, #12]
 80042ba:	e001      	b.n	80042c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40007c00 	.word	0x40007c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400

080042e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01a      	beq.n	80043fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e2:	d10a      	bne.n	80043fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004438:	f7fc fe7a 	bl	8001130 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b08      	cmp	r3, #8
 800444a:	d10e      	bne.n	800446a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f82d 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e023      	b.n	80044b2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d10e      	bne.n	8004496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f817 	bl	80044ba <UART_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e00d      	b.n	80044b2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ca:	e05e      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d05a      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d4:	f7fc fe2c 	bl	8001130 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <UART_WaitOnFlagUntilTimeout+0x30>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11b      	bne.n	8004522 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e043      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02c      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453e:	d124      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004548:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004558:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e00f      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d091      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d10e      	bne.n	8004606 <UART_Start_Receive_IT+0x52>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <UART_Start_Receive_IT+0x48>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045fa:	e02d      	b.n	8004658 <UART_Start_Receive_IT+0xa4>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	22ff      	movs	r2, #255	; 0xff
 8004600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004604:	e028      	b.n	8004658 <UART_Start_Receive_IT+0xa4>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <UART_Start_Receive_IT+0x76>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <UART_Start_Receive_IT+0x6c>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	22ff      	movs	r2, #255	; 0xff
 800461a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800461e:	e01b      	b.n	8004658 <UART_Start_Receive_IT+0xa4>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	227f      	movs	r2, #127	; 0x7f
 8004624:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004628:	e016      	b.n	8004658 <UART_Start_Receive_IT+0xa4>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004632:	d10d      	bne.n	8004650 <UART_Start_Receive_IT+0x9c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <UART_Start_Receive_IT+0x92>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	227f      	movs	r2, #127	; 0x7f
 8004640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004644:	e008      	b.n	8004658 <UART_Start_Receive_IT+0xa4>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	223f      	movs	r2, #63	; 0x3f
 800464a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800464e:	e003      	b.n	8004658 <UART_Start_Receive_IT+0xa4>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2222      	movs	r2, #34	; 0x22
 8004664:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d107      	bne.n	8004690 <UART_Start_Receive_IT+0xdc>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <UART_Start_Receive_IT+0x108>)
 800468c:	665a      	str	r2, [r3, #100]	; 0x64
 800468e:	e002      	b.n	8004696 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <UART_Start_Receive_IT+0x10c>)
 8004694:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80046ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	08004855 	.word	0x08004855
 80046c0:	08004781 	.word	0x08004781

080046c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0210 	bic.w	r2, r2, #16
 8004702:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff fb4d 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004764:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fb20 	bl	8003db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800478e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004794:	2b22      	cmp	r3, #34	; 0x22
 8004796:	d151      	bne.n	800483c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047a0:	89bb      	ldrh	r3, [r7, #12]
 80047a2:	b2d9      	uxtb	r1, r3
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	400a      	ands	r2, r1
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d138      	bne.n	800484c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047e8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	2b01      	cmp	r3, #1
 800480c:	d10f      	bne.n	800482e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0210 	bic.w	r2, r2, #16
 800481c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fae4 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
 800482c:	e002      	b.n	8004834 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff facc 	bl	8003dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800483a:	e007      	b.n	800484c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	619a      	str	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004862:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004868:	2b22      	cmp	r3, #34	; 0x22
 800486a:	d151      	bne.n	8004910 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800487a:	89ba      	ldrh	r2, [r7, #12]
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	4013      	ands	r3, r2
 8004880:	b29a      	uxth	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	1c9a      	adds	r2, r3, #2
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d138      	bne.n	8004920 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048bc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d10f      	bne.n	8004902 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0210 	bic.w	r2, r2, #16
 80048f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fa7a 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
 8004900:	e002      	b.n	8004908 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fa62 	bl	8003dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800490e:	e007      	b.n	8004920 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004928:	b084      	sub	sp, #16
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	f107 001c 	add.w	r0, r7, #28
 8004936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2b01      	cmp	r3, #1
 800493e:	d120      	bne.n	8004982 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <USB_CoreInit+0xac>)
 8004952:	4013      	ands	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa5a 	bl	8004e30 <USB_CoreReset>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e010      	b.n	80049a4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa4e 	bl	8004e30 <USB_CoreReset>
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10b      	bne.n	80049c2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f043 0206 	orr.w	r2, r3, #6
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ce:	b004      	add	sp, #16
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	ffbdffbf 	.word	0xffbdffbf

080049d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 0201 	bic.w	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d106      	bne.n	8004a26 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	e00b      	b.n	8004a3e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]
 8004a38:	e001      	b.n	8004a3e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e003      	b.n	8004a46 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a3e:	2032      	movs	r0, #50	; 0x32
 8004a40:	f7fc fb82 	bl	8001148 <HAL_Delay>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a50:	b084      	sub	sp, #16
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e009      	b.n	8004a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3340      	adds	r3, #64	; 0x40
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0e      	cmp	r3, #14
 8004a88:	d9f2      	bls.n	8004a70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11c      	bne.n	8004aca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9e:	f043 0302 	orr.w	r3, r3, #2
 8004aa2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e005      	b.n	8004ad6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	461a      	mov	r2, r3
 8004af2:	680b      	ldr	r3, [r1, #0]
 8004af4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10c      	bne.n	8004b16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b02:	2100      	movs	r1, #0
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f959 	bl	8004dbc <USB_SetDevSpeed>
 8004b0a:	e018      	b.n	8004b3e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f954 	bl	8004dbc <USB_SetDevSpeed>
 8004b14:	e013      	b.n	8004b3e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d10c      	bne.n	8004b36 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b22:	2100      	movs	r1, #0
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f949 	bl	8004dbc <USB_SetDevSpeed>
 8004b2a:	e008      	b.n	8004b3e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f944 	bl	8004dbc <USB_SetDevSpeed>
 8004b34:	e003      	b.n	8004b3e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b36:	2103      	movs	r1, #3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f93f 	bl	8004dbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b3e:	2110      	movs	r1, #16
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8f3 	bl	8004d2c <USB_FlushTxFifo>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f911 	bl	8004d78 <USB_FlushRxFifo>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b66:	461a      	mov	r2, r3
 8004b68:	2300      	movs	r3, #0
 8004b6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	461a      	mov	r2, r3
 8004b74:	2300      	movs	r3, #0
 8004b76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2300      	movs	r3, #0
 8004b82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	e043      	b.n	8004c12 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ba0:	d118      	bne.n	8004bd4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e013      	b.n	8004be6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e008      	b.n	8004be6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	461a      	mov	r2, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	461a      	mov	r2, r3
 8004c06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d3b7      	bcc.n	8004b8a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	e043      	b.n	8004ca8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c36:	d118      	bne.n	8004c6a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e013      	b.n	8004c7c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	461a      	mov	r2, r3
 8004c62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e008      	b.n	8004c7c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d3b7      	bcc.n	8004c20 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f043 0210 	orr.w	r2, r3, #16
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <USB_DevInit+0x2d4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f043 0208 	orr.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d105      	bne.n	8004d14 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <USB_DevInit+0x2d8>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d20:	b004      	add	sp, #16
 8004d22:	4770      	bx	lr
 8004d24:	803c3800 	.word	0x803c3800
 8004d28:	40000004 	.word	0x40000004

08004d2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <USB_FlushTxFifo+0x48>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e006      	b.n	8004d66 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d0f0      	beq.n	8004d46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	00030d40 	.word	0x00030d40

08004d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2210      	movs	r2, #16
 8004d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <USB_FlushRxFifo+0x40>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d0f0      	beq.n	8004d8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	00030d40 	.word	0x00030d40

08004dbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e08:	f023 0303 	bic.w	r3, r3, #3
 8004e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <USB_CoreReset+0x64>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e01b      	b.n	8004e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	daf2      	bge.n	8004e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <USB_CoreReset+0x64>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d901      	bls.n	8004e78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e006      	b.n	8004e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d0f0      	beq.n	8004e66 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	00030d40 	.word	0x00030d40

08004e98 <__errno>:
 8004e98:	4b01      	ldr	r3, [pc, #4]	; (8004ea0 <__errno+0x8>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	2000000c 	.word	0x2000000c

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4d0d      	ldr	r5, [pc, #52]	; (8004edc <__libc_init_array+0x38>)
 8004ea8:	4c0d      	ldr	r4, [pc, #52]	; (8004ee0 <__libc_init_array+0x3c>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	42a6      	cmp	r6, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ee4 <__libc_init_array+0x40>)
 8004eb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ee8 <__libc_init_array+0x44>)
 8004eb8:	f000 fc62 	bl	8005780 <_init>
 8004ebc:	1b64      	subs	r4, r4, r5
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ecc:	4798      	blx	r3
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed6:	4798      	blx	r3
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	080057f8 	.word	0x080057f8
 8004ee0:	080057f8 	.word	0x080057f8
 8004ee4:	080057f8 	.word	0x080057f8
 8004ee8:	080057fc 	.word	0x080057fc

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <sniprintf>:
 8004efc:	b40c      	push	{r2, r3}
 8004efe:	b530      	push	{r4, r5, lr}
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <sniprintf+0x64>)
 8004f02:	1e0c      	subs	r4, r1, #0
 8004f04:	681d      	ldr	r5, [r3, #0]
 8004f06:	b09d      	sub	sp, #116	; 0x74
 8004f08:	da08      	bge.n	8004f1c <sniprintf+0x20>
 8004f0a:	238b      	movs	r3, #139	; 0x8b
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	b01d      	add	sp, #116	; 0x74
 8004f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f18:	b002      	add	sp, #8
 8004f1a:	4770      	bx	lr
 8004f1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f24:	bf14      	ite	ne
 8004f26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f2a:	4623      	moveq	r3, r4
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f34:	9002      	str	r0, [sp, #8]
 8004f36:	9006      	str	r0, [sp, #24]
 8004f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f3e:	ab21      	add	r3, sp, #132	; 0x84
 8004f40:	a902      	add	r1, sp, #8
 8004f42:	4628      	mov	r0, r5
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	f000 f869 	bl	800501c <_svfiprintf_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	bfbc      	itt	lt
 8004f4e:	238b      	movlt	r3, #139	; 0x8b
 8004f50:	602b      	strlt	r3, [r5, #0]
 8004f52:	2c00      	cmp	r4, #0
 8004f54:	d0dd      	beq.n	8004f12 <sniprintf+0x16>
 8004f56:	9b02      	ldr	r3, [sp, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e7d9      	b.n	8004f12 <sniprintf+0x16>
 8004f5e:	bf00      	nop
 8004f60:	2000000c 	.word	0x2000000c

08004f64 <__ssputs_r>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	688e      	ldr	r6, [r1, #8]
 8004f6a:	429e      	cmp	r6, r3
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	4690      	mov	r8, r2
 8004f72:	461f      	mov	r7, r3
 8004f74:	d838      	bhi.n	8004fe8 <__ssputs_r+0x84>
 8004f76:	898a      	ldrh	r2, [r1, #12]
 8004f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f7c:	d032      	beq.n	8004fe4 <__ssputs_r+0x80>
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	6909      	ldr	r1, [r1, #16]
 8004f82:	eba5 0901 	sub.w	r9, r5, r1
 8004f86:	6965      	ldr	r5, [r4, #20]
 8004f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f90:	3301      	adds	r3, #1
 8004f92:	444b      	add	r3, r9
 8004f94:	106d      	asrs	r5, r5, #1
 8004f96:	429d      	cmp	r5, r3
 8004f98:	bf38      	it	cc
 8004f9a:	461d      	movcc	r5, r3
 8004f9c:	0553      	lsls	r3, r2, #21
 8004f9e:	d531      	bpl.n	8005004 <__ssputs_r+0xa0>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f000 fb47 	bl	8005634 <_malloc_r>
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	b950      	cbnz	r0, 8004fc0 <__ssputs_r+0x5c>
 8004faa:	230c      	movs	r3, #12
 8004fac:	f8ca 3000 	str.w	r3, [sl]
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	6921      	ldr	r1, [r4, #16]
 8004fc2:	464a      	mov	r2, r9
 8004fc4:	f000 fabe 	bl	8005544 <memcpy>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	6126      	str	r6, [r4, #16]
 8004fd6:	6165      	str	r5, [r4, #20]
 8004fd8:	444e      	add	r6, r9
 8004fda:	eba5 0509 	sub.w	r5, r5, r9
 8004fde:	6026      	str	r6, [r4, #0]
 8004fe0:	60a5      	str	r5, [r4, #8]
 8004fe2:	463e      	mov	r6, r7
 8004fe4:	42be      	cmp	r6, r7
 8004fe6:	d900      	bls.n	8004fea <__ssputs_r+0x86>
 8004fe8:	463e      	mov	r6, r7
 8004fea:	4632      	mov	r2, r6
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	4641      	mov	r1, r8
 8004ff0:	f000 fab6 	bl	8005560 <memmove>
 8004ff4:	68a3      	ldr	r3, [r4, #8]
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	1b9b      	subs	r3, r3, r6
 8004ffa:	4432      	add	r2, r6
 8004ffc:	60a3      	str	r3, [r4, #8]
 8004ffe:	6022      	str	r2, [r4, #0]
 8005000:	2000      	movs	r0, #0
 8005002:	e7db      	b.n	8004fbc <__ssputs_r+0x58>
 8005004:	462a      	mov	r2, r5
 8005006:	f000 fb6f 	bl	80056e8 <_realloc_r>
 800500a:	4606      	mov	r6, r0
 800500c:	2800      	cmp	r0, #0
 800500e:	d1e1      	bne.n	8004fd4 <__ssputs_r+0x70>
 8005010:	6921      	ldr	r1, [r4, #16]
 8005012:	4650      	mov	r0, sl
 8005014:	f000 fabe 	bl	8005594 <_free_r>
 8005018:	e7c7      	b.n	8004faa <__ssputs_r+0x46>
	...

0800501c <_svfiprintf_r>:
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	4698      	mov	r8, r3
 8005022:	898b      	ldrh	r3, [r1, #12]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	b09d      	sub	sp, #116	; 0x74
 8005028:	4607      	mov	r7, r0
 800502a:	460d      	mov	r5, r1
 800502c:	4614      	mov	r4, r2
 800502e:	d50e      	bpl.n	800504e <_svfiprintf_r+0x32>
 8005030:	690b      	ldr	r3, [r1, #16]
 8005032:	b963      	cbnz	r3, 800504e <_svfiprintf_r+0x32>
 8005034:	2140      	movs	r1, #64	; 0x40
 8005036:	f000 fafd 	bl	8005634 <_malloc_r>
 800503a:	6028      	str	r0, [r5, #0]
 800503c:	6128      	str	r0, [r5, #16]
 800503e:	b920      	cbnz	r0, 800504a <_svfiprintf_r+0x2e>
 8005040:	230c      	movs	r3, #12
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	e0d1      	b.n	80051ee <_svfiprintf_r+0x1d2>
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	616b      	str	r3, [r5, #20]
 800504e:	2300      	movs	r3, #0
 8005050:	9309      	str	r3, [sp, #36]	; 0x24
 8005052:	2320      	movs	r3, #32
 8005054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005058:	f8cd 800c 	str.w	r8, [sp, #12]
 800505c:	2330      	movs	r3, #48	; 0x30
 800505e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005208 <_svfiprintf_r+0x1ec>
 8005062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005066:	f04f 0901 	mov.w	r9, #1
 800506a:	4623      	mov	r3, r4
 800506c:	469a      	mov	sl, r3
 800506e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005072:	b10a      	cbz	r2, 8005078 <_svfiprintf_r+0x5c>
 8005074:	2a25      	cmp	r2, #37	; 0x25
 8005076:	d1f9      	bne.n	800506c <_svfiprintf_r+0x50>
 8005078:	ebba 0b04 	subs.w	fp, sl, r4
 800507c:	d00b      	beq.n	8005096 <_svfiprintf_r+0x7a>
 800507e:	465b      	mov	r3, fp
 8005080:	4622      	mov	r2, r4
 8005082:	4629      	mov	r1, r5
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff ff6d 	bl	8004f64 <__ssputs_r>
 800508a:	3001      	adds	r0, #1
 800508c:	f000 80aa 	beq.w	80051e4 <_svfiprintf_r+0x1c8>
 8005090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005092:	445a      	add	r2, fp
 8005094:	9209      	str	r2, [sp, #36]	; 0x24
 8005096:	f89a 3000 	ldrb.w	r3, [sl]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80a2 	beq.w	80051e4 <_svfiprintf_r+0x1c8>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295
 80050a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050aa:	f10a 0a01 	add.w	sl, sl, #1
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050b6:	931a      	str	r3, [sp, #104]	; 0x68
 80050b8:	4654      	mov	r4, sl
 80050ba:	2205      	movs	r2, #5
 80050bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c0:	4851      	ldr	r0, [pc, #324]	; (8005208 <_svfiprintf_r+0x1ec>)
 80050c2:	f7fb f8bd 	bl	8000240 <memchr>
 80050c6:	9a04      	ldr	r2, [sp, #16]
 80050c8:	b9d8      	cbnz	r0, 8005102 <_svfiprintf_r+0xe6>
 80050ca:	06d0      	lsls	r0, r2, #27
 80050cc:	bf44      	itt	mi
 80050ce:	2320      	movmi	r3, #32
 80050d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050d4:	0711      	lsls	r1, r2, #28
 80050d6:	bf44      	itt	mi
 80050d8:	232b      	movmi	r3, #43	; 0x2b
 80050da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050de:	f89a 3000 	ldrb.w	r3, [sl]
 80050e2:	2b2a      	cmp	r3, #42	; 0x2a
 80050e4:	d015      	beq.n	8005112 <_svfiprintf_r+0xf6>
 80050e6:	9a07      	ldr	r2, [sp, #28]
 80050e8:	4654      	mov	r4, sl
 80050ea:	2000      	movs	r0, #0
 80050ec:	f04f 0c0a 	mov.w	ip, #10
 80050f0:	4621      	mov	r1, r4
 80050f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050f6:	3b30      	subs	r3, #48	; 0x30
 80050f8:	2b09      	cmp	r3, #9
 80050fa:	d94e      	bls.n	800519a <_svfiprintf_r+0x17e>
 80050fc:	b1b0      	cbz	r0, 800512c <_svfiprintf_r+0x110>
 80050fe:	9207      	str	r2, [sp, #28]
 8005100:	e014      	b.n	800512c <_svfiprintf_r+0x110>
 8005102:	eba0 0308 	sub.w	r3, r0, r8
 8005106:	fa09 f303 	lsl.w	r3, r9, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	9304      	str	r3, [sp, #16]
 800510e:	46a2      	mov	sl, r4
 8005110:	e7d2      	b.n	80050b8 <_svfiprintf_r+0x9c>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	1d19      	adds	r1, r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	9103      	str	r1, [sp, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfbb      	ittet	lt
 800511e:	425b      	neglt	r3, r3
 8005120:	f042 0202 	orrlt.w	r2, r2, #2
 8005124:	9307      	strge	r3, [sp, #28]
 8005126:	9307      	strlt	r3, [sp, #28]
 8005128:	bfb8      	it	lt
 800512a:	9204      	strlt	r2, [sp, #16]
 800512c:	7823      	ldrb	r3, [r4, #0]
 800512e:	2b2e      	cmp	r3, #46	; 0x2e
 8005130:	d10c      	bne.n	800514c <_svfiprintf_r+0x130>
 8005132:	7863      	ldrb	r3, [r4, #1]
 8005134:	2b2a      	cmp	r3, #42	; 0x2a
 8005136:	d135      	bne.n	80051a4 <_svfiprintf_r+0x188>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	9203      	str	r2, [sp, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	bfb8      	it	lt
 8005144:	f04f 33ff 	movlt.w	r3, #4294967295
 8005148:	3402      	adds	r4, #2
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005218 <_svfiprintf_r+0x1fc>
 8005150:	7821      	ldrb	r1, [r4, #0]
 8005152:	2203      	movs	r2, #3
 8005154:	4650      	mov	r0, sl
 8005156:	f7fb f873 	bl	8000240 <memchr>
 800515a:	b140      	cbz	r0, 800516e <_svfiprintf_r+0x152>
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	eba0 000a 	sub.w	r0, r0, sl
 8005162:	fa03 f000 	lsl.w	r0, r3, r0
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	4303      	orrs	r3, r0
 800516a:	3401      	adds	r4, #1
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005172:	4826      	ldr	r0, [pc, #152]	; (800520c <_svfiprintf_r+0x1f0>)
 8005174:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005178:	2206      	movs	r2, #6
 800517a:	f7fb f861 	bl	8000240 <memchr>
 800517e:	2800      	cmp	r0, #0
 8005180:	d038      	beq.n	80051f4 <_svfiprintf_r+0x1d8>
 8005182:	4b23      	ldr	r3, [pc, #140]	; (8005210 <_svfiprintf_r+0x1f4>)
 8005184:	bb1b      	cbnz	r3, 80051ce <_svfiprintf_r+0x1b2>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	3307      	adds	r3, #7
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	3308      	adds	r3, #8
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005194:	4433      	add	r3, r6
 8005196:	9309      	str	r3, [sp, #36]	; 0x24
 8005198:	e767      	b.n	800506a <_svfiprintf_r+0x4e>
 800519a:	fb0c 3202 	mla	r2, ip, r2, r3
 800519e:	460c      	mov	r4, r1
 80051a0:	2001      	movs	r0, #1
 80051a2:	e7a5      	b.n	80050f0 <_svfiprintf_r+0xd4>
 80051a4:	2300      	movs	r3, #0
 80051a6:	3401      	adds	r4, #1
 80051a8:	9305      	str	r3, [sp, #20]
 80051aa:	4619      	mov	r1, r3
 80051ac:	f04f 0c0a 	mov.w	ip, #10
 80051b0:	4620      	mov	r0, r4
 80051b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b6:	3a30      	subs	r2, #48	; 0x30
 80051b8:	2a09      	cmp	r2, #9
 80051ba:	d903      	bls.n	80051c4 <_svfiprintf_r+0x1a8>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0c5      	beq.n	800514c <_svfiprintf_r+0x130>
 80051c0:	9105      	str	r1, [sp, #20]
 80051c2:	e7c3      	b.n	800514c <_svfiprintf_r+0x130>
 80051c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c8:	4604      	mov	r4, r0
 80051ca:	2301      	movs	r3, #1
 80051cc:	e7f0      	b.n	80051b0 <_svfiprintf_r+0x194>
 80051ce:	ab03      	add	r3, sp, #12
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	462a      	mov	r2, r5
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <_svfiprintf_r+0x1f8>)
 80051d6:	a904      	add	r1, sp, #16
 80051d8:	4638      	mov	r0, r7
 80051da:	f3af 8000 	nop.w
 80051de:	1c42      	adds	r2, r0, #1
 80051e0:	4606      	mov	r6, r0
 80051e2:	d1d6      	bne.n	8005192 <_svfiprintf_r+0x176>
 80051e4:	89ab      	ldrh	r3, [r5, #12]
 80051e6:	065b      	lsls	r3, r3, #25
 80051e8:	f53f af2c 	bmi.w	8005044 <_svfiprintf_r+0x28>
 80051ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ee:	b01d      	add	sp, #116	; 0x74
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	ab03      	add	r3, sp, #12
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	462a      	mov	r2, r5
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <_svfiprintf_r+0x1f8>)
 80051fc:	a904      	add	r1, sp, #16
 80051fe:	4638      	mov	r0, r7
 8005200:	f000 f87a 	bl	80052f8 <_printf_i>
 8005204:	e7eb      	b.n	80051de <_svfiprintf_r+0x1c2>
 8005206:	bf00      	nop
 8005208:	080057bc 	.word	0x080057bc
 800520c:	080057c6 	.word	0x080057c6
 8005210:	00000000 	.word	0x00000000
 8005214:	08004f65 	.word	0x08004f65
 8005218:	080057c2 	.word	0x080057c2

0800521c <_printf_common>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	4616      	mov	r6, r2
 8005222:	4699      	mov	r9, r3
 8005224:	688a      	ldr	r2, [r1, #8]
 8005226:	690b      	ldr	r3, [r1, #16]
 8005228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800522c:	4293      	cmp	r3, r2
 800522e:	bfb8      	it	lt
 8005230:	4613      	movlt	r3, r2
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005238:	4607      	mov	r7, r0
 800523a:	460c      	mov	r4, r1
 800523c:	b10a      	cbz	r2, 8005242 <_printf_common+0x26>
 800523e:	3301      	adds	r3, #1
 8005240:	6033      	str	r3, [r6, #0]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	0699      	lsls	r1, r3, #26
 8005246:	bf42      	ittt	mi
 8005248:	6833      	ldrmi	r3, [r6, #0]
 800524a:	3302      	addmi	r3, #2
 800524c:	6033      	strmi	r3, [r6, #0]
 800524e:	6825      	ldr	r5, [r4, #0]
 8005250:	f015 0506 	ands.w	r5, r5, #6
 8005254:	d106      	bne.n	8005264 <_printf_common+0x48>
 8005256:	f104 0a19 	add.w	sl, r4, #25
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	6832      	ldr	r2, [r6, #0]
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	42ab      	cmp	r3, r5
 8005262:	dc26      	bgt.n	80052b2 <_printf_common+0x96>
 8005264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005268:	1e13      	subs	r3, r2, #0
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	bf18      	it	ne
 800526e:	2301      	movne	r3, #1
 8005270:	0692      	lsls	r2, r2, #26
 8005272:	d42b      	bmi.n	80052cc <_printf_common+0xb0>
 8005274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005278:	4649      	mov	r1, r9
 800527a:	4638      	mov	r0, r7
 800527c:	47c0      	blx	r8
 800527e:	3001      	adds	r0, #1
 8005280:	d01e      	beq.n	80052c0 <_printf_common+0xa4>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	68e5      	ldr	r5, [r4, #12]
 8005286:	6832      	ldr	r2, [r6, #0]
 8005288:	f003 0306 	and.w	r3, r3, #6
 800528c:	2b04      	cmp	r3, #4
 800528e:	bf08      	it	eq
 8005290:	1aad      	subeq	r5, r5, r2
 8005292:	68a3      	ldr	r3, [r4, #8]
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	bf0c      	ite	eq
 8005298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800529c:	2500      	movne	r5, #0
 800529e:	4293      	cmp	r3, r2
 80052a0:	bfc4      	itt	gt
 80052a2:	1a9b      	subgt	r3, r3, r2
 80052a4:	18ed      	addgt	r5, r5, r3
 80052a6:	2600      	movs	r6, #0
 80052a8:	341a      	adds	r4, #26
 80052aa:	42b5      	cmp	r5, r6
 80052ac:	d11a      	bne.n	80052e4 <_printf_common+0xc8>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e008      	b.n	80052c4 <_printf_common+0xa8>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4652      	mov	r2, sl
 80052b6:	4649      	mov	r1, r9
 80052b8:	4638      	mov	r0, r7
 80052ba:	47c0      	blx	r8
 80052bc:	3001      	adds	r0, #1
 80052be:	d103      	bne.n	80052c8 <_printf_common+0xac>
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c8:	3501      	adds	r5, #1
 80052ca:	e7c6      	b.n	800525a <_printf_common+0x3e>
 80052cc:	18e1      	adds	r1, r4, r3
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	2030      	movs	r0, #48	; 0x30
 80052d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d6:	4422      	add	r2, r4
 80052d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052e0:	3302      	adds	r3, #2
 80052e2:	e7c7      	b.n	8005274 <_printf_common+0x58>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4622      	mov	r2, r4
 80052e8:	4649      	mov	r1, r9
 80052ea:	4638      	mov	r0, r7
 80052ec:	47c0      	blx	r8
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0e6      	beq.n	80052c0 <_printf_common+0xa4>
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7d9      	b.n	80052aa <_printf_common+0x8e>
	...

080052f8 <_printf_i>:
 80052f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	460c      	mov	r4, r1
 80052fe:	4691      	mov	r9, r2
 8005300:	7e27      	ldrb	r7, [r4, #24]
 8005302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005304:	2f78      	cmp	r7, #120	; 0x78
 8005306:	4680      	mov	r8, r0
 8005308:	469a      	mov	sl, r3
 800530a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800530e:	d807      	bhi.n	8005320 <_printf_i+0x28>
 8005310:	2f62      	cmp	r7, #98	; 0x62
 8005312:	d80a      	bhi.n	800532a <_printf_i+0x32>
 8005314:	2f00      	cmp	r7, #0
 8005316:	f000 80d8 	beq.w	80054ca <_printf_i+0x1d2>
 800531a:	2f58      	cmp	r7, #88	; 0x58
 800531c:	f000 80a3 	beq.w	8005466 <_printf_i+0x16e>
 8005320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005328:	e03a      	b.n	80053a0 <_printf_i+0xa8>
 800532a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800532e:	2b15      	cmp	r3, #21
 8005330:	d8f6      	bhi.n	8005320 <_printf_i+0x28>
 8005332:	a001      	add	r0, pc, #4	; (adr r0, 8005338 <_printf_i+0x40>)
 8005334:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005338:	08005391 	.word	0x08005391
 800533c:	080053a5 	.word	0x080053a5
 8005340:	08005321 	.word	0x08005321
 8005344:	08005321 	.word	0x08005321
 8005348:	08005321 	.word	0x08005321
 800534c:	08005321 	.word	0x08005321
 8005350:	080053a5 	.word	0x080053a5
 8005354:	08005321 	.word	0x08005321
 8005358:	08005321 	.word	0x08005321
 800535c:	08005321 	.word	0x08005321
 8005360:	08005321 	.word	0x08005321
 8005364:	080054b1 	.word	0x080054b1
 8005368:	080053d5 	.word	0x080053d5
 800536c:	08005493 	.word	0x08005493
 8005370:	08005321 	.word	0x08005321
 8005374:	08005321 	.word	0x08005321
 8005378:	080054d3 	.word	0x080054d3
 800537c:	08005321 	.word	0x08005321
 8005380:	080053d5 	.word	0x080053d5
 8005384:	08005321 	.word	0x08005321
 8005388:	08005321 	.word	0x08005321
 800538c:	0800549b 	.word	0x0800549b
 8005390:	680b      	ldr	r3, [r1, #0]
 8005392:	1d1a      	adds	r2, r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	600a      	str	r2, [r1, #0]
 8005398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800539c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0a3      	b.n	80054ec <_printf_i+0x1f4>
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	6808      	ldr	r0, [r1, #0]
 80053a8:	062e      	lsls	r6, r5, #24
 80053aa:	f100 0304 	add.w	r3, r0, #4
 80053ae:	d50a      	bpl.n	80053c6 <_printf_i+0xce>
 80053b0:	6805      	ldr	r5, [r0, #0]
 80053b2:	600b      	str	r3, [r1, #0]
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	da03      	bge.n	80053c0 <_printf_i+0xc8>
 80053b8:	232d      	movs	r3, #45	; 0x2d
 80053ba:	426d      	negs	r5, r5
 80053bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c0:	485e      	ldr	r0, [pc, #376]	; (800553c <_printf_i+0x244>)
 80053c2:	230a      	movs	r3, #10
 80053c4:	e019      	b.n	80053fa <_printf_i+0x102>
 80053c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053ca:	6805      	ldr	r5, [r0, #0]
 80053cc:	600b      	str	r3, [r1, #0]
 80053ce:	bf18      	it	ne
 80053d0:	b22d      	sxthne	r5, r5
 80053d2:	e7ef      	b.n	80053b4 <_printf_i+0xbc>
 80053d4:	680b      	ldr	r3, [r1, #0]
 80053d6:	6825      	ldr	r5, [r4, #0]
 80053d8:	1d18      	adds	r0, r3, #4
 80053da:	6008      	str	r0, [r1, #0]
 80053dc:	0628      	lsls	r0, r5, #24
 80053de:	d501      	bpl.n	80053e4 <_printf_i+0xec>
 80053e0:	681d      	ldr	r5, [r3, #0]
 80053e2:	e002      	b.n	80053ea <_printf_i+0xf2>
 80053e4:	0669      	lsls	r1, r5, #25
 80053e6:	d5fb      	bpl.n	80053e0 <_printf_i+0xe8>
 80053e8:	881d      	ldrh	r5, [r3, #0]
 80053ea:	4854      	ldr	r0, [pc, #336]	; (800553c <_printf_i+0x244>)
 80053ec:	2f6f      	cmp	r7, #111	; 0x6f
 80053ee:	bf0c      	ite	eq
 80053f0:	2308      	moveq	r3, #8
 80053f2:	230a      	movne	r3, #10
 80053f4:	2100      	movs	r1, #0
 80053f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053fa:	6866      	ldr	r6, [r4, #4]
 80053fc:	60a6      	str	r6, [r4, #8]
 80053fe:	2e00      	cmp	r6, #0
 8005400:	bfa2      	ittt	ge
 8005402:	6821      	ldrge	r1, [r4, #0]
 8005404:	f021 0104 	bicge.w	r1, r1, #4
 8005408:	6021      	strge	r1, [r4, #0]
 800540a:	b90d      	cbnz	r5, 8005410 <_printf_i+0x118>
 800540c:	2e00      	cmp	r6, #0
 800540e:	d04d      	beq.n	80054ac <_printf_i+0x1b4>
 8005410:	4616      	mov	r6, r2
 8005412:	fbb5 f1f3 	udiv	r1, r5, r3
 8005416:	fb03 5711 	mls	r7, r3, r1, r5
 800541a:	5dc7      	ldrb	r7, [r0, r7]
 800541c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005420:	462f      	mov	r7, r5
 8005422:	42bb      	cmp	r3, r7
 8005424:	460d      	mov	r5, r1
 8005426:	d9f4      	bls.n	8005412 <_printf_i+0x11a>
 8005428:	2b08      	cmp	r3, #8
 800542a:	d10b      	bne.n	8005444 <_printf_i+0x14c>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	07df      	lsls	r7, r3, #31
 8005430:	d508      	bpl.n	8005444 <_printf_i+0x14c>
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	6861      	ldr	r1, [r4, #4]
 8005436:	4299      	cmp	r1, r3
 8005438:	bfde      	ittt	le
 800543a:	2330      	movle	r3, #48	; 0x30
 800543c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005440:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005444:	1b92      	subs	r2, r2, r6
 8005446:	6122      	str	r2, [r4, #16]
 8005448:	f8cd a000 	str.w	sl, [sp]
 800544c:	464b      	mov	r3, r9
 800544e:	aa03      	add	r2, sp, #12
 8005450:	4621      	mov	r1, r4
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff fee2 	bl	800521c <_printf_common>
 8005458:	3001      	adds	r0, #1
 800545a:	d14c      	bne.n	80054f6 <_printf_i+0x1fe>
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	b004      	add	sp, #16
 8005462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005466:	4835      	ldr	r0, [pc, #212]	; (800553c <_printf_i+0x244>)
 8005468:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	680e      	ldr	r6, [r1, #0]
 8005470:	061f      	lsls	r7, r3, #24
 8005472:	f856 5b04 	ldr.w	r5, [r6], #4
 8005476:	600e      	str	r6, [r1, #0]
 8005478:	d514      	bpl.n	80054a4 <_printf_i+0x1ac>
 800547a:	07d9      	lsls	r1, r3, #31
 800547c:	bf44      	itt	mi
 800547e:	f043 0320 	orrmi.w	r3, r3, #32
 8005482:	6023      	strmi	r3, [r4, #0]
 8005484:	b91d      	cbnz	r5, 800548e <_printf_i+0x196>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f023 0320 	bic.w	r3, r3, #32
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	2310      	movs	r3, #16
 8005490:	e7b0      	b.n	80053f4 <_printf_i+0xfc>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f043 0320 	orr.w	r3, r3, #32
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	2378      	movs	r3, #120	; 0x78
 800549c:	4828      	ldr	r0, [pc, #160]	; (8005540 <_printf_i+0x248>)
 800549e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054a2:	e7e3      	b.n	800546c <_printf_i+0x174>
 80054a4:	065e      	lsls	r6, r3, #25
 80054a6:	bf48      	it	mi
 80054a8:	b2ad      	uxthmi	r5, r5
 80054aa:	e7e6      	b.n	800547a <_printf_i+0x182>
 80054ac:	4616      	mov	r6, r2
 80054ae:	e7bb      	b.n	8005428 <_printf_i+0x130>
 80054b0:	680b      	ldr	r3, [r1, #0]
 80054b2:	6826      	ldr	r6, [r4, #0]
 80054b4:	6960      	ldr	r0, [r4, #20]
 80054b6:	1d1d      	adds	r5, r3, #4
 80054b8:	600d      	str	r5, [r1, #0]
 80054ba:	0635      	lsls	r5, r6, #24
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	d501      	bpl.n	80054c4 <_printf_i+0x1cc>
 80054c0:	6018      	str	r0, [r3, #0]
 80054c2:	e002      	b.n	80054ca <_printf_i+0x1d2>
 80054c4:	0671      	lsls	r1, r6, #25
 80054c6:	d5fb      	bpl.n	80054c0 <_printf_i+0x1c8>
 80054c8:	8018      	strh	r0, [r3, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	4616      	mov	r6, r2
 80054d0:	e7ba      	b.n	8005448 <_printf_i+0x150>
 80054d2:	680b      	ldr	r3, [r1, #0]
 80054d4:	1d1a      	adds	r2, r3, #4
 80054d6:	600a      	str	r2, [r1, #0]
 80054d8:	681e      	ldr	r6, [r3, #0]
 80054da:	6862      	ldr	r2, [r4, #4]
 80054dc:	2100      	movs	r1, #0
 80054de:	4630      	mov	r0, r6
 80054e0:	f7fa feae 	bl	8000240 <memchr>
 80054e4:	b108      	cbz	r0, 80054ea <_printf_i+0x1f2>
 80054e6:	1b80      	subs	r0, r0, r6
 80054e8:	6060      	str	r0, [r4, #4]
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	6123      	str	r3, [r4, #16]
 80054ee:	2300      	movs	r3, #0
 80054f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f4:	e7a8      	b.n	8005448 <_printf_i+0x150>
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	4632      	mov	r2, r6
 80054fa:	4649      	mov	r1, r9
 80054fc:	4640      	mov	r0, r8
 80054fe:	47d0      	blx	sl
 8005500:	3001      	adds	r0, #1
 8005502:	d0ab      	beq.n	800545c <_printf_i+0x164>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	079b      	lsls	r3, r3, #30
 8005508:	d413      	bmi.n	8005532 <_printf_i+0x23a>
 800550a:	68e0      	ldr	r0, [r4, #12]
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	4298      	cmp	r0, r3
 8005510:	bfb8      	it	lt
 8005512:	4618      	movlt	r0, r3
 8005514:	e7a4      	b.n	8005460 <_printf_i+0x168>
 8005516:	2301      	movs	r3, #1
 8005518:	4632      	mov	r2, r6
 800551a:	4649      	mov	r1, r9
 800551c:	4640      	mov	r0, r8
 800551e:	47d0      	blx	sl
 8005520:	3001      	adds	r0, #1
 8005522:	d09b      	beq.n	800545c <_printf_i+0x164>
 8005524:	3501      	adds	r5, #1
 8005526:	68e3      	ldr	r3, [r4, #12]
 8005528:	9903      	ldr	r1, [sp, #12]
 800552a:	1a5b      	subs	r3, r3, r1
 800552c:	42ab      	cmp	r3, r5
 800552e:	dcf2      	bgt.n	8005516 <_printf_i+0x21e>
 8005530:	e7eb      	b.n	800550a <_printf_i+0x212>
 8005532:	2500      	movs	r5, #0
 8005534:	f104 0619 	add.w	r6, r4, #25
 8005538:	e7f5      	b.n	8005526 <_printf_i+0x22e>
 800553a:	bf00      	nop
 800553c:	080057cd 	.word	0x080057cd
 8005540:	080057de 	.word	0x080057de

08005544 <memcpy>:
 8005544:	440a      	add	r2, r1
 8005546:	4291      	cmp	r1, r2
 8005548:	f100 33ff 	add.w	r3, r0, #4294967295
 800554c:	d100      	bne.n	8005550 <memcpy+0xc>
 800554e:	4770      	bx	lr
 8005550:	b510      	push	{r4, lr}
 8005552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800555a:	4291      	cmp	r1, r2
 800555c:	d1f9      	bne.n	8005552 <memcpy+0xe>
 800555e:	bd10      	pop	{r4, pc}

08005560 <memmove>:
 8005560:	4288      	cmp	r0, r1
 8005562:	b510      	push	{r4, lr}
 8005564:	eb01 0402 	add.w	r4, r1, r2
 8005568:	d902      	bls.n	8005570 <memmove+0x10>
 800556a:	4284      	cmp	r4, r0
 800556c:	4623      	mov	r3, r4
 800556e:	d807      	bhi.n	8005580 <memmove+0x20>
 8005570:	1e43      	subs	r3, r0, #1
 8005572:	42a1      	cmp	r1, r4
 8005574:	d008      	beq.n	8005588 <memmove+0x28>
 8005576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800557a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800557e:	e7f8      	b.n	8005572 <memmove+0x12>
 8005580:	4402      	add	r2, r0
 8005582:	4601      	mov	r1, r0
 8005584:	428a      	cmp	r2, r1
 8005586:	d100      	bne.n	800558a <memmove+0x2a>
 8005588:	bd10      	pop	{r4, pc}
 800558a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005592:	e7f7      	b.n	8005584 <memmove+0x24>

08005594 <_free_r>:
 8005594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005596:	2900      	cmp	r1, #0
 8005598:	d048      	beq.n	800562c <_free_r+0x98>
 800559a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800559e:	9001      	str	r0, [sp, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f1a1 0404 	sub.w	r4, r1, #4
 80055a6:	bfb8      	it	lt
 80055a8:	18e4      	addlt	r4, r4, r3
 80055aa:	f000 f8d3 	bl	8005754 <__malloc_lock>
 80055ae:	4a20      	ldr	r2, [pc, #128]	; (8005630 <_free_r+0x9c>)
 80055b0:	9801      	ldr	r0, [sp, #4]
 80055b2:	6813      	ldr	r3, [r2, #0]
 80055b4:	4615      	mov	r5, r2
 80055b6:	b933      	cbnz	r3, 80055c6 <_free_r+0x32>
 80055b8:	6063      	str	r3, [r4, #4]
 80055ba:	6014      	str	r4, [r2, #0]
 80055bc:	b003      	add	sp, #12
 80055be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055c2:	f000 b8cd 	b.w	8005760 <__malloc_unlock>
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	d90b      	bls.n	80055e2 <_free_r+0x4e>
 80055ca:	6821      	ldr	r1, [r4, #0]
 80055cc:	1862      	adds	r2, r4, r1
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bf04      	itt	eq
 80055d2:	681a      	ldreq	r2, [r3, #0]
 80055d4:	685b      	ldreq	r3, [r3, #4]
 80055d6:	6063      	str	r3, [r4, #4]
 80055d8:	bf04      	itt	eq
 80055da:	1852      	addeq	r2, r2, r1
 80055dc:	6022      	streq	r2, [r4, #0]
 80055de:	602c      	str	r4, [r5, #0]
 80055e0:	e7ec      	b.n	80055bc <_free_r+0x28>
 80055e2:	461a      	mov	r2, r3
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b10b      	cbz	r3, 80055ec <_free_r+0x58>
 80055e8:	42a3      	cmp	r3, r4
 80055ea:	d9fa      	bls.n	80055e2 <_free_r+0x4e>
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	1855      	adds	r5, r2, r1
 80055f0:	42a5      	cmp	r5, r4
 80055f2:	d10b      	bne.n	800560c <_free_r+0x78>
 80055f4:	6824      	ldr	r4, [r4, #0]
 80055f6:	4421      	add	r1, r4
 80055f8:	1854      	adds	r4, r2, r1
 80055fa:	42a3      	cmp	r3, r4
 80055fc:	6011      	str	r1, [r2, #0]
 80055fe:	d1dd      	bne.n	80055bc <_free_r+0x28>
 8005600:	681c      	ldr	r4, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	6053      	str	r3, [r2, #4]
 8005606:	4421      	add	r1, r4
 8005608:	6011      	str	r1, [r2, #0]
 800560a:	e7d7      	b.n	80055bc <_free_r+0x28>
 800560c:	d902      	bls.n	8005614 <_free_r+0x80>
 800560e:	230c      	movs	r3, #12
 8005610:	6003      	str	r3, [r0, #0]
 8005612:	e7d3      	b.n	80055bc <_free_r+0x28>
 8005614:	6825      	ldr	r5, [r4, #0]
 8005616:	1961      	adds	r1, r4, r5
 8005618:	428b      	cmp	r3, r1
 800561a:	bf04      	itt	eq
 800561c:	6819      	ldreq	r1, [r3, #0]
 800561e:	685b      	ldreq	r3, [r3, #4]
 8005620:	6063      	str	r3, [r4, #4]
 8005622:	bf04      	itt	eq
 8005624:	1949      	addeq	r1, r1, r5
 8005626:	6021      	streq	r1, [r4, #0]
 8005628:	6054      	str	r4, [r2, #4]
 800562a:	e7c7      	b.n	80055bc <_free_r+0x28>
 800562c:	b003      	add	sp, #12
 800562e:	bd30      	pop	{r4, r5, pc}
 8005630:	2000009c 	.word	0x2000009c

08005634 <_malloc_r>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	1ccd      	adds	r5, r1, #3
 8005638:	f025 0503 	bic.w	r5, r5, #3
 800563c:	3508      	adds	r5, #8
 800563e:	2d0c      	cmp	r5, #12
 8005640:	bf38      	it	cc
 8005642:	250c      	movcc	r5, #12
 8005644:	2d00      	cmp	r5, #0
 8005646:	4606      	mov	r6, r0
 8005648:	db01      	blt.n	800564e <_malloc_r+0x1a>
 800564a:	42a9      	cmp	r1, r5
 800564c:	d903      	bls.n	8005656 <_malloc_r+0x22>
 800564e:	230c      	movs	r3, #12
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	2000      	movs	r0, #0
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005656:	f000 f87d 	bl	8005754 <__malloc_lock>
 800565a:	4921      	ldr	r1, [pc, #132]	; (80056e0 <_malloc_r+0xac>)
 800565c:	680a      	ldr	r2, [r1, #0]
 800565e:	4614      	mov	r4, r2
 8005660:	b99c      	cbnz	r4, 800568a <_malloc_r+0x56>
 8005662:	4f20      	ldr	r7, [pc, #128]	; (80056e4 <_malloc_r+0xb0>)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	b923      	cbnz	r3, 8005672 <_malloc_r+0x3e>
 8005668:	4621      	mov	r1, r4
 800566a:	4630      	mov	r0, r6
 800566c:	f000 f862 	bl	8005734 <_sbrk_r>
 8005670:	6038      	str	r0, [r7, #0]
 8005672:	4629      	mov	r1, r5
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f85d 	bl	8005734 <_sbrk_r>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d123      	bne.n	80056c6 <_malloc_r+0x92>
 800567e:	230c      	movs	r3, #12
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	4630      	mov	r0, r6
 8005684:	f000 f86c 	bl	8005760 <__malloc_unlock>
 8005688:	e7e3      	b.n	8005652 <_malloc_r+0x1e>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	1b5b      	subs	r3, r3, r5
 800568e:	d417      	bmi.n	80056c0 <_malloc_r+0x8c>
 8005690:	2b0b      	cmp	r3, #11
 8005692:	d903      	bls.n	800569c <_malloc_r+0x68>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	441c      	add	r4, r3
 8005698:	6025      	str	r5, [r4, #0]
 800569a:	e004      	b.n	80056a6 <_malloc_r+0x72>
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	42a2      	cmp	r2, r4
 80056a0:	bf0c      	ite	eq
 80056a2:	600b      	streq	r3, [r1, #0]
 80056a4:	6053      	strne	r3, [r2, #4]
 80056a6:	4630      	mov	r0, r6
 80056a8:	f000 f85a 	bl	8005760 <__malloc_unlock>
 80056ac:	f104 000b 	add.w	r0, r4, #11
 80056b0:	1d23      	adds	r3, r4, #4
 80056b2:	f020 0007 	bic.w	r0, r0, #7
 80056b6:	1ac2      	subs	r2, r0, r3
 80056b8:	d0cc      	beq.n	8005654 <_malloc_r+0x20>
 80056ba:	1a1b      	subs	r3, r3, r0
 80056bc:	50a3      	str	r3, [r4, r2]
 80056be:	e7c9      	b.n	8005654 <_malloc_r+0x20>
 80056c0:	4622      	mov	r2, r4
 80056c2:	6864      	ldr	r4, [r4, #4]
 80056c4:	e7cc      	b.n	8005660 <_malloc_r+0x2c>
 80056c6:	1cc4      	adds	r4, r0, #3
 80056c8:	f024 0403 	bic.w	r4, r4, #3
 80056cc:	42a0      	cmp	r0, r4
 80056ce:	d0e3      	beq.n	8005698 <_malloc_r+0x64>
 80056d0:	1a21      	subs	r1, r4, r0
 80056d2:	4630      	mov	r0, r6
 80056d4:	f000 f82e 	bl	8005734 <_sbrk_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	d1dd      	bne.n	8005698 <_malloc_r+0x64>
 80056dc:	e7cf      	b.n	800567e <_malloc_r+0x4a>
 80056de:	bf00      	nop
 80056e0:	2000009c 	.word	0x2000009c
 80056e4:	200000a0 	.word	0x200000a0

080056e8 <_realloc_r>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	4607      	mov	r7, r0
 80056ec:	4614      	mov	r4, r2
 80056ee:	460e      	mov	r6, r1
 80056f0:	b921      	cbnz	r1, 80056fc <_realloc_r+0x14>
 80056f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056f6:	4611      	mov	r1, r2
 80056f8:	f7ff bf9c 	b.w	8005634 <_malloc_r>
 80056fc:	b922      	cbnz	r2, 8005708 <_realloc_r+0x20>
 80056fe:	f7ff ff49 	bl	8005594 <_free_r>
 8005702:	4625      	mov	r5, r4
 8005704:	4628      	mov	r0, r5
 8005706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005708:	f000 f830 	bl	800576c <_malloc_usable_size_r>
 800570c:	42a0      	cmp	r0, r4
 800570e:	d20f      	bcs.n	8005730 <_realloc_r+0x48>
 8005710:	4621      	mov	r1, r4
 8005712:	4638      	mov	r0, r7
 8005714:	f7ff ff8e 	bl	8005634 <_malloc_r>
 8005718:	4605      	mov	r5, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	d0f2      	beq.n	8005704 <_realloc_r+0x1c>
 800571e:	4631      	mov	r1, r6
 8005720:	4622      	mov	r2, r4
 8005722:	f7ff ff0f 	bl	8005544 <memcpy>
 8005726:	4631      	mov	r1, r6
 8005728:	4638      	mov	r0, r7
 800572a:	f7ff ff33 	bl	8005594 <_free_r>
 800572e:	e7e9      	b.n	8005704 <_realloc_r+0x1c>
 8005730:	4635      	mov	r5, r6
 8005732:	e7e7      	b.n	8005704 <_realloc_r+0x1c>

08005734 <_sbrk_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d06      	ldr	r5, [pc, #24]	; (8005750 <_sbrk_r+0x1c>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fb fc2a 	bl	8000f98 <_sbrk>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_sbrk_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_sbrk_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	2000065c 	.word	0x2000065c

08005754 <__malloc_lock>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__malloc_lock+0x8>)
 8005756:	f000 b811 	b.w	800577c <__retarget_lock_acquire_recursive>
 800575a:	bf00      	nop
 800575c:	20000664 	.word	0x20000664

08005760 <__malloc_unlock>:
 8005760:	4801      	ldr	r0, [pc, #4]	; (8005768 <__malloc_unlock+0x8>)
 8005762:	f000 b80c 	b.w	800577e <__retarget_lock_release_recursive>
 8005766:	bf00      	nop
 8005768:	20000664 	.word	0x20000664

0800576c <_malloc_usable_size_r>:
 800576c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005770:	1f18      	subs	r0, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfbc      	itt	lt
 8005776:	580b      	ldrlt	r3, [r1, r0]
 8005778:	18c0      	addlt	r0, r0, r3
 800577a:	4770      	bx	lr

0800577c <__retarget_lock_acquire_recursive>:
 800577c:	4770      	bx	lr

0800577e <__retarget_lock_release_recursive>:
 800577e:	4770      	bx	lr

08005780 <_init>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr

0800578c <_fini>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr
