
MarioC10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008234  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b4  080084b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084bc  080084bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080084c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000070  08008534  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08008534  00020938  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc04  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003460  00000000  00000000  0003dca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00041108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00042848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad68  00000000  00000000  00043e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2ef  00000000  00000000  0006eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b32b  00000000  00000000  0008ae97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001961c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006808  00000000  00000000  00196218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800841c 	.word	0x0800841c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800841c 	.word	0x0800841c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <TransmitCAN>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef TransmitCAN(uint8_t id, uint8_t* buf, uint8_t size)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef msg;
	msg.StdId = id;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	60fb      	str	r3, [r7, #12]
	msg.IDE = CAN_ID_STD;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
	msg.RTR = CAN_RTR_DATA;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
	msg.DLC = size;
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	61fb      	str	r3, [r7, #28]
	msg.TransmitGlobalTime = DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 3020 	strb.w	r3, [r7, #32]

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &msg, buf, &mb);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	f107 010c 	add.w	r1, r7, #12
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <TransmitCAN+0x60>)
 800060a:	f001 ff17 	bl	800243c <HAL_CAN_AddTxMessage>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK)
 8000614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <TransmitCAN+0x4a>
		return ret;
 800061c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000620:	e006      	b.n	8000630 <TransmitCAN+0x58>

	// Update the CAN led
	// ToggleLed(LED_CAN);
	HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <TransmitCAN+0x64>)
 8000628:	f002 febd 	bl	80033a6 <HAL_GPIO_TogglePin>
	return ret;
 800062c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000630:	4618      	mov	r0, r3
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200008d4 	.word	0x200008d4
 800063c:	40021400 	.word	0x40021400

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0c8      	sub	sp, #288	; 0x120
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	index_buff = 0;
 8000646:	4b53      	ldr	r3, [pc, #332]	; (8000794 <main+0x154>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
	ws_receive_flag = 0;
 800064c:	4b52      	ldr	r3, [pc, #328]	; (8000798 <main+0x158>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	timer3_flag = 0;
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <main+0x15c>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
	wheel_rpm_speed = 0;
 8000658:	4b51      	ldr	r3, [pc, #324]	; (80007a0 <main+0x160>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
	rotor_rpm_speed = 0;
 800065e:	4b51      	ldr	r3, [pc, #324]	; (80007a4 <main+0x164>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]

	can1_recv_flag = 0;
 8000664:	4b50      	ldr	r3, [pc, #320]	; (80007a8 <main+0x168>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f001 f9a6 	bl	80019ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f8b1 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 fbc9 	bl	8000e08 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000676:	f000 fb99 	bl	8000dac <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800067a:	f000 f9bf 	bl	80009fc <MX_CAN1_Init>
  MX_ADC1_Init();
 800067e:	f000 f919 	bl	80008b4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000682:	f000 f969 	bl	8000958 <MX_ADC3_Init>
  MX_CAN2_Init();
 8000686:	f000 fa1b 	bl	8000ac0 <MX_CAN2_Init>
  MX_SPI1_Init();
 800068a:	f000 fa4d 	bl	8000b28 <MX_SPI1_Init>
  MX_USART2_Init();
 800068e:	f000 fb01 	bl	8000c94 <MX_USART2_Init>
  MX_USART6_UART_Init();
 8000692:	f000 fb5b 	bl	8000d4c <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8000696:	f000 fb29 	bl	8000cec <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800069a:	f000 fa83 	bl	8000ba4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, sizeof(aRxBuffer));
 800069e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a2:	4942      	ldr	r1, [pc, #264]	; (80007ac <main+0x16c>)
 80006a4:	4842      	ldr	r0, [pc, #264]	; (80007b0 <main+0x170>)
 80006a6:	f005 fad2 	bl	8005c4e <HAL_UART_Receive_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(10); // Execute main loop every 10 ms
 80006aa:	200a      	movs	r0, #10
 80006ac:	f001 f9e2 	bl	8001a74 <HAL_Delay>

	  // Check pushbuttons status
	  // uint8_t pb1_val = HAL_GPIO_ReadPin();

	  if(timer3_flag == 1)
 80006b0:	4b3a      	ldr	r3, [pc, #232]	; (800079c <main+0x15c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d134      	bne.n	8000722 <main+0xe2>
	  {
		  timer3_flag = 0;
 80006b8:	4b38      	ldr	r3, [pc, #224]	; (800079c <main+0x15c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]

		  // Send CAN frame
		  static uint8_t x = 0;
		  uint8_t data[4] = { 0,1,2,x++ };
 80006be:	2300      	movs	r3, #0
 80006c0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 80006c4:	2301      	movs	r3, #1
 80006c6:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 80006ca:	2302      	movs	r3, #2
 80006cc:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 80006d0:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <main+0x174>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	b2d1      	uxtb	r1, r2
 80006d8:	4a36      	ldr	r2, [pc, #216]	; (80007b4 <main+0x174>)
 80006da:	7011      	strb	r1, [r2, #0]
 80006dc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  HAL_StatusTypeDef can_success = TransmitCAN(0xAA, data, 4);
 80006e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80006e4:	2204      	movs	r2, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	20aa      	movs	r0, #170	; 0xaa
 80006ea:	f7ff ff75 	bl	80005d8 <TransmitCAN>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		  if (can_success != HAL_OK)
 80006f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d005      	beq.n	8000708 <main+0xc8>
		  {
			  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2108      	movs	r1, #8
 8000700:	482d      	ldr	r0, [pc, #180]	; (80007b8 <main+0x178>)
 8000702:	f002 fe37 	bl	8003374 <HAL_GPIO_WritePin>
 8000706:	e004      	b.n	8000712 <main+0xd2>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2108      	movs	r1, #8
 800070c:	482a      	ldr	r0, [pc, #168]	; (80007b8 <main+0x178>)
 800070e:	f002 fe31 	bl	8003374 <HAL_GPIO_WritePin>
		  }

		  // Blink led
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);		// Led 1 on nucleo
 8000712:	2101      	movs	r1, #1
 8000714:	4829      	ldr	r0, [pc, #164]	; (80007bc <main+0x17c>)
 8000716:	f002 fe46 	bl	80033a6 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800071a:	2104      	movs	r1, #4
 800071c:	4828      	ldr	r0, [pc, #160]	; (80007c0 <main+0x180>)
 800071e:	f002 fe42 	bl	80033a6 <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart3, message, sizeof(message), 10);
		  */
	  }

	  // Check for can messages
	  if (can1_recv_flag)
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <main+0x168>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0bf      	beq.n	80006aa <main+0x6a>
	  {
		  can1_recv_flag = 0;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <main+0x168>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]

		  // Blink LED CANA led
		  HAL_GPIO_TogglePin(LED_CANA_GPIO_Port, LED_CANA_Pin);
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	4822      	ldr	r0, [pc, #136]	; (80007c0 <main+0x180>)
 8000736:	f002 fe36 	bl	80033a6 <HAL_GPIO_TogglePin>

		  uint32_t id = pRxHeader.StdId;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <main+0x184>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		  uint32_t size = pRxHeader.DLC;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <main+0x184>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		  uint8_t data = can_recv_buffer[0];
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <main+0x188>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

		  uint8_t message[256] = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	3304      	adds	r3, #4
 800075a:	22fc      	movs	r2, #252	; 0xfc
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 fa12 	bl	8007b88 <memset>
		  snprintf((char*)message, sizeof(message), "Received CAN frame  ID = %d,  size = %d,  data = %d", (int)id, (int)size, (int)data);
 8000764:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800076c:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8000770:	1d38      	adds	r0, r7, #4
 8000772:	9201      	str	r2, [sp, #4]
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	460b      	mov	r3, r1
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <main+0x18c>)
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	f007 fa0b 	bl	8007b98 <sniprintf>
		  HAL_UART_Transmit(&huart3, message, sizeof(message), 10);
 8000782:	1d39      	adds	r1, r7, #4
 8000784:	230a      	movs	r3, #10
 8000786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078a:	4811      	ldr	r0, [pc, #68]	; (80007d0 <main+0x190>)
 800078c:	f005 f9cc 	bl	8005b28 <HAL_UART_Transmit>
	  HAL_Delay(10); // Execute main loop every 10 ms
 8000790:	e78b      	b.n	80006aa <main+0x6a>
 8000792:	bf00      	nop
 8000794:	200000a0 	.word	0x200000a0
 8000798:	20000919 	.word	0x20000919
 800079c:	200000a1 	.word	0x200000a1
 80007a0:	200005b8 	.word	0x200005b8
 80007a4:	2000067c 	.word	0x2000067c
 80007a8:	20000918 	.word	0x20000918
 80007ac:	20000754 	.word	0x20000754
 80007b0:	200006d0 	.word	0x200006d0
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40021400 	.word	0x40021400
 80007c4:	200008b8 	.word	0x200008b8
 80007c8:	200005c0 	.word	0x200005c0
 80007cc:	08008434 	.word	0x08008434
 80007d0:	200000e4 	.word	0x200000e4

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2234      	movs	r2, #52	; 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 f9d0 	bl	8007b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f8:	f002 ff5c 	bl	80036b4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <SystemClock_Config+0xd8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <SystemClock_Config+0xd8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xd8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <SystemClock_Config+0xdc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <SystemClock_Config+0xdc>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xdc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000834:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000838:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800084c:	2304      	movs	r3, #4
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4618      	mov	r0, r3
 800085e:	f002 ff89 	bl	8003774 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000868:	f000 fc16 	bl	8001098 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800086c:	f002 ff32 	bl	80036d4 <HAL_PWREx_EnableOverDrive>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000876:	f000 fc0f 	bl	8001098 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2302      	movs	r3, #2
 8000880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2101      	movs	r1, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fa1b 	bl	8003cd0 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008a0:	f000 fbfa 	bl	8001098 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_ADC1_Init+0x98>)
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_ADC1_Init+0x9c>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_ADC1_Init+0x98>)
 80008ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_ADC1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_ADC1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_ADC1_Init+0x98>)
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_ADC1_Init+0xa0>)
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_ADC1_Init+0x98>)
 8000902:	2201      	movs	r2, #1
 8000904:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_ADC1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC1_Init+0x98>)
 8000910:	2201      	movs	r2, #1
 8000912:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_ADC1_Init+0x98>)
 8000916:	f001 f8d1 	bl	8001abc <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000920:	f000 fbba 	bl	8001098 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000924:	2303      	movs	r3, #3
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2301      	movs	r3, #1
 800092a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_ADC1_Init+0x98>)
 8000936:	f001 f905 	bl	8001b44 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000940:	f000 fbaa 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200005c4 	.word	0x200005c4
 8000950:	40012000 	.word	0x40012000
 8000954:	0f000001 	.word	0x0f000001

08000958 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_ADC3_Init+0x98>)
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <MX_ADC3_Init+0x9c>)
 800096e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_ADC3_Init+0x98>)
 8000972:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000976:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_ADC3_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_ADC3_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_ADC3_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_ADC3_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_ADC3_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_ADC3_Init+0x98>)
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <MX_ADC3_Init+0xa0>)
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_ADC3_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_ADC3_Init+0x98>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_ADC3_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_ADC3_Init+0x98>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_ADC3_Init+0x98>)
 80009ba:	f001 f87f 	bl	8001abc <HAL_ADC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80009c4:	f000 fb68 	bl	8001098 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009c8:	230a      	movs	r3, #10
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_ADC3_Init+0x98>)
 80009da:	f001 f8b3 	bl	8001b44 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009e4:	f000 fb58 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000634 	.word	0x20000634
 80009f4:	40012200 	.word	0x40012200
 80009f8:	0f000001 	.word	0x0f000001

080009fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a04:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <MX_CAN1_Init+0xc0>)
 8000a06:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a0a:	2215      	movs	r2, #21
 8000a0c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a1c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000a20:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a24:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a28:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a50:	f001 fac8 	bl	8001fe4 <HAL_CAN_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a5a:	f000 fb1d 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef sf;
	sf.FilterMaskIdHigh = 0x0000;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
	sf.FilterMaskIdLow = 0x0000;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
	sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
	sf.FilterBank = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
	sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
	sf.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
	sf.FilterActivation = CAN_FILTER_ENABLE;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a80:	f001 fbac 	bl	80021dc <HAL_CAN_ConfigFilter>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_CAN1_Init+0x92>
	{
	  Error_Handler();
 8000a8a:	f000 fb05 	bl	8001098 <Error_Handler>
	}
	//if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
	//{
	//	  Error_Handler();
	//}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000a90:	f001 fc90 	bl	80023b4 <HAL_CAN_Start>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_CAN1_Init+0xa2>
	{
		Error_Handler();
 8000a9a:	f000 fafd 	bl	8001098 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_CAN1_Init+0xbc>)
 8000aa2:	f001 feb8 	bl	8002816 <HAL_CAN_ActivateNotification>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_CAN1_Init+0xb4>
	{
		Error_Handler();
 8000aac:	f000 faf4 	bl	8001098 <Error_Handler>
	}
  /* USER CODE END CAN1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200008d4 	.word	0x200008d4
 8000abc:	40006400 	.word	0x40006400

08000ac0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <MX_CAN2_Init+0x64>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000acc:	2210      	movs	r2, #16
 8000ace:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_CAN2_Init+0x60>)
 8000b0e:	f001 fa69 	bl	8001fe4 <HAL_CAN_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 fabe 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000060c 	.word	0x2000060c
 8000b24:	40006800 	.word	0x40006800

08000b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_SPI1_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b88:	f003 fecc 	bl	8004924 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 fa81 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000854 	.word	0x20000854
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000bd8:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <MX_TIM3_Init+0xec>)
 8000bda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000bde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000be2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000bec:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000bf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bfe:	4823      	ldr	r0, [pc, #140]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000c00:	f003 ff3b 	bl	8004a7a <HAL_TIM_Base_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 fa45 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481c      	ldr	r0, [pc, #112]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000c1c:	f004 f9f6 	bl	800500c <HAL_TIM_ConfigClockSource>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c26:	f000 fa37 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000c2a:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000c2c:	f003 fff4 	bl	8004c18 <HAL_TIM_OC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c36:	f000 fa2f 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4810      	ldr	r0, [pc, #64]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000c4a:	f004 fe73 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c54:	f000 fa20 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000c70:	f004 f952 	bl	8004f18 <HAL_TIM_OC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c7a:	f000 fa0d 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <MX_TIM3_Init+0xe8>)
 8000c80:	f003 ff52 	bl	8004b28 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3738      	adds	r7, #56	; 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000056c 	.word	0x2000056c
 8000c90:	40000400 	.word	0x40000400

08000c94 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000c9a:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <MX_USART2_Init+0x54>)
 8000c9c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_USART2_Init+0x50>)
 8000cd2:	f006 f9fa 	bl	80070ca <HAL_USART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000cdc:	f000 f9dc 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000680 	.word	0x20000680
 8000ce8:	40004400 	.word	0x40004400

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_USART3_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d30:	f004 feac 	bl	8005a8c <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 f9ad 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000e4 	.word	0x200000e4
 8000d48:	40004800 	.word	0x40004800

08000d4c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <MX_USART6_UART_Init+0x5c>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4800;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d58:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000d5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d90:	f004 fe7c 	bl	8005a8c <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f000 f97d 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200006d0 	.word	0x200006d0
 8000da8:	40011400 	.word	0x40011400

08000dac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dba:	2206      	movs	r2, #6
 8000dbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df0:	f002 fb17 	bl	8003422 <HAL_PCD_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f94d 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000168 	.word	0x20000168

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b96      	ldr	r3, [pc, #600]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a95      	ldr	r2, [pc, #596]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b93      	ldr	r3, [pc, #588]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b90      	ldr	r3, [pc, #576]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a8f      	ldr	r2, [pc, #572]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b8d      	ldr	r3, [pc, #564]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b8a      	ldr	r3, [pc, #552]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a89      	ldr	r2, [pc, #548]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e54:	f043 0320 	orr.w	r3, r3, #32
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b87      	ldr	r3, [pc, #540]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0320 	and.w	r3, r3, #32
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e66:	4b84      	ldr	r3, [pc, #528]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a83      	ldr	r2, [pc, #524]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b81      	ldr	r3, [pc, #516]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b7e      	ldr	r3, [pc, #504]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a7d      	ldr	r2, [pc, #500]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b78      	ldr	r3, [pc, #480]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a77      	ldr	r2, [pc, #476]	; (8001078 <MX_GPIO_Init+0x270>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b75      	ldr	r3, [pc, #468]	; (8001078 <MX_GPIO_Init+0x270>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eae:	4b72      	ldr	r3, [pc, #456]	; (8001078 <MX_GPIO_Init+0x270>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a71      	ldr	r2, [pc, #452]	; (8001078 <MX_GPIO_Init+0x270>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b6f      	ldr	r3, [pc, #444]	; (8001078 <MX_GPIO_Init+0x270>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	4b6c      	ldr	r3, [pc, #432]	; (8001078 <MX_GPIO_Init+0x270>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a6b      	ldr	r2, [pc, #428]	; (8001078 <MX_GPIO_Init+0x270>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b69      	ldr	r3, [pc, #420]	; (8001078 <MX_GPIO_Init+0x270>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LORA_RST_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210c      	movs	r1, #12
 8000ee2:	4866      	ldr	r0, [pc, #408]	; (800107c <MX_GPIO_Init+0x274>)
 8000ee4:	f002 fa46 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED_WARNING_Pin|LED_CANB_Pin|LED_CANA_Pin
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f248 3184 	movw	r1, #33668	; 0x8384
 8000eee:	4864      	ldr	r0, [pc, #400]	; (8001080 <MX_GPIO_Init+0x278>)
 8000ef0:	f002 fa40 	bl	8003374 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MAST_CLOCK_Pin|PITCH_CLOCK_Pin|LD3_Pin
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f246 0185 	movw	r1, #24709	; 0x6085
 8000efa:	4862      	ldr	r0, [pc, #392]	; (8001084 <MX_GPIO_Init+0x27c>)
 8000efc:	f002 fa3a 	bl	8003374 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2143      	movs	r1, #67	; 0x43
 8000f04:	4860      	ldr	r0, [pc, #384]	; (8001088 <MX_GPIO_Init+0x280>)
 8000f06:	f002 fa35 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_RST_Pin LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LED_ERROR_Pin;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4856      	ldr	r0, [pc, #344]	; (800107c <MX_GPIO_Init+0x274>)
 8000f22:	f002 f87b 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000f26:	2310      	movs	r3, #16
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	4850      	ldr	r0, [pc, #320]	; (800107c <MX_GPIO_Init+0x274>)
 8000f3a:	f002 f86f 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED_WARNING_Pin LED_CANB_Pin LED_CANA_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED_WARNING_Pin|LED_CANB_Pin|LED_CANA_Pin
 8000f3e:	f248 3384 	movw	r3, #33668	; 0x8384
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	4619      	mov	r1, r3
 8000f56:	484a      	ldr	r0, [pc, #296]	; (8001080 <MX_GPIO_Init+0x278>)
 8000f58:	f002 f860 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6c:	230b      	movs	r3, #11
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4845      	ldr	r0, [pc, #276]	; (800108c <MX_GPIO_Init+0x284>)
 8000f78:	f002 f850 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8c:	230b      	movs	r3, #11
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	483e      	ldr	r0, [pc, #248]	; (8001090 <MX_GPIO_Init+0x288>)
 8000f98:	f002 f840 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MAST_CLOCK_Pin PITCH_CLOCK_Pin LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MAST_CLOCK_Pin|PITCH_CLOCK_Pin|LD3_Pin
 8000f9c:	f246 0385 	movw	r3, #24709	; 0x6085
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4833      	ldr	r0, [pc, #204]	; (8001084 <MX_GPIO_Init+0x27c>)
 8000fb6:	f002 f831 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000fba:	2343      	movs	r3, #67	; 0x43
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	482d      	ldr	r0, [pc, #180]	; (8001088 <MX_GPIO_Init+0x280>)
 8000fd2:	f002 f823 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : WHEEL_RPM_Pin ROTOR_RPM_Pin */
  GPIO_InitStruct.Pin = WHEEL_RPM_Pin|ROTOR_RPM_Pin;
 8000fd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4823      	ldr	r0, [pc, #140]	; (800107c <MX_GPIO_Init+0x274>)
 8000fee:	f002 f815 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_INT_Pin MAST_DATA_Pin */
  GPIO_InitStruct.Pin = LORA_INT_Pin|MAST_DATA_Pin;
 8000ff2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4823      	ldr	r0, [pc, #140]	; (8001094 <MX_GPIO_Init+0x28c>)
 8001008:	f002 f808 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 LIMIT1_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LIMIT1_Pin|USB_OverCurrent_Pin;
 800100c:	238c      	movs	r3, #140	; 0x8c
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <MX_GPIO_Init+0x280>)
 8001020:	f001 fffc 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001024:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4811      	ldr	r0, [pc, #68]	; (8001088 <MX_GPIO_Init+0x280>)
 8001042:	f001 ffeb 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : PITCH_DATA_Pin */
  GPIO_InitStruct.Pin = PITCH_DATA_Pin;
 8001046:	2310      	movs	r3, #16
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PITCH_DATA_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <MX_GPIO_Init+0x27c>)
 800105a:	f001 ffdf 	bl	800301c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2028      	movs	r0, #40	; 0x28
 8001064:	f001 ff11 	bl	8002e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f001 ff2a 	bl	8002ec2 <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3738      	adds	r7, #56	; 0x38
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40020400 	.word	0x40020400
 8001088:	40021800 	.word	0x40021800
 800108c:	40020800 	.word	0x40020800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020c00 	.word	0x40020c00

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x44>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_MspInit+0x44>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_MspInit+0x44>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_MspInit+0x44>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_MspInit+0x44>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_MspInit+0x44>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <HAL_ADC_MspInit+0xc8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d124      	bne.n	8001158 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = LOADCELL_ADC_Pin;
 800113e:	2308      	movs	r3, #8
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LOADCELL_ADC_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	481a      	ldr	r0, [pc, #104]	; (80011bc <HAL_ADC_MspInit+0xd0>)
 8001152:	f001 ff63 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001156:	e028      	b.n	80011aa <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <HAL_ADC_MspInit+0xd4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d123      	bne.n	80011aa <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TORQUE_ADC_Pin;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TORQUE_ADC_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <HAL_ADC_MspInit+0xd8>)
 80011a6:	f001 ff39 	bl	800301c <HAL_GPIO_Init>
}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012000 	.word	0x40012000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40012200 	.word	0x40012200
 80011c4:	40020800 	.word	0x40020800

080011c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a47      	ldr	r2, [pc, #284]	; (8001304 <HAL_CAN_MspInit+0x13c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d139      	bne.n	800125e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_CAN_MspInit+0x140>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a45      	ldr	r2, [pc, #276]	; (8001308 <HAL_CAN_MspInit+0x140>)
 80011f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011f4:	4b44      	ldr	r3, [pc, #272]	; (8001308 <HAL_CAN_MspInit+0x140>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d10b      	bne.n	8001214 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <HAL_CAN_MspInit+0x144>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a42      	ldr	r2, [pc, #264]	; (800130c <HAL_CAN_MspInit+0x144>)
 8001202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_CAN_MspInit+0x144>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001210:	623b      	str	r3, [r7, #32]
 8001212:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b3d      	ldr	r3, [pc, #244]	; (800130c <HAL_CAN_MspInit+0x144>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a3c      	ldr	r2, [pc, #240]	; (800130c <HAL_CAN_MspInit+0x144>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_CAN_MspInit+0x144>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800122c:	2303      	movs	r3, #3
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800123c:	2309      	movs	r3, #9
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	4832      	ldr	r0, [pc, #200]	; (8001310 <HAL_CAN_MspInit+0x148>)
 8001248:	f001 fee8 	bl	800301c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2014      	movs	r0, #20
 8001252:	f001 fe1a 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001256:	2014      	movs	r0, #20
 8001258:	f001 fe33 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800125c:	e04d      	b.n	80012fa <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a2c      	ldr	r2, [pc, #176]	; (8001314 <HAL_CAN_MspInit+0x14c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d148      	bne.n	80012fa <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_CAN_MspInit+0x144>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <HAL_CAN_MspInit+0x144>)
 800126e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_CAN_MspInit+0x144>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_CAN_MspInit+0x144>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_CAN_MspInit+0x144>)
 8001286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_CAN_MspInit+0x144>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_CAN_MspInit+0x140>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <HAL_CAN_MspInit+0x140>)
 80012a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_CAN_MspInit+0x140>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10b      	bne.n	80012c2 <HAL_CAN_MspInit+0xfa>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_CAN_MspInit+0x144>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_CAN_MspInit+0x144>)
 80012b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_CAN_MspInit+0x144>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_CAN_MspInit+0x144>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_CAN_MspInit+0x144>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_CAN_MspInit+0x144>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012da:	2360      	movs	r3, #96	; 0x60
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80012ea:	2309      	movs	r3, #9
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <HAL_CAN_MspInit+0x150>)
 80012f6:	f001 fe91 	bl	800301c <HAL_GPIO_Init>
}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	; 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40006400 	.word	0x40006400
 8001308:	20000090 	.word	0x20000090
 800130c:	40023800 	.word	0x40023800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40006800 	.word	0x40006800
 8001318:	40020400 	.word	0x40020400

0800131c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_SPI_MspInit+0x7c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d127      	bne.n	800138e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_SPI_MspInit+0x80>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <HAL_SPI_MspInit+0x80>)
 8001344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_SPI_MspInit+0x80>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_SPI_MspInit+0x80>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_SPI_MspInit+0x80>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_SPI_MspInit+0x80>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800136e:	23e0      	movs	r3, #224	; 0xe0
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137e:	2305      	movs	r3, #5
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_SPI_MspInit+0x84>)
 800138a:	f001 fe47 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40013000 	.word	0x40013000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d113      	bne.n	80013de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_TIM_Base_MspInit+0x48>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_TIM_Base_MspInit+0x48>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x48>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201d      	movs	r0, #29
 80013d4:	f001 fd59 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013d8:	201d      	movs	r0, #29
 80013da:	f001 fd72 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0ae      	sub	sp, #184	; 0xb8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2290      	movs	r2, #144	; 0x90
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f006 fbb9 	bl	8007b88 <memset>
  if(husart->Instance==USART2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a31      	ldr	r2, [pc, #196]	; (80014e0 <HAL_USART_MspInit+0xf0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d15b      	bne.n	80014d8 <HAL_USART_MspInit+0xe8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001424:	2300      	movs	r3, #0
 8001426:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fe51 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8001438:	f7ff fe2e 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 8001442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_USART_MspInit+0xf4>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001484:	2310      	movs	r3, #16
 8001486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149c:	2307      	movs	r3, #7
 800149e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a6:	4619      	mov	r1, r3
 80014a8:	480f      	ldr	r0, [pc, #60]	; (80014e8 <HAL_USART_MspInit+0xf8>)
 80014aa:	f001 fdb7 	bl	800301c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014ae:	2378      	movs	r3, #120	; 0x78
 80014b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c6:	2307      	movs	r3, #7
 80014c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_USART_MspInit+0xfc>)
 80014d4:	f001 fda2 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	37b8      	adds	r7, #184	; 0xb8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020c00 	.word	0x40020c00

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0b0      	sub	sp, #192	; 0xc0
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2290      	movs	r2, #144	; 0x90
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f006 fb39 	bl	8007b88 <memset>
  if(huart->Instance==USART3)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a47      	ldr	r2, [pc, #284]	; (8001638 <HAL_UART_MspInit+0x148>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d13d      	bne.n	800159c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001526:	2300      	movs	r3, #0
 8001528:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fdd0 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800153a:	f7ff fdad 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_UART_MspInit+0x14c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a3e      	ldr	r2, [pc, #248]	; (800163c <HAL_UART_MspInit+0x14c>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b3c      	ldr	r3, [pc, #240]	; (800163c <HAL_UART_MspInit+0x14c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_UART_MspInit+0x14c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a38      	ldr	r2, [pc, #224]	; (800163c <HAL_UART_MspInit+0x14c>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_UART_MspInit+0x14c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800156e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001588:	2307      	movs	r3, #7
 800158a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001592:	4619      	mov	r1, r3
 8001594:	482a      	ldr	r0, [pc, #168]	; (8001640 <HAL_UART_MspInit+0x150>)
 8001596:	f001 fd41 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800159a:	e049      	b.n	8001630 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART6)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a28      	ldr	r2, [pc, #160]	; (8001644 <HAL_UART_MspInit+0x154>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d144      	bne.n	8001630 <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80015a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80015ac:	2300      	movs	r3, #0
 80015ae:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 fd8d 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80015c0:	f7ff fd6a 	bl	8001098 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_UART_MspInit+0x14c>)
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_UART_MspInit+0x14c>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6453      	str	r3, [r2, #68]	; 0x44
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_UART_MspInit+0x14c>)
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_UART_MspInit+0x14c>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_UART_MspInit+0x14c>)
 80015e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0x14c>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80015f4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800160e:	2308      	movs	r3, #8
 8001610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001614:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001618:	4619      	mov	r1, r3
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <HAL_UART_MspInit+0x158>)
 800161c:	f001 fcfe 	bl	800301c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2047      	movs	r0, #71	; 0x47
 8001626:	f001 fc30 	bl	8002e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800162a:	2047      	movs	r0, #71	; 0x47
 800162c:	f001 fc49 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
}
 8001630:	bf00      	nop
 8001632:	37c0      	adds	r7, #192	; 0xc0
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004800 	.word	0x40004800
 800163c:	40023800 	.word	0x40023800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40011400 	.word	0x40011400
 8001648:	40021800 	.word	0x40021800

0800164c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0ae      	sub	sp, #184	; 0xb8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2290      	movs	r2, #144	; 0x90
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f006 fa8b 	bl	8007b88 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167a:	d159      	bne.n	8001730 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800167c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001680:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fd21 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001698:	f7ff fcfe 	bl	8001098 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a25      	ldr	r2, [pc, #148]	; (8001738 <HAL_PCD_MspInit+0xec>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_PCD_MspInit+0xec>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016ce:	230a      	movs	r3, #10
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d8:	4619      	mov	r1, r3
 80016da:	4818      	ldr	r0, [pc, #96]	; (800173c <HAL_PCD_MspInit+0xf0>)
 80016dc:	f001 fc9e 	bl	800301c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4810      	ldr	r0, [pc, #64]	; (800173c <HAL_PCD_MspInit+0xf0>)
 80016fc:	f001 fc8e 	bl	800301c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_PCD_MspInit+0xec>)
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <HAL_PCD_MspInit+0xec>)
 8001706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170a:	6353      	str	r3, [r2, #52]	; 0x34
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6453      	str	r3, [r2, #68]	; 0x44
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_PCD_MspInit+0xec>)
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	37b8      	adds	r7, #184	; 0xb8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f000 f952 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <CAN1_RX0_IRQHandler+0x20>)
 800179a:	f001 f862 	bl	8002862 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  	can1_recv_flag = 1;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <CAN1_RX0_IRQHandler+0x24>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, can_recv_buffer);
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <CAN1_RX0_IRQHandler+0x28>)
 80017a6:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <CAN1_RX0_IRQHandler+0x2c>)
 80017a8:	2100      	movs	r1, #0
 80017aa:	4802      	ldr	r0, [pc, #8]	; (80017b4 <CAN1_RX0_IRQHandler+0x20>)
 80017ac:	f000 ff21 	bl	80025f2 <HAL_CAN_GetRxMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200008d4 	.word	0x200008d4
 80017b8:	20000918 	.word	0x20000918
 80017bc:	200005c0 	.word	0x200005c0
 80017c0:	200008b8 	.word	0x200008b8

080017c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <TIM3_IRQHandler+0x38>)
 80017ca:	f003 fa86 	bl	8004cda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  	timer3_flag = 1;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <TIM3_IRQHandler+0x3c>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]

	wheel_rpm_speed = wheel_rpm_count;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <TIM3_IRQHandler+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <TIM3_IRQHandler+0x44>)
 80017da:	6013      	str	r3, [r2, #0]
	wheel_rpm_count = 0;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <TIM3_IRQHandler+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

	rotor_rpm_speed = rotor_rpm_count;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <TIM3_IRQHandler+0x48>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <TIM3_IRQHandler+0x4c>)
 80017e8:	6013      	str	r3, [r2, #0]
	rotor_rpm_count = 0;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <TIM3_IRQHandler+0x48>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <TIM3_IRQHandler+0x38>)
 80017f2:	f003 fa72 	bl	8004cda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000056c 	.word	0x2000056c
 8001800:	200000a1 	.word	0x200000a1
 8001804:	2000091c 	.word	0x2000091c
 8001808:	200005b8 	.word	0x200005b8
 800180c:	20000920 	.word	0x20000920
 8001810:	2000067c 	.word	0x2000067c

08001814 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <EXTI15_10_IRQHandler+0x44>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <EXTI15_10_IRQHandler+0x1a>
	{
		// Wheel RPM
		++wheel_rpm_count;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <EXTI15_10_IRQHandler+0x48>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <EXTI15_10_IRQHandler+0x48>)
 800182c:	6013      	str	r3, [r2, #0]
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <EXTI15_10_IRQHandler+0x44>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <EXTI15_10_IRQHandler+0x30>
	{
		// Rotor RPM
		++rotor_rpm_count;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <EXTI15_10_IRQHandler+0x4c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <EXTI15_10_IRQHandler+0x4c>)
 8001842:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WHEEL_RPM_Pin);
 8001844:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001848:	f001 fdc8 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROTOR_RPM_Pin);
 800184c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001850:	f001 fdc4 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40013c00 	.word	0x40013c00
 800185c:	2000091c 	.word	0x2000091c
 8001860:	20000920 	.word	0x20000920

08001864 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800186a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <USART6_IRQHandler+0x5c>)
 8001870:	f001 fd99 	bl	80033a6 <HAL_GPIO_TogglePin>

	if ((USART6->ISR & UART_IT_RXNE)) {
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <USART6_IRQHandler+0x60>)
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	f240 5325 	movw	r3, #1317	; 0x525
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <USART6_IRQHandler+0x4a>
		uint8_t rbyte = huart6.Instance->RDR;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <USART6_IRQHandler+0x64>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	71fb      	strb	r3, [r7, #7]
		rx_buff[index_buff] = rbyte;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <USART6_IRQHandler+0x68>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <USART6_IRQHandler+0x6c>)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	5453      	strb	r3, [r2, r1]
		index_buff++;
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <USART6_IRQHandler+0x68>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <USART6_IRQHandler+0x68>)
 80018a0:	701a      	strb	r2, [r3, #0]

		if(rbyte == '$')
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b24      	cmp	r3, #36	; 0x24
 80018a6:	d102      	bne.n	80018ae <USART6_IRQHandler+0x4a>
		{
			ws_receive_flag = 1;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <USART6_IRQHandler+0x70>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]

		//__HAL_UART_SEND_REQ(&huart4, UART_RXDATA_FLUSH_REQUEST);
		//__HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
	}

	if (USART6->ISR & UART_IT_ORE)
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <USART6_IRQHandler+0x60>)
 80018b0:	69db      	ldr	r3, [r3, #28]
	{
	  //__HAL_UART_SEND_REQ(&huart4, UART_RXDATA_FLUSH_REQUEST);
	  //__HAL_UART_ENABLE_IT(&huart4,UART_IT_ORE);
	}
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <USART6_IRQHandler+0x64>)
 80018b4:	f004 fa1a 	bl	8005cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40011400 	.word	0x40011400
 80018c8:	200006d0 	.word	0x200006d0
 80018cc:	200000a0 	.word	0x200000a0
 80018d0:	200000a4 	.word	0x200000a4
 80018d4:	20000919 	.word	0x20000919

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f006 f914 	bl	8007b34 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20080000 	.word	0x20080000
 8001938:	00000400 	.word	0x00000400
 800193c:	20000094 	.word	0x20000094
 8001940:	20000938 	.word	0x20000938

08001944 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196e:	490e      	ldr	r1, [pc, #56]	; (80019a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001984:	4c0b      	ldr	r4, [pc, #44]	; (80019b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001992:	f7ff ffd7 	bl	8001944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001996:	f006 f8d3 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7fe fe51 	bl	8000640 <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019ac:	080084c4 	.word	0x080084c4
  ldr r2, =_sbss
 80019b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019b4:	20000938 	.word	0x20000938

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>

080019ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	2003      	movs	r0, #3
 80019c0:	f001 fa58 	bl	8002e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 f805 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ca:	f7ff fb6b 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fa73 	bl	8002ede <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a10:	f001 fa3b 	bl	8002e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000924 	.word	0x20000924

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000924 	.word	0x20000924

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e031      	b.n	8001b36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fb06 	bl	80010ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_ADC_Init+0x84>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	f043 0202 	orr.w	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f970 	bl	8001df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	e001      	b.n	8001b2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	ffffeefd 	.word	0xffffeefd

08001b44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x1c>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e136      	b.n	8001dce <HAL_ADC_ConfigChannel+0x28a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	d93a      	bls.n	8001be6 <HAL_ADC_ConfigChannel+0xa2>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b78:	d035      	beq.n	8001be6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68d9      	ldr	r1, [r3, #12]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b1e      	subs	r3, #30
 8001b90:	2207      	movs	r2, #7
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a8d      	ldr	r2, [pc, #564]	; (8001ddc <HAL_ADC_ConfigChannel+0x298>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68d9      	ldr	r1, [r3, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	061a      	lsls	r2, r3, #24
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bbe:	e035      	b.n	8001c2c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4403      	add	r3, r0
 8001bd8:	3b1e      	subs	r3, #30
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be4:	e022      	b.n	8001c2c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6919      	ldr	r1, [r3, #16]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43da      	mvns	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	400a      	ands	r2, r1
 8001c08:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6919      	ldr	r1, [r3, #16]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4403      	add	r3, r0
 8001c22:	409a      	lsls	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d824      	bhi.n	8001c7e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b05      	subs	r3, #5
 8001c46:	221f      	movs	r2, #31
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43da      	mvns	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	400a      	ands	r2, r1
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b05      	subs	r3, #5
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7c:	e04c      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d824      	bhi.n	8001cd0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3b23      	subs	r3, #35	; 0x23
 8001c98:	221f      	movs	r2, #31
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b23      	subs	r3, #35	; 0x23
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cce:	e023      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b41      	subs	r3, #65	; 0x41
 8001ce2:	221f      	movs	r2, #31
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	400a      	ands	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b41      	subs	r3, #65	; 0x41
 8001d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a30      	ldr	r2, [pc, #192]	; (8001de0 <HAL_ADC_ConfigChannel+0x29c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10a      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1f4>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d32:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d36:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_ADC_ConfigChannel+0x29c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10f      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x21e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b12      	cmp	r3, #18
 8001d48:	d10b      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d54:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d60:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <HAL_ADC_ConfigChannel+0x29c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d12b      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x280>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_ADC_ConfigChannel+0x298>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d003      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x23a>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b11      	cmp	r3, #17
 8001d7c:	d122      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d88:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_ADC_ConfigChannel+0x298>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d111      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_ADC_ConfigChannel+0x2a8>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9a      	lsrs	r2, r3, #18
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001db6:	e002      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f9      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	10000012 	.word	0x10000012
 8001de0:	40012000 	.word	0x40012000
 8001de4:	40012300 	.word	0x40012300
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001df8:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <ADC_Init+0x1ec>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a77      	ldr	r2, [pc, #476]	; (8001fdc <ADC_Init+0x1ec>)
 8001dfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e04:	4b75      	ldr	r3, [pc, #468]	; (8001fdc <ADC_Init+0x1ec>)
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4973      	ldr	r1, [pc, #460]	; (8001fdc <ADC_Init+0x1ec>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <ADC_Init+0x1f0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e00f      	b.n	8001eea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	005a      	lsls	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	035a      	lsls	r2, r3, #13
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e007      	b.n	8001f60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	051a      	lsls	r2, r3, #20
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fa2:	025a      	lsls	r2, r3, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	029a      	lsls	r2, r3, #10
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	0f000001 	.word	0x0f000001

08001fe4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0ed      	b.n	80021d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff f8e0 	bl	80011c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002018:	f7ff fd20 	bl	8001a5c <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800201e:	e012      	b.n	8002046 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002020:	f7ff fd1c 	bl	8001a5c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b0a      	cmp	r3, #10
 800202c:	d90b      	bls.n	8002046 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2205      	movs	r2, #5
 800203e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0c5      	b.n	80021d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0e5      	beq.n	8002020 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0202 	bic.w	r2, r2, #2
 8002062:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002064:	f7ff fcfa 	bl	8001a5c <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800206a:	e012      	b.n	8002092 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800206c:	f7ff fcf6 	bl	8001a5c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b0a      	cmp	r3, #10
 8002078:	d90b      	bls.n	8002092 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e09f      	b.n	80021d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e5      	bne.n	800206c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d108      	bne.n	80020ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e007      	b.n	80020ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7e5b      	ldrb	r3, [r3, #25]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e007      	b.n	80020f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7e9b      	ldrb	r3, [r3, #26]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d108      	bne.n	800210e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e007      	b.n	800211e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0220 	bic.w	r2, r2, #32
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7edb      	ldrb	r3, [r3, #27]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0210 	bic.w	r2, r2, #16
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e007      	b.n	8002148 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0210 	orr.w	r2, r2, #16
 8002146:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7f1b      	ldrb	r3, [r3, #28]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d108      	bne.n	8002162 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e007      	b.n	8002172 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0208 	bic.w	r2, r2, #8
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7f5b      	ldrb	r3, [r3, #29]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d108      	bne.n	800218c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0204 	orr.w	r2, r2, #4
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e007      	b.n	800219c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0204 	bic.w	r2, r2, #4
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	ea42 0103 	orr.w	r1, r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d003      	beq.n	8002202 <HAL_CAN_ConfigFilter+0x26>
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f040 80c7 	bne.w	8002390 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_CAN_ConfigFilter+0x1d0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d001      	beq.n	8002210 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800220c:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_CAN_ConfigFilter+0x1d4>)
 800220e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4a63      	ldr	r2, [pc, #396]	; (80023b0 <HAL_CAN_ConfigFilter+0x1d4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800222e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2201      	movs	r2, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d123      	bne.n	80022be <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	401a      	ands	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002298:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3248      	adds	r2, #72	; 0x48
 800229e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022b4:	6979      	ldr	r1, [r7, #20]
 80022b6:	3348      	adds	r3, #72	; 0x48
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d122      	bne.n	800230c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3248      	adds	r2, #72	; 0x48
 80022ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002300:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	3348      	adds	r3, #72	; 0x48
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43db      	mvns	r3, r3
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002326:	e007      	b.n	8002338 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	431a      	orrs	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002352:	e007      	b.n	8002364 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002382:	f023 0201 	bic.w	r2, r3, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e006      	b.n	800239e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40003400 	.word	0x40003400
 80023b0:	40006400 	.word	0x40006400

080023b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d12e      	bne.n	8002426 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fb3c 	bl	8001a5c <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023e6:	e012      	b.n	800240e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e8:	f7ff fb38 	bl	8001a5c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b0a      	cmp	r3, #10
 80023f4:	d90b      	bls.n	800240e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2205      	movs	r2, #5
 8002406:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e012      	b.n	8002434 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e5      	bne.n	80023e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e006      	b.n	8002434 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002450:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800245a:	7ffb      	ldrb	r3, [r7, #31]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d003      	beq.n	8002468 <HAL_CAN_AddTxMessage+0x2c>
 8002460:	7ffb      	ldrb	r3, [r7, #31]
 8002462:	2b02      	cmp	r3, #2
 8002464:	f040 80b8 	bne.w	80025d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80a0 	beq.w	80025c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	0e1b      	lsrs	r3, r3, #24
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d907      	bls.n	80024a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e09e      	b.n	80025e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024a8:	2201      	movs	r2, #1
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	409a      	lsls	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024c4:	68f9      	ldr	r1, [r7, #12]
 80024c6:	6809      	ldr	r1, [r1, #0]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3318      	adds	r3, #24
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	440b      	add	r3, r1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e00f      	b.n	80024f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3318      	adds	r3, #24
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	440b      	add	r3, r1
 80024f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3318      	adds	r3, #24
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	440b      	add	r3, r1
 8002506:	3304      	adds	r3, #4
 8002508:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	7d1b      	ldrb	r3, [r3, #20]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d111      	bne.n	8002536 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3318      	adds	r3, #24
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4413      	add	r3, r2
 800251e:	3304      	adds	r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	6811      	ldr	r1, [r2, #0]
 8002526:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3318      	adds	r3, #24
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	440b      	add	r3, r1
 8002532:	3304      	adds	r3, #4
 8002534:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3307      	adds	r3, #7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	061a      	lsls	r2, r3, #24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3306      	adds	r3, #6
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3305      	adds	r3, #5
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	4313      	orrs	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	3204      	adds	r2, #4
 8002556:	7812      	ldrb	r2, [r2, #0]
 8002558:	4610      	mov	r0, r2
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6811      	ldr	r1, [r2, #0]
 800255e:	ea43 0200 	orr.w	r2, r3, r0
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	440b      	add	r3, r1
 8002568:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800256c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3303      	adds	r3, #3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	061a      	lsls	r2, r3, #24
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3302      	adds	r3, #2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3301      	adds	r3, #1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	4313      	orrs	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	4610      	mov	r0, r2
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	6811      	ldr	r1, [r2, #0]
 8002594:	ea43 0200 	orr.w	r2, r3, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	440b      	add	r3, r1
 800259e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3318      	adds	r3, #24
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	6811      	ldr	r1, [r2, #0]
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3318      	adds	r3, #24
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	440b      	add	r3, r1
 80025c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e00e      	b.n	80025e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e006      	b.n	80025e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025f2:	b480      	push	{r7}
 80025f4:	b087      	sub	sp, #28
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002606:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d003      	beq.n	8002616 <HAL_CAN_GetRxMessage+0x24>
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b02      	cmp	r3, #2
 8002612:	f040 80f3 	bne.w	80027fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10e      	bne.n	800263a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0e7      	b.n	800280a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0d8      	b.n	800280a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	331b      	adds	r3, #27
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	4413      	add	r3, r2
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0204 	and.w	r2, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	331b      	adds	r3, #27
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	4413      	add	r3, r2
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0d5b      	lsrs	r3, r3, #21
 8002686:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	331b      	adds	r3, #27
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4413      	add	r3, r2
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	331b      	adds	r3, #27
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0202 	and.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	331b      	adds	r3, #27
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	331b      	adds	r3, #27
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	331b      	adds	r3, #27
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	0c1b      	lsrs	r3, r3, #16
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4413      	add	r3, r2
 8002726:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0a1a      	lsrs	r2, r3, #8
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0c1a      	lsrs	r2, r3, #16
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3302      	adds	r3, #2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4413      	add	r3, r2
 800275a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e1a      	lsrs	r2, r3, #24
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3303      	adds	r3, #3
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	4413      	add	r3, r2
 8002774:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3304      	adds	r3, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	4413      	add	r3, r2
 800278c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0a1a      	lsrs	r2, r3, #8
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	3305      	adds	r3, #5
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0c1a      	lsrs	r2, r3, #16
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3306      	adds	r3, #6
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4413      	add	r3, r2
 80027c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	0e1a      	lsrs	r2, r3, #24
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	3307      	adds	r3, #7
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0220 	orr.w	r2, r2, #32
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	e007      	b.n	80027f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0220 	orr.w	r2, r2, #32
 80027f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e006      	b.n	800280a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002826:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d002      	beq.n	8002834 <HAL_CAN_ActivateNotification+0x1e>
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d109      	bne.n	8002848 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6959      	ldr	r1, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e006      	b.n	8002856 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b08a      	sub	sp, #40	; 0x28
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d07c      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d023      	beq.n	80028fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2201      	movs	r2, #1
 80028b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f983 	bl	8002bd0 <HAL_CAN_TxMailbox0CompleteCallback>
 80028ca:	e016      	b.n	80028fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e00c      	b.n	80028fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e002      	b.n	80028fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f989 	bl	8002c0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d024      	beq.n	800294e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f963 	bl	8002be4 <HAL_CAN_TxMailbox1CompleteCallback>
 800291e:	e016      	b.n	800294e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	e00c      	b.n	800294e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
 8002946:	e002      	b.n	800294e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f969 	bl	8002c20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d024      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f943 	bl	8002bf8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002972:	e016      	b.n	80029a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e00c      	b.n	80029a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	e002      	b.n	80029a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f949 	bl	8002c34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2210      	movs	r2, #16
 80029c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2208      	movs	r2, #8
 80029e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f93a 	bl	8002c5c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f921 	bl	8002c48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2210      	movs	r2, #16
 8002a28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2208      	movs	r2, #8
 8002a44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f91c 	bl	8002c84 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f903 	bl	8002c70 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2210      	movs	r2, #16
 8002a84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f906 	bl	8002c98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8ff 	bl	8002cac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d07b      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d072      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d043      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03e      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b30:	2b60      	cmp	r3, #96	; 0x60
 8002b32:	d02b      	beq.n	8002b8c <HAL_CAN_IRQHandler+0x32a>
 8002b34:	2b60      	cmp	r3, #96	; 0x60
 8002b36:	d82e      	bhi.n	8002b96 <HAL_CAN_IRQHandler+0x334>
 8002b38:	2b50      	cmp	r3, #80	; 0x50
 8002b3a:	d022      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x320>
 8002b3c:	2b50      	cmp	r3, #80	; 0x50
 8002b3e:	d82a      	bhi.n	8002b96 <HAL_CAN_IRQHandler+0x334>
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d019      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x316>
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d826      	bhi.n	8002b96 <HAL_CAN_IRQHandler+0x334>
 8002b48:	2b30      	cmp	r3, #48	; 0x30
 8002b4a:	d010      	beq.n	8002b6e <HAL_CAN_IRQHandler+0x30c>
 8002b4c:	2b30      	cmp	r3, #48	; 0x30
 8002b4e:	d822      	bhi.n	8002b96 <HAL_CAN_IRQHandler+0x334>
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d002      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x2f8>
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d005      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b58:	e01d      	b.n	8002b96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	f043 0308 	orr.w	r3, r3, #8
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b62:	e019      	b.n	8002b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b6c:	e014      	b.n	8002b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b76:	e00f      	b.n	8002b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b80:	e00a      	b.n	8002b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b8a:	e005      	b.n	8002b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b94:	e000      	b.n	8002b98 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ba6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2204      	movs	r2, #4
 8002bae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f87c 	bl	8002cc0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <__NVIC_SetPriorityGrouping+0x40>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <__NVIC_SetPriorityGrouping+0x40>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00
 8002d18:	05fa0000 	.word	0x05fa0000

08002d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <__NVIC_GetPriorityGrouping+0x18>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 0307 	and.w	r3, r3, #7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	; (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db0a      	blt.n	8002d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	490c      	ldr	r1, [pc, #48]	; (8002dc0 <__NVIC_SetPriority+0x4c>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	440b      	add	r3, r1
 8002d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d9c:	e00a      	b.n	8002db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4908      	ldr	r1, [pc, #32]	; (8002dc4 <__NVIC_SetPriority+0x50>)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	3b04      	subs	r3, #4
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	440b      	add	r3, r1
 8002db2:	761a      	strb	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	bf28      	it	cs
 8002de6:	2304      	movcs	r3, #4
 8002de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d902      	bls.n	8002df8 <NVIC_EncodePriority+0x30>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b03      	subs	r3, #3
 8002df6:	e000      	b.n	8002dfa <NVIC_EncodePriority+0x32>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	4313      	orrs	r3, r2
         );
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e40:	d301      	bcc.n	8002e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00f      	b.n	8002e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <SysTick_Config+0x40>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4e:	210f      	movs	r1, #15
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e54:	f7ff ff8e 	bl	8002d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <SysTick_Config+0x40>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <SysTick_Config+0x40>)
 8002e60:	2207      	movs	r2, #7
 8002e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010

08002e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ff29 	bl	8002cd4 <__NVIC_SetPriorityGrouping>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9c:	f7ff ff3e 	bl	8002d1c <__NVIC_GetPriorityGrouping>
 8002ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f7ff ff8e 	bl	8002dc8 <NVIC_EncodePriority>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff5d 	bl	8002d74 <__NVIC_SetPriority>
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff31 	bl	8002d38 <__NVIC_EnableIRQ>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ffa2 	bl	8002e30 <SysTick_Config>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7fe fdaa 	bl	8001a5c <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d008      	beq.n	8002f28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e052      	b.n	8002fce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0216 	bic.w	r2, r2, #22
 8002f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <HAL_DMA_Abort+0x62>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0208 	bic.w	r2, r2, #8
 8002f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f78:	e013      	b.n	8002fa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7a:	f7fe fd6f 	bl	8001a5c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d90c      	bls.n	8002fa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2203      	movs	r2, #3
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e015      	b.n	8002fce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e4      	bne.n	8002f7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	223f      	movs	r2, #63	; 0x3f
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e00c      	b.n	800300e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2205      	movs	r2, #5
 8002ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	e175      	b.n	8003328 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800303c:	2201      	movs	r2, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	429a      	cmp	r2, r3
 8003056:	f040 8164 	bne.w	8003322 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d005      	beq.n	8003072 <HAL_GPIO_Init+0x56>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d130      	bne.n	80030d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2203      	movs	r2, #3
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a8:	2201      	movs	r2, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 0201 	and.w	r2, r3, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d017      	beq.n	8003110 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2203      	movs	r2, #3
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d123      	bne.n	8003164 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3208      	adds	r2, #8
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	69b9      	ldr	r1, [r7, #24]
 8003160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80be 	beq.w	8003322 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a6:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_GPIO_Init+0x324>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_GPIO_Init+0x324>)
 80031ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b0:	6453      	str	r3, [r2, #68]	; 0x44
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_GPIO_Init+0x324>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031be:	4a61      	ldr	r2, [pc, #388]	; (8003344 <HAL_GPIO_Init+0x328>)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	220f      	movs	r2, #15
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_GPIO_Init+0x32c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d037      	beq.n	800325a <HAL_GPIO_Init+0x23e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a57      	ldr	r2, [pc, #348]	; (800334c <HAL_GPIO_Init+0x330>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_GPIO_Init+0x23a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a56      	ldr	r2, [pc, #344]	; (8003350 <HAL_GPIO_Init+0x334>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02b      	beq.n	8003252 <HAL_GPIO_Init+0x236>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a55      	ldr	r2, [pc, #340]	; (8003354 <HAL_GPIO_Init+0x338>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d025      	beq.n	800324e <HAL_GPIO_Init+0x232>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a54      	ldr	r2, [pc, #336]	; (8003358 <HAL_GPIO_Init+0x33c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01f      	beq.n	800324a <HAL_GPIO_Init+0x22e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a53      	ldr	r2, [pc, #332]	; (800335c <HAL_GPIO_Init+0x340>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d019      	beq.n	8003246 <HAL_GPIO_Init+0x22a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a52      	ldr	r2, [pc, #328]	; (8003360 <HAL_GPIO_Init+0x344>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0x226>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a51      	ldr	r2, [pc, #324]	; (8003364 <HAL_GPIO_Init+0x348>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00d      	beq.n	800323e <HAL_GPIO_Init+0x222>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a50      	ldr	r2, [pc, #320]	; (8003368 <HAL_GPIO_Init+0x34c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x21e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4f      	ldr	r2, [pc, #316]	; (800336c <HAL_GPIO_Init+0x350>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_GPIO_Init+0x21a>
 8003232:	2309      	movs	r3, #9
 8003234:	e012      	b.n	800325c <HAL_GPIO_Init+0x240>
 8003236:	230a      	movs	r3, #10
 8003238:	e010      	b.n	800325c <HAL_GPIO_Init+0x240>
 800323a:	2308      	movs	r3, #8
 800323c:	e00e      	b.n	800325c <HAL_GPIO_Init+0x240>
 800323e:	2307      	movs	r3, #7
 8003240:	e00c      	b.n	800325c <HAL_GPIO_Init+0x240>
 8003242:	2306      	movs	r3, #6
 8003244:	e00a      	b.n	800325c <HAL_GPIO_Init+0x240>
 8003246:	2305      	movs	r3, #5
 8003248:	e008      	b.n	800325c <HAL_GPIO_Init+0x240>
 800324a:	2304      	movs	r3, #4
 800324c:	e006      	b.n	800325c <HAL_GPIO_Init+0x240>
 800324e:	2303      	movs	r3, #3
 8003250:	e004      	b.n	800325c <HAL_GPIO_Init+0x240>
 8003252:	2302      	movs	r3, #2
 8003254:	e002      	b.n	800325c <HAL_GPIO_Init+0x240>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_GPIO_Init+0x240>
 800325a:	2300      	movs	r3, #0
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	f002 0203 	and.w	r2, r2, #3
 8003262:	0092      	lsls	r2, r2, #2
 8003264:	4093      	lsls	r3, r2
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800326c:	4935      	ldr	r1, [pc, #212]	; (8003344 <HAL_GPIO_Init+0x328>)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327a:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <HAL_GPIO_Init+0x354>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <HAL_GPIO_Init+0x354>)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_GPIO_Init+0x354>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c8:	4a29      	ldr	r2, [pc, #164]	; (8003370 <HAL_GPIO_Init+0x354>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ce:	4b28      	ldr	r3, [pc, #160]	; (8003370 <HAL_GPIO_Init+0x354>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032f2:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_GPIO_Init+0x354>)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_GPIO_Init+0x354>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <HAL_GPIO_Init+0x354>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3301      	adds	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	f67f ae86 	bls.w	800303c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800
 8003344:	40013800 	.word	0x40013800
 8003348:	40020000 	.word	0x40020000
 800334c:	40020400 	.word	0x40020400
 8003350:	40020800 	.word	0x40020800
 8003354:	40020c00 	.word	0x40020c00
 8003358:	40021000 	.word	0x40021000
 800335c:	40021400 	.word	0x40021400
 8003360:	40021800 	.word	0x40021800
 8003364:	40021c00 	.word	0x40021c00
 8003368:	40022000 	.word	0x40022000
 800336c:	40022400 	.word	0x40022400
 8003370:	40013c00 	.word	0x40013c00

08003374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
 8003380:	4613      	mov	r3, r2
 8003382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003384:	787b      	ldrb	r3, [r7, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003390:	e003      	b.n	800339a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	619a      	str	r2, [r3, #24]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033b8:	887a      	ldrh	r2, [r7, #2]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	041a      	lsls	r2, r3, #16
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	43d9      	mvns	r1, r3
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	400b      	ands	r3, r1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f806 	bl	800340c <HAL_GPIO_EXTI_Callback>
  }
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40013c00 	.word	0x40013c00

0800340c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003422:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003424:	b08f      	sub	sp, #60	; 0x3c
 8003426:	af0a      	add	r7, sp, #40	; 0x28
 8003428:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e116      	b.n	8003662 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe f8fc 	bl	800164c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2203      	movs	r2, #3
 8003458:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f004 f8c8 	bl	8007608 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	687e      	ldr	r6, [r7, #4]
 8003480:	466d      	mov	r5, sp
 8003482:	f106 0410 	add.w	r4, r6, #16
 8003486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003492:	e885 0003 	stmia.w	r5, {r0, r1}
 8003496:	1d33      	adds	r3, r6, #4
 8003498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	f004 f85c 	bl	8007558 <USB_CoreInit>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0d7      	b.n	8003662 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f004 f8b6 	bl	800762a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e04a      	b.n	800355a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	333d      	adds	r3, #61	; 0x3d
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	333c      	adds	r3, #60	; 0x3c
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	b298      	uxth	r0, r3
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3342      	adds	r3, #66	; 0x42
 8003500:	4602      	mov	r2, r0
 8003502:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	333f      	adds	r3, #63	; 0x3f
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3344      	adds	r3, #68	; 0x44
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3348      	adds	r3, #72	; 0x48
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3350      	adds	r3, #80	; 0x50
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	3301      	adds	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d3af      	bcc.n	80034c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	e044      	b.n	80035f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	3301      	adds	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d3b5      	bcc.n	800356a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	687e      	ldr	r6, [r7, #4]
 8003606:	466d      	mov	r5, sp
 8003608:	f106 0410 	add.w	r4, r6, #16
 800360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003614:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003618:	e885 0003 	stmia.w	r5, {r0, r1}
 800361c:	1d33      	adds	r3, r6, #4
 800361e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f004 f84f 	bl	80076c4 <USB_DevInit>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e014      	b.n	8003662 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f80b 	bl	800366c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f004 fa09 	bl	8007a72 <USB_DevDisconnect>

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800366c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800369c:	4313      	orrs	r3, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	10000003 	.word	0x10000003

080036b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	6013      	str	r3, [r2, #0]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40007000 	.word	0x40007000

080036d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_PWREx_EnableOverDrive+0x98>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_PWREx_EnableOverDrive+0x98>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_PWREx_EnableOverDrive+0x98>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003702:	f7fe f9ab 	bl	8001a5c <HAL_GetTick>
 8003706:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003708:	e009      	b.n	800371e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800370a:	f7fe f9a7 	bl	8001a5c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003718:	d901      	bls.n	800371e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e022      	b.n	8003764 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372a:	d1ee      	bne.n	800370a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_PWREx_EnableOverDrive+0x9c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0f      	ldr	r2, [pc, #60]	; (8003770 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003736:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003738:	f7fe f990 	bl	8001a5c <HAL_GetTick>
 800373c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800373e:	e009      	b.n	8003754 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003740:	f7fe f98c 	bl	8001a5c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800374e:	d901      	bls.n	8003754 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e007      	b.n	8003764 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003760:	d1ee      	bne.n	8003740 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	40007000 	.word	0x40007000

08003774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800377c:	2300      	movs	r3, #0
 800377e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e29b      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8087 	beq.w	80038a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003798:	4b96      	ldr	r3, [pc, #600]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d00c      	beq.n	80037be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a4:	4b93      	ldr	r3, [pc, #588]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d112      	bne.n	80037d6 <HAL_RCC_OscConfig+0x62>
 80037b0:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d10b      	bne.n	80037d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037be:	4b8d      	ldr	r3, [pc, #564]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d06c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x130>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d168      	bne.n	80038a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e275      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x7a>
 80037e0:	4b84      	ldr	r3, [pc, #528]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a83      	ldr	r2, [pc, #524]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e02e      	b.n	800384c <HAL_RCC_OscConfig+0xd8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x9c>
 80037f6:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7e      	ldr	r2, [pc, #504]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7b      	ldr	r2, [pc, #492]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e01d      	b.n	800384c <HAL_RCC_OscConfig+0xd8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0xc0>
 800381a:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a75      	ldr	r2, [pc, #468]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a72      	ldr	r2, [pc, #456]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0xd8>
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800383a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b6c      	ldr	r3, [pc, #432]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a6b      	ldr	r2, [pc, #428]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe f902 	bl	8001a5c <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe f8fe 	bl	8001a5c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e229      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0xe8>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe f8ee 	bl	8001a5c <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe f8ea 	bl	8001a5c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e215      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x110>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d069      	beq.n	8003986 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038b2:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d11c      	bne.n	8003904 <HAL_RCC_OscConfig+0x190>
 80038ca:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d116      	bne.n	8003904 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x17a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1e9      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	493d      	ldr	r1, [pc, #244]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	e040      	b.n	8003986 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d023      	beq.n	8003954 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390c:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a38      	ldr	r2, [pc, #224]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f8a0 	bl	8001a5c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003920:	f7fe f89c 	bl	8001a5c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1c7      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393e:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4929      	ldr	r1, [pc, #164]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
 8003952:	e018      	b.n	8003986 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe f87c 	bl	8001a5c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003968:	f7fe f878 	bl	8001a5c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e1a3      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d038      	beq.n	8003a04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d019      	beq.n	80039ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fe f859 	bl	8001a5c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fe f855 	bl	8001a5c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e180      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x23a>
 80039cc:	e01a      	b.n	8003a04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <HAL_RCC_OscConfig+0x280>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fe f83f 	bl	8001a5c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e2:	f7fe f83b 	bl	8001a5c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d903      	bls.n	80039f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e166      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
 80039f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	4b92      	ldr	r3, [pc, #584]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ee      	bne.n	80039e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a4 	beq.w	8003b5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b8c      	ldr	r3, [pc, #560]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b89      	ldr	r3, [pc, #548]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	4a88      	ldr	r2, [pc, #544]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2a:	4b86      	ldr	r3, [pc, #536]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3a:	4b83      	ldr	r3, [pc, #524]	; (8003c48 <HAL_RCC_OscConfig+0x4d4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d118      	bne.n	8003a78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a46:	4b80      	ldr	r3, [pc, #512]	; (8003c48 <HAL_RCC_OscConfig+0x4d4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7f      	ldr	r2, [pc, #508]	; (8003c48 <HAL_RCC_OscConfig+0x4d4>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a52:	f7fe f803 	bl	8001a5c <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7fd ffff 	bl	8001a5c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b64      	cmp	r3, #100	; 0x64
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e12a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a6c:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <HAL_RCC_OscConfig+0x4d4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x31a>
 8003a80:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	4a6f      	ldr	r2, [pc, #444]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8c:	e02d      	b.n	8003aea <HAL_RCC_OscConfig+0x376>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x33c>
 8003a96:	4b6b      	ldr	r3, [pc, #428]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	4a6a      	ldr	r2, [pc, #424]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa2:	4b68      	ldr	r3, [pc, #416]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4a67      	ldr	r2, [pc, #412]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6713      	str	r3, [r2, #112]	; 0x70
 8003aae:	e01c      	b.n	8003aea <HAL_RCC_OscConfig+0x376>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x35e>
 8003ab8:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a61      	ldr	r2, [pc, #388]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a5e      	ldr	r2, [pc, #376]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad0:	e00b      	b.n	8003aea <HAL_RCC_OscConfig+0x376>
 8003ad2:	4b5c      	ldr	r3, [pc, #368]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a5b      	ldr	r2, [pc, #364]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d015      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fd ffb3 	bl	8001a5c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd ffaf 	bl	8001a5c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0d8      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	4b4c      	ldr	r3, [pc, #304]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ee      	beq.n	8003afa <HAL_RCC_OscConfig+0x386>
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fd ff9d 	bl	8001a5c <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fd ff99 	bl	8001a5c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0c2      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3c:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ee      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4e:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4a3c      	ldr	r2, [pc, #240]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80ae 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b64:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d06d      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d14b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b78:	4b32      	ldr	r3, [pc, #200]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a31      	ldr	r2, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd ff6a 	bl	8001a5c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fd ff66 	bl	8001a5c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e091      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	491b      	ldr	r1, [pc, #108]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd ff38 	bl	8001a5c <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fd ff34 	bl	8001a5c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e05f      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x47c>
 8003c0e:	e057      	b.n	8003cc0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd ff1e 	bl	8001a5c <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fd ff1a 	bl	8001a5c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e045      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_RCC_OscConfig+0x4d0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4b0>
 8003c42:	e03d      	b.n	8003cc0 <HAL_RCC_OscConfig+0x54c>
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <HAL_RCC_OscConfig+0x558>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d030      	beq.n	8003cbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d129      	bne.n	8003cbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d122      	bne.n	8003cbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d119      	bne.n	8003cbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	3b01      	subs	r3, #1
 8003c96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d10f      	bne.n	8003cbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800

08003cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0d0      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d910      	bls.n	8003d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b67      	ldr	r3, [pc, #412]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 020f 	bic.w	r2, r3, #15
 8003cfe:	4965      	ldr	r1, [pc, #404]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b63      	ldr	r3, [pc, #396]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0b8      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d30:	4b59      	ldr	r3, [pc, #356]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a52      	ldr	r2, [pc, #328]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d54:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	494d      	ldr	r1, [pc, #308]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d040      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d115      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e07f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e073      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e06b      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db2:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4936      	ldr	r1, [pc, #216]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc4:	f7fd fe4a 	bl	8001a5c <HAL_GetTick>
 8003dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dcc:	f7fd fe46 	bl	8001a5c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e053      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 020c 	and.w	r2, r3, #12
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d1eb      	bne.n	8003dcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003df4:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d210      	bcs.n	8003e24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 020f 	bic.w	r2, r3, #15
 8003e0a:	4922      	ldr	r1, [pc, #136]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e032      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4916      	ldr	r1, [pc, #88]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	490e      	ldr	r1, [pc, #56]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e62:	f000 f821 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e66:	4602      	mov	r2, r0
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	490a      	ldr	r1, [pc, #40]	; (8003e9c <HAL_RCC_ClockConfig+0x1cc>)
 8003e74:	5ccb      	ldrb	r3, [r1, r3]
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8003e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1d4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fd fda6 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023c00 	.word	0x40023c00
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	08008468 	.word	0x08008468
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	20000004 	.word	0x20000004

08003ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec0:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d00d      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	f200 80bd 	bhi.w	800404c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x34>
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eda:	e0b7      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ede:	60bb      	str	r3, [r7, #8]
      break;
 8003ee0:	e0b7      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee2:	4b61      	ldr	r3, [pc, #388]	; (8004068 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ee4:	60bb      	str	r3, [r7, #8]
      break;
 8003ee6:	e0b4      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee8:	4b5d      	ldr	r3, [pc, #372]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04d      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	099b      	lsrs	r3, r3, #6
 8003f04:	461a      	mov	r2, r3
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	ea02 0800 	and.w	r8, r2, r0
 8003f16:	ea03 0901 	and.w	r9, r3, r1
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	014b      	lsls	r3, r1, #5
 8003f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f2c:	0142      	lsls	r2, r0, #5
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	ebb0 0008 	subs.w	r0, r0, r8
 8003f36:	eb61 0109 	sbc.w	r1, r1, r9
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	018b      	lsls	r3, r1, #6
 8003f44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f48:	0182      	lsls	r2, r0, #6
 8003f4a:	1a12      	subs	r2, r2, r0
 8003f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003f50:	f04f 0000 	mov.w	r0, #0
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	00d9      	lsls	r1, r3, #3
 8003f5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f5e:	00d0      	lsls	r0, r2, #3
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	eb12 0208 	adds.w	r2, r2, r8
 8003f68:	eb43 0309 	adc.w	r3, r3, r9
 8003f6c:	f04f 0000 	mov.w	r0, #0
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	0259      	lsls	r1, r3, #9
 8003f76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f7a:	0250      	lsls	r0, r2, #9
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	f7fc f9a8 	bl	80002e0 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e04a      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	ea02 0400 	and.w	r4, r2, r0
 8003fb2:	ea03 0501 	and.w	r5, r3, r1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	014b      	lsls	r3, r1, #5
 8003fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fc8:	0142      	lsls	r2, r0, #5
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	1b00      	subs	r0, r0, r4
 8003fd0:	eb61 0105 	sbc.w	r1, r1, r5
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	018b      	lsls	r3, r1, #6
 8003fde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fe2:	0182      	lsls	r2, r0, #6
 8003fe4:	1a12      	subs	r2, r2, r0
 8003fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fea:	f04f 0000 	mov.w	r0, #0
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	00d9      	lsls	r1, r3, #3
 8003ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ff8:	00d0      	lsls	r0, r2, #3
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	1912      	adds	r2, r2, r4
 8004000:	eb45 0303 	adc.w	r3, r5, r3
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	0299      	lsls	r1, r3, #10
 800400e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004012:	0290      	lsls	r0, r2, #10
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	461a      	mov	r2, r3
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	f7fc f95c 	bl	80002e0 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	60bb      	str	r3, [r7, #8]
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800404e:	60bb      	str	r3, [r7, #8]
      break;
 8004050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004052:	68bb      	ldr	r3, [r7, #8]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200

0800406c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_RCC_GetHCLKFreq+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000000 	.word	0x20000000

08004084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004088:	f7ff fff0 	bl	800406c <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0a9b      	lsrs	r3, r3, #10
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4903      	ldr	r1, [pc, #12]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	08008478 	.word	0x08008478

080040ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040b0:	f7ff ffdc 	bl	800406c <HAL_RCC_GetHCLKFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	0b5b      	lsrs	r3, r3, #13
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	4903      	ldr	r1, [pc, #12]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40023800 	.word	0x40023800
 80040d0:	08008478 	.word	0x08008478

080040d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040fc:	4b69      	ldr	r3, [pc, #420]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a68      	ldr	r2, [pc, #416]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004106:	6093      	str	r3, [r2, #8]
 8004108:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	4964      	ldr	r1, [pc, #400]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d017      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800412e:	4b5d      	ldr	r3, [pc, #372]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004134:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	4959      	ldr	r1, [pc, #356]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d017      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800416a:	4b4e      	ldr	r3, [pc, #312]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004170:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	494a      	ldr	r1, [pc, #296]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 808b 	beq.w	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	; 0x40
 80041c4:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041d0:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a34      	ldr	r2, [pc, #208]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041dc:	f7fd fc3e 	bl	8001a5c <HAL_GetTick>
 80041e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e4:	f7fd fc3a 	bl	8001a5c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e38f      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041f6:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004202:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d035      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d02e      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004220:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004228:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004236:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a1a      	ldr	r2, [pc, #104]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004240:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004242:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b01      	cmp	r3, #1
 8004252:	d114      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd fc02 	bl	8001a5c <HAL_GetTick>
 8004258:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fd fbfe 	bl	8001a5c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e351      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ee      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800428a:	d111      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800429a:	400b      	ands	r3, r1
 800429c:	4901      	ldr	r1, [pc, #4]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
 80042a2:	e00b      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40007000 	.word	0x40007000
 80042ac:	0ffffcff 	.word	0x0ffffcff
 80042b0:	4bb3      	ldr	r3, [pc, #716]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4ab2      	ldr	r2, [pc, #712]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042ba:	6093      	str	r3, [r2, #8]
 80042bc:	4bb0      	ldr	r3, [pc, #704]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c8:	49ad      	ldr	r1, [pc, #692]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d010      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042da:	4ba9      	ldr	r3, [pc, #676]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e0:	4aa7      	ldr	r2, [pc, #668]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042ea:	4ba5      	ldr	r3, [pc, #660]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	49a2      	ldr	r1, [pc, #648]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004308:	4b9d      	ldr	r3, [pc, #628]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004316:	499a      	ldr	r1, [pc, #616]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800432a:	4b95      	ldr	r3, [pc, #596]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004338:	4991      	ldr	r1, [pc, #580]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800434c:	4b8c      	ldr	r3, [pc, #560]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435a:	4989      	ldr	r1, [pc, #548]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800436e:	4b84      	ldr	r3, [pc, #528]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4980      	ldr	r1, [pc, #512]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004390:	4b7b      	ldr	r3, [pc, #492]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f023 0203 	bic.w	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	4978      	ldr	r1, [pc, #480]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043b2:	4b73      	ldr	r3, [pc, #460]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f023 020c 	bic.w	r2, r3, #12
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c0:	496f      	ldr	r1, [pc, #444]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043d4:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	4967      	ldr	r1, [pc, #412]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043f6:	4b62      	ldr	r3, [pc, #392]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	495e      	ldr	r1, [pc, #376]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	4956      	ldr	r1, [pc, #344]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800443a:	4b51      	ldr	r3, [pc, #324]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	494d      	ldr	r1, [pc, #308]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800445c:	4b48      	ldr	r3, [pc, #288]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	4945      	ldr	r1, [pc, #276]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800447e:	4b40      	ldr	r3, [pc, #256]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448c:	493c      	ldr	r1, [pc, #240]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a0:	4b37      	ldr	r3, [pc, #220]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	4934      	ldr	r1, [pc, #208]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d0:	492b      	ldr	r1, [pc, #172]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e0:	d101      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004502:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004510:	491b      	ldr	r1, [pc, #108]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004524:	4b16      	ldr	r3, [pc, #88]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004534:	4912      	ldr	r1, [pc, #72]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00b      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004558:	4909      	ldr	r1, [pc, #36]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800456e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004572:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	e002      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	4986      	ldr	r1, [pc, #536]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004598:	4b81      	ldr	r3, [pc, #516]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a8:	497d      	ldr	r1, [pc, #500]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d006      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80d6 	beq.w	8004770 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045c4:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a75      	ldr	r2, [pc, #468]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fd fa44 	bl	8001a5c <HAL_GetTick>
 80045d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045d8:	f7fd fa40 	bl	8001a5c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e195      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d021      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11d      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800460a:	4b65      	ldr	r3, [pc, #404]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004618:	4b61      	ldr	r3, [pc, #388]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461e:	0e1b      	lsrs	r3, r3, #24
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	019a      	lsls	r2, r3, #6
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	4958      	ldr	r1, [pc, #352]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02e      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004670:	d129      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004672:	4b4b      	ldr	r3, [pc, #300]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004680:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004686:	0f1b      	lsrs	r3, r3, #28
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	019a      	lsls	r2, r3, #6
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	071b      	lsls	r3, r3, #28
 80046a6:	493e      	ldr	r1, [pc, #248]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046ae:	4b3c      	ldr	r3, [pc, #240]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b4:	f023 021f 	bic.w	r2, r3, #31
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	3b01      	subs	r3, #1
 80046be:	4938      	ldr	r1, [pc, #224]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01d      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d8:	0e1b      	lsrs	r3, r3, #24
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046e0:	4b2f      	ldr	r3, [pc, #188]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	0f1b      	lsrs	r3, r3, #28
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	019a      	lsls	r2, r3, #6
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	431a      	orrs	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	4926      	ldr	r1, [pc, #152]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d011      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	019a      	lsls	r2, r3, #6
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	071b      	lsls	r3, r3, #28
 8004736:	491a      	ldr	r1, [pc, #104]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004744:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474a:	f7fd f987 	bl	8001a5c <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004752:	f7fd f983 	bl	8001a5c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b64      	cmp	r3, #100	; 0x64
 800475e:	d901      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0d8      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b01      	cmp	r3, #1
 8004774:	f040 80ce 	bne.w	8004914 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004784:	f7fd f96a 	bl	8001a5c <HAL_GetTick>
 8004788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800478a:	e00b      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800478c:	f7fd f966 	bl	8001a5c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d904      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e0bb      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047a4:	4b5e      	ldr	r3, [pc, #376]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b0:	d0ec      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02e      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12a      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047da:	4b51      	ldr	r3, [pc, #324]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047e8:	4b4d      	ldr	r3, [pc, #308]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	0f1b      	lsrs	r3, r3, #28
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	019a      	lsls	r2, r3, #6
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	4944      	ldr	r1, [pc, #272]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004816:	4b42      	ldr	r3, [pc, #264]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	3b01      	subs	r3, #1
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	493d      	ldr	r1, [pc, #244]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d022      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004844:	d11d      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004846:	4b36      	ldr	r3, [pc, #216]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	0e1b      	lsrs	r3, r3, #24
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004854:	4b32      	ldr	r3, [pc, #200]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	0f1b      	lsrs	r3, r3, #28
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	019a      	lsls	r2, r3, #6
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	431a      	orrs	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	071b      	lsls	r3, r3, #28
 800487a:	4929      	ldr	r1, [pc, #164]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d028      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	0e1b      	lsrs	r3, r3, #24
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	019a      	lsls	r2, r3, #6
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	4917      	ldr	r1, [pc, #92]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4911      	ldr	r1, [pc, #68]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fd f8b6 	bl	8001a5c <HAL_GetTick>
 80048f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048f4:	f7fd f8b2 	bl	8001a5c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e007      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800490e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004912:	d1ef      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800

08004924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e09d      	b.n	8004a72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d009      	beq.n	800495c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
 800494e:	e005      	b.n	800495c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fcd0 	bl	800131c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800499c:	d902      	bls.n	80049a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e002      	b.n	80049aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049b2:	d007      	beq.n	80049c4 <HAL_SPI_Init+0xa0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	ea42 0103 	orr.w	r1, r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	f003 0204 	and.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a40:	ea42 0103 	orr.w	r1, r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e049      	b.n	8004b20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fc fc7f 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f000 fba3 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e054      	b.n	8004bea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <HAL_TIM_Base_Start_IT+0xd4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <HAL_TIM_Base_Start_IT+0xe4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d115      	bne.n	8004bd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <HAL_TIM_Base_Start_IT+0xec>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d015      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0xbe>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc0:	d011      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd2:	e008      	b.n	8004be6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e000      	b.n	8004be8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40000c00 	.word	0x40000c00
 8004c08:	40010400 	.word	0x40010400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40001800 	.word	0x40001800
 8004c14:	00010007 	.word	0x00010007

08004c18 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e049      	b.n	8004cbe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f841 	bl	8004cc6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f000 fad4 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d122      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d11b      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f06f 0202 	mvn.w	r2, #2
 8004d06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa53 	bl	80051c8 <HAL_TIM_IC_CaptureCallback>
 8004d22:	e005      	b.n	8004d30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa45 	bl	80051b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa56 	bl	80051dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d122      	bne.n	8004d8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d11b      	bne.n	8004d8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0204 	mvn.w	r2, #4
 8004d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa29 	bl	80051c8 <HAL_TIM_IC_CaptureCallback>
 8004d76:	e005      	b.n	8004d84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fa1b 	bl	80051b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fa2c 	bl	80051dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d122      	bne.n	8004dde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d11b      	bne.n	8004dde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f06f 0208 	mvn.w	r2, #8
 8004dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2204      	movs	r2, #4
 8004db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f9ff 	bl	80051c8 <HAL_TIM_IC_CaptureCallback>
 8004dca:	e005      	b.n	8004dd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f9f1 	bl	80051b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa02 	bl	80051dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d122      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d11b      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0210 	mvn.w	r2, #16
 8004e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2208      	movs	r2, #8
 8004e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f9d5 	bl	80051c8 <HAL_TIM_IC_CaptureCallback>
 8004e1e:	e005      	b.n	8004e2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f9c7 	bl	80051b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f9d8 	bl	80051dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10e      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d107      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f06f 0201 	mvn.w	r2, #1
 8004e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f9a1 	bl	80051a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d10e      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d107      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fded 	bl	8005a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fde0 	bl	8005a78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f986 	bl	80051f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0220 	mvn.w	r2, #32
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fda0 	bl	8005a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e066      	b.n	8005004 <HAL_TIM_OC_ConfigChannel+0xec>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b14      	cmp	r3, #20
 8004f42:	d857      	bhi.n	8004ff4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004ff5 	.word	0x08004ff5
 8004f54:	08004ff5 	.word	0x08004ff5
 8004f58:	08004ff5 	.word	0x08004ff5
 8004f5c:	08004faf 	.word	0x08004faf
 8004f60:	08004ff5 	.word	0x08004ff5
 8004f64:	08004ff5 	.word	0x08004ff5
 8004f68:	08004ff5 	.word	0x08004ff5
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004ff5 	.word	0x08004ff5
 8004f74:	08004ff5 	.word	0x08004ff5
 8004f78:	08004ff5 	.word	0x08004ff5
 8004f7c:	08004fcb 	.word	0x08004fcb
 8004f80:	08004ff5 	.word	0x08004ff5
 8004f84:	08004ff5 	.word	0x08004ff5
 8004f88:	08004ff5 	.word	0x08004ff5
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004ff5 	.word	0x08004ff5
 8004f94:	08004ff5 	.word	0x08004ff5
 8004f98:	08004ff5 	.word	0x08004ff5
 8004f9c:	08004fe7 	.word	0x08004fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f9cc 	bl	8005344 <TIM_OC1_SetConfig>
      break;
 8004fac:	e025      	b.n	8004ffa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fa37 	bl	8005428 <TIM_OC2_SetConfig>
      break;
 8004fba:	e01e      	b.n	8004ffa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 faa8 	bl	8005518 <TIM_OC3_SetConfig>
      break;
 8004fc8:	e017      	b.n	8004ffa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fb17 	bl	8005604 <TIM_OC4_SetConfig>
      break;
 8004fd6:	e010      	b.n	8004ffa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb68 	bl	80056b4 <TIM_OC5_SetConfig>
      break;
 8004fe4:	e009      	b.n	8004ffa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fbb3 	bl	8005758 <TIM_OC6_SetConfig>
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIM_ConfigClockSource+0x1c>
 8005024:	2302      	movs	r3, #2
 8005026:	e0b4      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x186>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4b56      	ldr	r3, [pc, #344]	; (800519c <HAL_TIM_ConfigClockSource+0x190>)
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800504e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005060:	d03e      	beq.n	80050e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005066:	f200 8087 	bhi.w	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	f000 8086 	beq.w	800517e <HAL_TIM_ConfigClockSource+0x172>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d87f      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b70      	cmp	r3, #112	; 0x70
 800507a:	d01a      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0xa6>
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d87b      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b60      	cmp	r3, #96	; 0x60
 8005082:	d050      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x11a>
 8005084:	2b60      	cmp	r3, #96	; 0x60
 8005086:	d877      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b50      	cmp	r3, #80	; 0x50
 800508a:	d03c      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0xfa>
 800508c:	2b50      	cmp	r3, #80	; 0x50
 800508e:	d873      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d058      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0x13a>
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d86f      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b30      	cmp	r3, #48	; 0x30
 800509a:	d064      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d86b      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d060      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d867      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d05c      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d05a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	e062      	b.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6899      	ldr	r1, [r3, #8]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f000 fc17 	bl	80058f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	609a      	str	r2, [r3, #8]
      break;
 80050de:	e04f      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f000 fc00 	bl	80058f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005102:	609a      	str	r2, [r3, #8]
      break;
 8005104:	e03c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	461a      	mov	r2, r3
 8005114:	f000 fb74 	bl	8005800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2150      	movs	r1, #80	; 0x50
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fbcd 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 8005124:	e02c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	461a      	mov	r2, r3
 8005134:	f000 fb93 	bl	800585e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2160      	movs	r1, #96	; 0x60
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fbbd 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 8005144:	e01c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	461a      	mov	r2, r3
 8005154:	f000 fb54 	bl	8005800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2140      	movs	r1, #64	; 0x40
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fbad 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 8005164:	e00c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f000 fba4 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 8005176:	e003      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
      break;
 800517c:	e000      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800517e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	fffeff88 	.word	0xfffeff88

080051a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a40      	ldr	r2, [pc, #256]	; (8005318 <TIM_Base_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d00f      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3d      	ldr	r2, [pc, #244]	; (800531c <TIM_Base_SetConfig+0x118>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00b      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3c      	ldr	r2, [pc, #240]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3b      	ldr	r2, [pc, #236]	; (8005324 <TIM_Base_SetConfig+0x120>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3a      	ldr	r2, [pc, #232]	; (8005328 <TIM_Base_SetConfig+0x124>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d108      	bne.n	8005256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2f      	ldr	r2, [pc, #188]	; (8005318 <TIM_Base_SetConfig+0x114>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d02b      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d027      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2c      	ldr	r2, [pc, #176]	; (800531c <TIM_Base_SetConfig+0x118>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d023      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2b      	ldr	r2, [pc, #172]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01f      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <TIM_Base_SetConfig+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01b      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a29      	ldr	r2, [pc, #164]	; (8005328 <TIM_Base_SetConfig+0x124>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d017      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a28      	ldr	r2, [pc, #160]	; (800532c <TIM_Base_SetConfig+0x128>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <TIM_Base_SetConfig+0x12c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00f      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <TIM_Base_SetConfig+0x130>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a25      	ldr	r2, [pc, #148]	; (8005338 <TIM_Base_SetConfig+0x134>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a24      	ldr	r2, [pc, #144]	; (800533c <TIM_Base_SetConfig+0x138>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a23      	ldr	r2, [pc, #140]	; (8005340 <TIM_Base_SetConfig+0x13c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d108      	bne.n	80052c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <TIM_Base_SetConfig+0x114>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0xf8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <TIM_Base_SetConfig+0x124>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d103      	bne.n	8005304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	615a      	str	r2, [r3, #20]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40010400 	.word	0x40010400
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800
 8005338:	40001800 	.word	0x40001800
 800533c:	40001c00 	.word	0x40001c00
 8005340:	40002000 	.word	0x40002000

08005344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0201 	bic.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4b2b      	ldr	r3, [pc, #172]	; (800541c <TIM_OC1_SetConfig+0xd8>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 0302 	bic.w	r3, r3, #2
 800538c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a21      	ldr	r2, [pc, #132]	; (8005420 <TIM_OC1_SetConfig+0xdc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC1_SetConfig+0x64>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a20      	ldr	r2, [pc, #128]	; (8005424 <TIM_OC1_SetConfig+0xe0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d10c      	bne.n	80053c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0308 	bic.w	r3, r3, #8
 80053ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <TIM_OC1_SetConfig+0xdc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_OC1_SetConfig+0x8e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC1_SetConfig+0xe0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d111      	bne.n	80053f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	621a      	str	r2, [r3, #32]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	fffeff8f 	.word	0xfffeff8f
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400

08005428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0210 	bic.w	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4b2e      	ldr	r3, [pc, #184]	; (800550c <TIM_OC2_SetConfig+0xe4>)
 8005454:	4013      	ands	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0320 	bic.w	r3, r3, #32
 8005472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a23      	ldr	r2, [pc, #140]	; (8005510 <TIM_OC2_SetConfig+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC2_SetConfig+0x68>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a22      	ldr	r2, [pc, #136]	; (8005514 <TIM_OC2_SetConfig+0xec>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10d      	bne.n	80054ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <TIM_OC2_SetConfig+0xe8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC2_SetConfig+0x94>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <TIM_OC2_SetConfig+0xec>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d113      	bne.n	80054e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	feff8fff 	.word	0xfeff8fff
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4b2d      	ldr	r3, [pc, #180]	; (80055f8 <TIM_OC3_SetConfig+0xe0>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a22      	ldr	r2, [pc, #136]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0x66>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a21      	ldr	r2, [pc, #132]	; (8005600 <TIM_OC3_SetConfig+0xe8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10d      	bne.n	800559a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a17      	ldr	r2, [pc, #92]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_OC3_SetConfig+0x92>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a16      	ldr	r2, [pc, #88]	; (8005600 <TIM_OC3_SetConfig+0xe8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d113      	bne.n	80055d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	fffeff8f 	.word	0xfffeff8f
 80055fc:	40010000 	.word	0x40010000
 8005600:	40010400 	.word	0x40010400

08005604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4b1e      	ldr	r3, [pc, #120]	; (80056a8 <TIM_OC4_SetConfig+0xa4>)
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800564e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	031b      	lsls	r3, r3, #12
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a13      	ldr	r2, [pc, #76]	; (80056ac <TIM_OC4_SetConfig+0xa8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC4_SetConfig+0x68>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <TIM_OC4_SetConfig+0xac>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d109      	bne.n	8005680 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	019b      	lsls	r3, r3, #6
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	feff8fff 	.word	0xfeff8fff
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40010400 	.word	0x40010400

080056b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4b1b      	ldr	r3, [pc, #108]	; (800574c <TIM_OC5_SetConfig+0x98>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a12      	ldr	r2, [pc, #72]	; (8005750 <TIM_OC5_SetConfig+0x9c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC5_SetConfig+0x5e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a11      	ldr	r2, [pc, #68]	; (8005754 <TIM_OC5_SetConfig+0xa0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d109      	bne.n	8005726 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005718:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	fffeff8f 	.word	0xfffeff8f
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <TIM_OC6_SetConfig+0x9c>)
 8005784:	4013      	ands	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800579a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	051b      	lsls	r3, r3, #20
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <TIM_OC6_SetConfig+0xa0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC6_SetConfig+0x60>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a12      	ldr	r2, [pc, #72]	; (80057fc <TIM_OC6_SetConfig+0xa4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d109      	bne.n	80057cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	feff8fff 	.word	0xfeff8fff
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800582a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 030a 	bic.w	r3, r3, #10
 800583c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800585e:	b480      	push	{r7}
 8005860:	b087      	sub	sp, #28
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0210 	bic.w	r2, r3, #16
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	031b      	lsls	r3, r3, #12
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800589a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	f043 0307 	orr.w	r3, r3, #7
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800590e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	431a      	orrs	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4313      	orrs	r3, r2
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	609a      	str	r2, [r3, #8]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e06d      	b.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a30      	ldr	r2, [pc, #192]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059be:	d01d      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10c      	bne.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40001800 	.word	0x40001800

08005a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e040      	b.n	8005b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb fd1e 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	; 0x24
 8005ab8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fc22 	bl	8006314 <UART_SetConfig>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e022      	b.n	8005b20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fe78 	bl	80067d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 feff 	bl	800691c <UART_CheckIdleState>
 8005b1e:	4603      	mov	r3, r0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	4613      	mov	r3, r2
 8005b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	f040 8081 	bne.w	8005c44 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_UART_Transmit+0x26>
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e079      	b.n	8005c46 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_UART_Transmit+0x38>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e072      	b.n	8005c46 <HAL_UART_Transmit+0x11e>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2221      	movs	r2, #33	; 0x21
 8005b74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b76:	f7fb ff71 	bl	8001a5c <HAL_GetTick>
 8005b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b94:	d108      	bne.n	8005ba8 <HAL_UART_Transmit+0x80>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e003      	b.n	8005bb0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005bb8:	e02c      	b.n	8005c14 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fef2 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e038      	b.n	8005c46 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	3302      	adds	r3, #2
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e007      	b.n	8005c02 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1cc      	bne.n	8005bba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 febf 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e005      	b.n	8005c46 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b08a      	sub	sp, #40	; 0x28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d13d      	bne.n	8005ce0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Receive_IT+0x22>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e036      	b.n	8005ce2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Receive_IT+0x34>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e02f      	b.n	8005ce2 <HAL_UART_Receive_IT+0x94>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	613b      	str	r3, [r7, #16]
   return(result);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	69f9      	ldr	r1, [r7, #28]
 8005cc2:	6a3a      	ldr	r2, [r7, #32]
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cd0:	88fb      	ldrh	r3, [r7, #6]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 ff2e 	bl	8006b38 <UART_Start_Receive_IT>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	e000      	b.n	8005ce2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3728      	adds	r7, #40	; 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b0ba      	sub	sp, #232	; 0xe8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d16:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d115      	bne.n	8005d54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00f      	beq.n	8005d54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 82a4 	beq.w	8006292 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
      }
      return;
 8005d52:	e29e      	b.n	8006292 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8117 	beq.w	8005f8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d6e:	4b85      	ldr	r3, [pc, #532]	; (8005f84 <HAL_UART_IRQHandler+0x298>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 810a 	beq.w	8005f8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d011      	beq.n	8005da8 <HAL_UART_IRQHandler+0xbc>
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d011      	beq.n	8005dd8 <HAL_UART_IRQHandler+0xec>
 8005db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dce:	f043 0204 	orr.w	r2, r3, #4
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d011      	beq.n	8005e08 <HAL_UART_IRQHandler+0x11c>
 8005de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2204      	movs	r2, #4
 8005df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfe:	f043 0202 	orr.w	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d017      	beq.n	8005e44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2208      	movs	r2, #8
 8005e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3a:	f043 0208 	orr.w	r2, r3, #8
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d012      	beq.n	8005e76 <HAL_UART_IRQHandler+0x18a>
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00c      	beq.n	8005e76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e6c:	f043 0220 	orr.w	r2, r3, #32
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 820a 	beq.w	8006296 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d04f      	beq.n	8005f6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fefc 	bl	8006ccc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d141      	bne.n	8005f66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1d9      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d013      	beq.n	8005f5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <HAL_UART_IRQHandler+0x29c>)
 8005f3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd f847 	bl	8002fd6 <HAL_DMA_Abort_IT>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d017      	beq.n	8005f7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e00f      	b.n	8005f7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f9b8 	bl	80062d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	e00b      	b.n	8005f7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9b4 	bl	80062d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	e007      	b.n	8005f7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f9b0 	bl	80062d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f7c:	e18b      	b.n	8006296 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7e:	bf00      	nop
    return;
 8005f80:	e189      	b.n	8006296 <HAL_UART_IRQHandler+0x5aa>
 8005f82:	bf00      	nop
 8005f84:	04000120 	.word	0x04000120
 8005f88:	08006d93 	.word	0x08006d93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f040 8144 	bne.w	800621e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 813d 	beq.w	800621e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8136 	beq.w	800621e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2210      	movs	r2, #16
 8005fb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	f040 80b2 	bne.w	800612e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 815d 	beq.w	800629a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fea:	429a      	cmp	r2, r3
 8005fec:	f080 8155 	bcs.w	800629a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006004:	f000 8085 	beq.w	8006112 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800601c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006036:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800603e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800604a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1da      	bne.n	8006008 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3308      	adds	r3, #8
 8006072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006076:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800607a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800607e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e1      	bne.n	8006052 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800609e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3308      	adds	r3, #8
 80060ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e3      	bne.n	800608e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e2:	f023 0310 	bic.w	r3, r3, #16
 80060e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80060f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e4      	bne.n	80060d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4618      	mov	r0, r3
 800610e:	f7fc fef2 	bl	8002ef6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800611e:	b29b      	uxth	r3, r3
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	b29b      	uxth	r3, r3
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8de 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800612c:	e0b5      	b.n	800629a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800613a:	b29b      	uxth	r3, r3
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80a7 	beq.w	800629e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80a2 	beq.w	800629e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800616e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800617c:	647b      	str	r3, [r7, #68]	; 0x44
 800617e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e4      	bne.n	800615a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3308      	adds	r3, #8
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	623b      	str	r3, [r7, #32]
   return(result);
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061b4:	633a      	str	r2, [r7, #48]	; 0x30
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e3      	bne.n	8006190 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0310 	bic.w	r3, r3, #16
 80061ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	69b9      	ldr	r1, [r7, #24]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	617b      	str	r3, [r7, #20]
   return(result);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e4      	bne.n	80061da <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f866 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800621c:	e03f      	b.n	800629e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00e      	beq.n	8006248 <HAL_UART_IRQHandler+0x55c>
 800622a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800622e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800623e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f85d 	bl	8006300 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006246:	e02d      	b.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00e      	beq.n	8006272 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01c      	beq.n	80062a2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
    }
    return;
 8006270:	e017      	b.n	80062a2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d012      	beq.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
 800627e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00c      	beq.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fd97 	bl	8006dbe <UART_EndTransmit_IT>
    return;
 8006290:	e008      	b.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006292:	bf00      	nop
 8006294:	e006      	b.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006296:	bf00      	nop
 8006298:	e004      	b.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800629a:	bf00      	nop
 800629c:	e002      	b.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80062a2:	bf00      	nop
  }

}
 80062a4:	37e8      	adds	r7, #232	; 0xe8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop

080062ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4ba7      	ldr	r3, [pc, #668]	; (80065dc <UART_SetConfig+0x2c8>)
 8006340:	4013      	ands	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	6979      	ldr	r1, [r7, #20]
 8006348:	430b      	orrs	r3, r1
 800634a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	430a      	orrs	r2, r1
 8006384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a95      	ldr	r2, [pc, #596]	; (80065e0 <UART_SetConfig+0x2cc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d120      	bne.n	80063d2 <UART_SetConfig+0xbe>
 8006390:	4b94      	ldr	r3, [pc, #592]	; (80065e4 <UART_SetConfig+0x2d0>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b03      	cmp	r3, #3
 800639c:	d816      	bhi.n	80063cc <UART_SetConfig+0xb8>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x90>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	080063bb 	.word	0x080063bb
 80063b0:	080063c7 	.word	0x080063c7
 80063b4:	2301      	movs	r3, #1
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e14f      	b.n	800665a <UART_SetConfig+0x346>
 80063ba:	2302      	movs	r3, #2
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e14c      	b.n	800665a <UART_SetConfig+0x346>
 80063c0:	2304      	movs	r3, #4
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e149      	b.n	800665a <UART_SetConfig+0x346>
 80063c6:	2308      	movs	r3, #8
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e146      	b.n	800665a <UART_SetConfig+0x346>
 80063cc:	2310      	movs	r3, #16
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e143      	b.n	800665a <UART_SetConfig+0x346>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a84      	ldr	r2, [pc, #528]	; (80065e8 <UART_SetConfig+0x2d4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d132      	bne.n	8006442 <UART_SetConfig+0x12e>
 80063dc:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <UART_SetConfig+0x2d0>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d828      	bhi.n	800643c <UART_SetConfig+0x128>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0xdc>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006425 	.word	0x08006425
 80063f4:	0800643d 	.word	0x0800643d
 80063f8:	0800643d 	.word	0x0800643d
 80063fc:	0800643d 	.word	0x0800643d
 8006400:	08006431 	.word	0x08006431
 8006404:	0800643d 	.word	0x0800643d
 8006408:	0800643d 	.word	0x0800643d
 800640c:	0800643d 	.word	0x0800643d
 8006410:	0800642b 	.word	0x0800642b
 8006414:	0800643d 	.word	0x0800643d
 8006418:	0800643d 	.word	0x0800643d
 800641c:	0800643d 	.word	0x0800643d
 8006420:	08006437 	.word	0x08006437
 8006424:	2300      	movs	r3, #0
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e117      	b.n	800665a <UART_SetConfig+0x346>
 800642a:	2302      	movs	r3, #2
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e114      	b.n	800665a <UART_SetConfig+0x346>
 8006430:	2304      	movs	r3, #4
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e111      	b.n	800665a <UART_SetConfig+0x346>
 8006436:	2308      	movs	r3, #8
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e10e      	b.n	800665a <UART_SetConfig+0x346>
 800643c:	2310      	movs	r3, #16
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e10b      	b.n	800665a <UART_SetConfig+0x346>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a69      	ldr	r2, [pc, #420]	; (80065ec <UART_SetConfig+0x2d8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d120      	bne.n	800648e <UART_SetConfig+0x17a>
 800644c:	4b65      	ldr	r3, [pc, #404]	; (80065e4 <UART_SetConfig+0x2d0>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006456:	2b30      	cmp	r3, #48	; 0x30
 8006458:	d013      	beq.n	8006482 <UART_SetConfig+0x16e>
 800645a:	2b30      	cmp	r3, #48	; 0x30
 800645c:	d814      	bhi.n	8006488 <UART_SetConfig+0x174>
 800645e:	2b20      	cmp	r3, #32
 8006460:	d009      	beq.n	8006476 <UART_SetConfig+0x162>
 8006462:	2b20      	cmp	r3, #32
 8006464:	d810      	bhi.n	8006488 <UART_SetConfig+0x174>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <UART_SetConfig+0x15c>
 800646a:	2b10      	cmp	r3, #16
 800646c:	d006      	beq.n	800647c <UART_SetConfig+0x168>
 800646e:	e00b      	b.n	8006488 <UART_SetConfig+0x174>
 8006470:	2300      	movs	r3, #0
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e0f1      	b.n	800665a <UART_SetConfig+0x346>
 8006476:	2302      	movs	r3, #2
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e0ee      	b.n	800665a <UART_SetConfig+0x346>
 800647c:	2304      	movs	r3, #4
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e0eb      	b.n	800665a <UART_SetConfig+0x346>
 8006482:	2308      	movs	r3, #8
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e0e8      	b.n	800665a <UART_SetConfig+0x346>
 8006488:	2310      	movs	r3, #16
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e0e5      	b.n	800665a <UART_SetConfig+0x346>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a57      	ldr	r2, [pc, #348]	; (80065f0 <UART_SetConfig+0x2dc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d120      	bne.n	80064da <UART_SetConfig+0x1c6>
 8006498:	4b52      	ldr	r3, [pc, #328]	; (80065e4 <UART_SetConfig+0x2d0>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a2:	2bc0      	cmp	r3, #192	; 0xc0
 80064a4:	d013      	beq.n	80064ce <UART_SetConfig+0x1ba>
 80064a6:	2bc0      	cmp	r3, #192	; 0xc0
 80064a8:	d814      	bhi.n	80064d4 <UART_SetConfig+0x1c0>
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d009      	beq.n	80064c2 <UART_SetConfig+0x1ae>
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d810      	bhi.n	80064d4 <UART_SetConfig+0x1c0>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <UART_SetConfig+0x1a8>
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d006      	beq.n	80064c8 <UART_SetConfig+0x1b4>
 80064ba:	e00b      	b.n	80064d4 <UART_SetConfig+0x1c0>
 80064bc:	2300      	movs	r3, #0
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e0cb      	b.n	800665a <UART_SetConfig+0x346>
 80064c2:	2302      	movs	r3, #2
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e0c8      	b.n	800665a <UART_SetConfig+0x346>
 80064c8:	2304      	movs	r3, #4
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e0c5      	b.n	800665a <UART_SetConfig+0x346>
 80064ce:	2308      	movs	r3, #8
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e0c2      	b.n	800665a <UART_SetConfig+0x346>
 80064d4:	2310      	movs	r3, #16
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e0bf      	b.n	800665a <UART_SetConfig+0x346>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a45      	ldr	r2, [pc, #276]	; (80065f4 <UART_SetConfig+0x2e0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d125      	bne.n	8006530 <UART_SetConfig+0x21c>
 80064e4:	4b3f      	ldr	r3, [pc, #252]	; (80065e4 <UART_SetConfig+0x2d0>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f2:	d017      	beq.n	8006524 <UART_SetConfig+0x210>
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f8:	d817      	bhi.n	800652a <UART_SetConfig+0x216>
 80064fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fe:	d00b      	beq.n	8006518 <UART_SetConfig+0x204>
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d811      	bhi.n	800652a <UART_SetConfig+0x216>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <UART_SetConfig+0x1fe>
 800650a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650e:	d006      	beq.n	800651e <UART_SetConfig+0x20a>
 8006510:	e00b      	b.n	800652a <UART_SetConfig+0x216>
 8006512:	2300      	movs	r3, #0
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e0a0      	b.n	800665a <UART_SetConfig+0x346>
 8006518:	2302      	movs	r3, #2
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e09d      	b.n	800665a <UART_SetConfig+0x346>
 800651e:	2304      	movs	r3, #4
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e09a      	b.n	800665a <UART_SetConfig+0x346>
 8006524:	2308      	movs	r3, #8
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e097      	b.n	800665a <UART_SetConfig+0x346>
 800652a:	2310      	movs	r3, #16
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e094      	b.n	800665a <UART_SetConfig+0x346>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a30      	ldr	r2, [pc, #192]	; (80065f8 <UART_SetConfig+0x2e4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d125      	bne.n	8006586 <UART_SetConfig+0x272>
 800653a:	4b2a      	ldr	r3, [pc, #168]	; (80065e4 <UART_SetConfig+0x2d0>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006548:	d017      	beq.n	800657a <UART_SetConfig+0x266>
 800654a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800654e:	d817      	bhi.n	8006580 <UART_SetConfig+0x26c>
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006554:	d00b      	beq.n	800656e <UART_SetConfig+0x25a>
 8006556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655a:	d811      	bhi.n	8006580 <UART_SetConfig+0x26c>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <UART_SetConfig+0x254>
 8006560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006564:	d006      	beq.n	8006574 <UART_SetConfig+0x260>
 8006566:	e00b      	b.n	8006580 <UART_SetConfig+0x26c>
 8006568:	2301      	movs	r3, #1
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e075      	b.n	800665a <UART_SetConfig+0x346>
 800656e:	2302      	movs	r3, #2
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e072      	b.n	800665a <UART_SetConfig+0x346>
 8006574:	2304      	movs	r3, #4
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e06f      	b.n	800665a <UART_SetConfig+0x346>
 800657a:	2308      	movs	r3, #8
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e06c      	b.n	800665a <UART_SetConfig+0x346>
 8006580:	2310      	movs	r3, #16
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e069      	b.n	800665a <UART_SetConfig+0x346>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <UART_SetConfig+0x2e8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d137      	bne.n	8006600 <UART_SetConfig+0x2ec>
 8006590:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <UART_SetConfig+0x2d0>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800659a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800659e:	d017      	beq.n	80065d0 <UART_SetConfig+0x2bc>
 80065a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065a4:	d817      	bhi.n	80065d6 <UART_SetConfig+0x2c2>
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065aa:	d00b      	beq.n	80065c4 <UART_SetConfig+0x2b0>
 80065ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b0:	d811      	bhi.n	80065d6 <UART_SetConfig+0x2c2>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <UART_SetConfig+0x2aa>
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ba:	d006      	beq.n	80065ca <UART_SetConfig+0x2b6>
 80065bc:	e00b      	b.n	80065d6 <UART_SetConfig+0x2c2>
 80065be:	2300      	movs	r3, #0
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e04a      	b.n	800665a <UART_SetConfig+0x346>
 80065c4:	2302      	movs	r3, #2
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e047      	b.n	800665a <UART_SetConfig+0x346>
 80065ca:	2304      	movs	r3, #4
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e044      	b.n	800665a <UART_SetConfig+0x346>
 80065d0:	2308      	movs	r3, #8
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e041      	b.n	800665a <UART_SetConfig+0x346>
 80065d6:	2310      	movs	r3, #16
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e03e      	b.n	800665a <UART_SetConfig+0x346>
 80065dc:	efff69f3 	.word	0xefff69f3
 80065e0:	40011000 	.word	0x40011000
 80065e4:	40023800 	.word	0x40023800
 80065e8:	40004400 	.word	0x40004400
 80065ec:	40004800 	.word	0x40004800
 80065f0:	40004c00 	.word	0x40004c00
 80065f4:	40005000 	.word	0x40005000
 80065f8:	40011400 	.word	0x40011400
 80065fc:	40007800 	.word	0x40007800
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a71      	ldr	r2, [pc, #452]	; (80067cc <UART_SetConfig+0x4b8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d125      	bne.n	8006656 <UART_SetConfig+0x342>
 800660a:	4b71      	ldr	r3, [pc, #452]	; (80067d0 <UART_SetConfig+0x4bc>)
 800660c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006614:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006618:	d017      	beq.n	800664a <UART_SetConfig+0x336>
 800661a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800661e:	d817      	bhi.n	8006650 <UART_SetConfig+0x33c>
 8006620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006624:	d00b      	beq.n	800663e <UART_SetConfig+0x32a>
 8006626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662a:	d811      	bhi.n	8006650 <UART_SetConfig+0x33c>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <UART_SetConfig+0x324>
 8006630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006634:	d006      	beq.n	8006644 <UART_SetConfig+0x330>
 8006636:	e00b      	b.n	8006650 <UART_SetConfig+0x33c>
 8006638:	2300      	movs	r3, #0
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e00d      	b.n	800665a <UART_SetConfig+0x346>
 800663e:	2302      	movs	r3, #2
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e00a      	b.n	800665a <UART_SetConfig+0x346>
 8006644:	2304      	movs	r3, #4
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e007      	b.n	800665a <UART_SetConfig+0x346>
 800664a:	2308      	movs	r3, #8
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e004      	b.n	800665a <UART_SetConfig+0x346>
 8006650:	2310      	movs	r3, #16
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e001      	b.n	800665a <UART_SetConfig+0x346>
 8006656:	2310      	movs	r3, #16
 8006658:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006662:	d15a      	bne.n	800671a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006664:	7ffb      	ldrb	r3, [r7, #31]
 8006666:	2b08      	cmp	r3, #8
 8006668:	d827      	bhi.n	80066ba <UART_SetConfig+0x3a6>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <UART_SetConfig+0x35c>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	08006695 	.word	0x08006695
 8006674:	0800669d 	.word	0x0800669d
 8006678:	080066a5 	.word	0x080066a5
 800667c:	080066bb 	.word	0x080066bb
 8006680:	080066ab 	.word	0x080066ab
 8006684:	080066bb 	.word	0x080066bb
 8006688:	080066bb 	.word	0x080066bb
 800668c:	080066bb 	.word	0x080066bb
 8006690:	080066b3 	.word	0x080066b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006694:	f7fd fcf6 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8006698:	61b8      	str	r0, [r7, #24]
        break;
 800669a:	e013      	b.n	80066c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800669c:	f7fd fd06 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 80066a0:	61b8      	str	r0, [r7, #24]
        break;
 80066a2:	e00f      	b.n	80066c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a4:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <UART_SetConfig+0x4c0>)
 80066a6:	61bb      	str	r3, [r7, #24]
        break;
 80066a8:	e00c      	b.n	80066c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066aa:	f7fd fbfd 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 80066ae:	61b8      	str	r0, [r7, #24]
        break;
 80066b0:	e008      	b.n	80066c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b6:	61bb      	str	r3, [r7, #24]
        break;
 80066b8:	e004      	b.n	80066c4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	77bb      	strb	r3, [r7, #30]
        break;
 80066c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d074      	beq.n	80067b4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	005a      	lsls	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	441a      	add	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	fbb2 f3f3 	udiv	r3, r2, r3
 80066de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b0f      	cmp	r3, #15
 80066e4:	d916      	bls.n	8006714 <UART_SetConfig+0x400>
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ec:	d212      	bcs.n	8006714 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f023 030f 	bic.w	r3, r3, #15
 80066f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	b29a      	uxth	r2, r3
 8006704:	89fb      	ldrh	r3, [r7, #14]
 8006706:	4313      	orrs	r3, r2
 8006708:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	89fa      	ldrh	r2, [r7, #14]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	e04f      	b.n	80067b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	77bb      	strb	r3, [r7, #30]
 8006718:	e04c      	b.n	80067b4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800671a:	7ffb      	ldrb	r3, [r7, #31]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d828      	bhi.n	8006772 <UART_SetConfig+0x45e>
 8006720:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x414>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006773 	.word	0x08006773
 8006738:	08006763 	.word	0x08006763
 800673c:	08006773 	.word	0x08006773
 8006740:	08006773 	.word	0x08006773
 8006744:	08006773 	.word	0x08006773
 8006748:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fd fc9a 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8006750:	61b8      	str	r0, [r7, #24]
        break;
 8006752:	e013      	b.n	800677c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fd fcaa 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 8006758:	61b8      	str	r0, [r7, #24]
        break;
 800675a:	e00f      	b.n	800677c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <UART_SetConfig+0x4c0>)
 800675e:	61bb      	str	r3, [r7, #24]
        break;
 8006760:	e00c      	b.n	800677c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fd fba1 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8006766:	61b8      	str	r0, [r7, #24]
        break;
 8006768:	e008      	b.n	800677c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	61bb      	str	r3, [r7, #24]
        break;
 8006770:	e004      	b.n	800677c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	77bb      	strb	r3, [r7, #30]
        break;
 800677a:	bf00      	nop
    }

    if (pclk != 0U)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d018      	beq.n	80067b4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	085a      	lsrs	r2, r3, #1
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	441a      	add	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b0f      	cmp	r3, #15
 800679a:	d909      	bls.n	80067b0 <UART_SetConfig+0x49c>
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a2:	d205      	bcs.n	80067b0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60da      	str	r2, [r3, #12]
 80067ae:	e001      	b.n	80067b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40007c00 	.word	0x40007c00
 80067d0:	40023800 	.word	0x40023800
 80067d4:	00f42400 	.word	0x00f42400

080067d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01a      	beq.n	80068ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d6:	d10a      	bne.n	80068ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af02      	add	r7, sp, #8
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800692c:	f7fb f896 	bl	8001a5c <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d10e      	bne.n	800695e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f82d 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e023      	b.n	80069a6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b04      	cmp	r3, #4
 800696a:	d10e      	bne.n	800698a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f817 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e00d      	b.n	80069a6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b09c      	sub	sp, #112	; 0x70
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069be:	e0a5      	b.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c6:	f000 80a1 	beq.w	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fb f847 	bl	8001a5c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80069da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d13e      	bne.n	8006a5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f4:	667b      	str	r3, [r7, #100]	; 0x64
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	663b      	str	r3, [r7, #96]	; 0x60
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e067      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d04f      	beq.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a7a:	d147      	bne.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ad8:	623a      	str	r2, [r7, #32]
 8006ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	69f9      	ldr	r1, [r7, #28]
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e010      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	f43f af4a 	beq.w	80069c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3770      	adds	r7, #112	; 0x70
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b097      	sub	sp, #92	; 0x5c
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6a:	d10e      	bne.n	8006b8a <UART_Start_Receive_IT+0x52>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <UART_Start_Receive_IT+0x48>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b7e:	e02d      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	22ff      	movs	r2, #255	; 0xff
 8006b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b88:	e028      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10d      	bne.n	8006bae <UART_Start_Receive_IT+0x76>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <UART_Start_Receive_IT+0x6c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ba2:	e01b      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	227f      	movs	r2, #127	; 0x7f
 8006ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bac:	e016      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bb6:	d10d      	bne.n	8006bd4 <UART_Start_Receive_IT+0x9c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <UART_Start_Receive_IT+0x92>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	227f      	movs	r2, #127	; 0x7f
 8006bc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bc8:	e008      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	223f      	movs	r2, #63	; 0x3f
 8006bce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bd2:	e003      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2222      	movs	r2, #34	; 0x22
 8006be8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	657b      	str	r3, [r7, #84]	; 0x54
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c26:	d107      	bne.n	8006c38 <UART_Start_Receive_IT+0x100>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a24      	ldr	r2, [pc, #144]	; (8006cc4 <UART_Start_Receive_IT+0x18c>)
 8006c34:	665a      	str	r2, [r3, #100]	; 0x64
 8006c36:	e002      	b.n	8006c3e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <UART_Start_Receive_IT+0x190>)
 8006c3c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d019      	beq.n	8006c82 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_Start_Receive_IT+0x116>
 8006c80:	e018      	b.n	8006cb4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f043 0320 	orr.w	r3, r3, #32
 8006c96:	653b      	str	r3, [r7, #80]	; 0x50
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	623b      	str	r3, [r7, #32]
 8006ca2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	69f9      	ldr	r1, [r7, #28]
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	375c      	adds	r7, #92	; 0x5c
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	08006f6f 	.word	0x08006f6f
 8006cc8:	08006e13 	.word	0x08006e13

08006ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b095      	sub	sp, #84	; 0x54
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8006cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e6      	bne.n	8006cd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f023 0301 	bic.w	r3, r3, #1
 8006d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3308      	adds	r3, #8
 8006d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e5      	bne.n	8006d06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d118      	bne.n	8006d74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	647b      	str	r3, [r7, #68]	; 0x44
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6979      	ldr	r1, [r7, #20]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e6      	bne.n	8006d42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006d86:	bf00      	nop
 8006d88:	3754      	adds	r7, #84	; 0x54
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff fa8f 	bl	80062d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b088      	sub	sp, #32
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6979      	ldr	r1, [r7, #20]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	613b      	str	r3, [r7, #16]
   return(result);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fa51 	bl	80062ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0a:	bf00      	nop
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b096      	sub	sp, #88	; 0x58
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e28:	2b22      	cmp	r3, #34	; 0x22
 8006e2a:	f040 8094 	bne.w	8006f56 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006e3c:	b2d9      	uxtb	r1, r3
 8006e3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e48:	400a      	ands	r2, r1
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d177      	bne.n	8006f66 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
 8006e96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e6      	bne.n	8006e76 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ec8:	633a      	str	r2, [r7, #48]	; 0x30
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d12e      	bne.n	8006f4e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0310 	bic.w	r3, r3, #16
 8006f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	69b9      	ldr	r1, [r7, #24]
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	617b      	str	r3, [r7, #20]
   return(result);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e6      	bne.n	8006ef6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d103      	bne.n	8006f3e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff f9ce 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f4c:	e00b      	b.n	8006f66 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff f9b6 	bl	80062c0 <HAL_UART_RxCpltCallback>
}
 8006f54:	e007      	b.n	8006f66 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699a      	ldr	r2, [r3, #24]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0208 	orr.w	r2, r2, #8
 8006f64:	619a      	str	r2, [r3, #24]
}
 8006f66:	bf00      	nop
 8006f68:	3758      	adds	r7, #88	; 0x58
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b096      	sub	sp, #88	; 0x58
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f84:	2b22      	cmp	r3, #34	; 0x22
 8006f86:	f040 8094 	bne.w	80070b2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f9a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006f9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d177      	bne.n	80070c2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e6      	bne.n	8006fd2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	61fb      	str	r3, [r7, #28]
   return(result);
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	64bb      	str	r3, [r7, #72]	; 0x48
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800702a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007048:	2b01      	cmp	r3, #1
 800704a:	d12e      	bne.n	80070aa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f023 0310 	bic.w	r3, r3, #16
 8007066:	647b      	str	r3, [r7, #68]	; 0x44
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6979      	ldr	r1, [r7, #20]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	613b      	str	r3, [r7, #16]
   return(result);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f003 0310 	and.w	r3, r3, #16
 800708e:	2b10      	cmp	r3, #16
 8007090:	d103      	bne.n	800709a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2210      	movs	r2, #16
 8007098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff f920 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070a8:	e00b      	b.n	80070c2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff f908 	bl	80062c0 <HAL_UART_RxCpltCallback>
}
 80070b0:	e007      	b.n	80070c2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0208 	orr.w	r2, r2, #8
 80070c0:	619a      	str	r2, [r3, #24]
}
 80070c2:	bf00      	nop
 80070c4:	3758      	adds	r7, #88	; 0x58
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e03c      	b.n	8007156 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d106      	bne.n	80070f6 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fa f97d 	bl	80013f0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f85c 	bl	80071cc <USART_SetConfig>
 8007114:	4603      	mov	r3, r0
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e01b      	b.n	8007156 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800712c:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800713c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0201 	orr.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9be 	bl	80074d0 <USART_CheckIdleState>
 8007154:	4603      	mov	r3, r0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	4613      	mov	r3, r2
 800716c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800716e:	e018      	b.n	80071a2 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007176:	d014      	beq.n	80071a2 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007178:	f7fa fc70 	bl	8001a5c <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <USART_WaitOnFlagUntilTimeout+0x30>
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e00f      	b.n	80071c2 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4013      	ands	r3, r2
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	bf0c      	ite	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	2300      	movne	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d0d7      	beq.n	8007170 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80071d8:	2300      	movs	r3, #0
 80071da:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	4bae      	ldr	r3, [pc, #696]	; (80074b4 <USART_SetConfig+0x2e8>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	430b      	orrs	r3, r1
 8007204:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8007206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800720a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	4313      	orrs	r3, r2
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a9b      	ldr	r2, [pc, #620]	; (80074b8 <USART_SetConfig+0x2ec>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d121      	bne.n	8007292 <USART_SetConfig+0xc6>
 800724e:	4b9b      	ldr	r3, [pc, #620]	; (80074bc <USART_SetConfig+0x2f0>)
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	2b03      	cmp	r3, #3
 800725a:	d817      	bhi.n	800728c <USART_SetConfig+0xc0>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <USART_SetConfig+0x98>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007275 	.word	0x08007275
 8007268:	08007281 	.word	0x08007281
 800726c:	0800727b 	.word	0x0800727b
 8007270:	08007287 	.word	0x08007287
 8007274:	2301      	movs	r3, #1
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e096      	b.n	80073a8 <USART_SetConfig+0x1dc>
 800727a:	2302      	movs	r3, #2
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e093      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007280:	2304      	movs	r3, #4
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e090      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007286:	2308      	movs	r3, #8
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e08d      	b.n	80073a8 <USART_SetConfig+0x1dc>
 800728c:	2310      	movs	r3, #16
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e08a      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a8a      	ldr	r2, [pc, #552]	; (80074c0 <USART_SetConfig+0x2f4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d132      	bne.n	8007302 <USART_SetConfig+0x136>
 800729c:	4b87      	ldr	r3, [pc, #540]	; (80074bc <USART_SetConfig+0x2f0>)
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a2:	f003 030c 	and.w	r3, r3, #12
 80072a6:	2b0c      	cmp	r3, #12
 80072a8:	d828      	bhi.n	80072fc <USART_SetConfig+0x130>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <USART_SetConfig+0xe4>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	080072fd 	.word	0x080072fd
 80072b8:	080072fd 	.word	0x080072fd
 80072bc:	080072fd 	.word	0x080072fd
 80072c0:	080072f1 	.word	0x080072f1
 80072c4:	080072fd 	.word	0x080072fd
 80072c8:	080072fd 	.word	0x080072fd
 80072cc:	080072fd 	.word	0x080072fd
 80072d0:	080072eb 	.word	0x080072eb
 80072d4:	080072fd 	.word	0x080072fd
 80072d8:	080072fd 	.word	0x080072fd
 80072dc:	080072fd 	.word	0x080072fd
 80072e0:	080072f7 	.word	0x080072f7
 80072e4:	2300      	movs	r3, #0
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e05e      	b.n	80073a8 <USART_SetConfig+0x1dc>
 80072ea:	2302      	movs	r3, #2
 80072ec:	77fb      	strb	r3, [r7, #31]
 80072ee:	e05b      	b.n	80073a8 <USART_SetConfig+0x1dc>
 80072f0:	2304      	movs	r3, #4
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e058      	b.n	80073a8 <USART_SetConfig+0x1dc>
 80072f6:	2308      	movs	r3, #8
 80072f8:	77fb      	strb	r3, [r7, #31]
 80072fa:	e055      	b.n	80073a8 <USART_SetConfig+0x1dc>
 80072fc:	2310      	movs	r3, #16
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e052      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a6f      	ldr	r2, [pc, #444]	; (80074c4 <USART_SetConfig+0x2f8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d120      	bne.n	800734e <USART_SetConfig+0x182>
 800730c:	4b6b      	ldr	r3, [pc, #428]	; (80074bc <USART_SetConfig+0x2f0>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007316:	2b30      	cmp	r3, #48	; 0x30
 8007318:	d013      	beq.n	8007342 <USART_SetConfig+0x176>
 800731a:	2b30      	cmp	r3, #48	; 0x30
 800731c:	d814      	bhi.n	8007348 <USART_SetConfig+0x17c>
 800731e:	2b20      	cmp	r3, #32
 8007320:	d009      	beq.n	8007336 <USART_SetConfig+0x16a>
 8007322:	2b20      	cmp	r3, #32
 8007324:	d810      	bhi.n	8007348 <USART_SetConfig+0x17c>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <USART_SetConfig+0x164>
 800732a:	2b10      	cmp	r3, #16
 800732c:	d006      	beq.n	800733c <USART_SetConfig+0x170>
 800732e:	e00b      	b.n	8007348 <USART_SetConfig+0x17c>
 8007330:	2300      	movs	r3, #0
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e038      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007336:	2302      	movs	r3, #2
 8007338:	77fb      	strb	r3, [r7, #31]
 800733a:	e035      	b.n	80073a8 <USART_SetConfig+0x1dc>
 800733c:	2304      	movs	r3, #4
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e032      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007342:	2308      	movs	r3, #8
 8007344:	77fb      	strb	r3, [r7, #31]
 8007346:	e02f      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007348:	2310      	movs	r3, #16
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e02c      	b.n	80073a8 <USART_SetConfig+0x1dc>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a5d      	ldr	r2, [pc, #372]	; (80074c8 <USART_SetConfig+0x2fc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d125      	bne.n	80073a4 <USART_SetConfig+0x1d8>
 8007358:	4b58      	ldr	r3, [pc, #352]	; (80074bc <USART_SetConfig+0x2f0>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007366:	d017      	beq.n	8007398 <USART_SetConfig+0x1cc>
 8007368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800736c:	d817      	bhi.n	800739e <USART_SetConfig+0x1d2>
 800736e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007372:	d00b      	beq.n	800738c <USART_SetConfig+0x1c0>
 8007374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007378:	d811      	bhi.n	800739e <USART_SetConfig+0x1d2>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <USART_SetConfig+0x1ba>
 800737e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007382:	d006      	beq.n	8007392 <USART_SetConfig+0x1c6>
 8007384:	e00b      	b.n	800739e <USART_SetConfig+0x1d2>
 8007386:	2301      	movs	r3, #1
 8007388:	77fb      	strb	r3, [r7, #31]
 800738a:	e00d      	b.n	80073a8 <USART_SetConfig+0x1dc>
 800738c:	2302      	movs	r3, #2
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e00a      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007392:	2304      	movs	r3, #4
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e007      	b.n	80073a8 <USART_SetConfig+0x1dc>
 8007398:	2308      	movs	r3, #8
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e004      	b.n	80073a8 <USART_SetConfig+0x1dc>
 800739e:	2310      	movs	r3, #16
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e001      	b.n	80073a8 <USART_SetConfig+0x1dc>
 80073a4:	2310      	movs	r3, #16
 80073a6:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80073a8:	7ffb      	ldrb	r3, [r7, #31]
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d857      	bhi.n	800745e <USART_SetConfig+0x292>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <USART_SetConfig+0x1e8>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073f7 	.word	0x080073f7
 80073bc:	08007415 	.word	0x08007415
 80073c0:	0800745f 	.word	0x0800745f
 80073c4:	0800742b 	.word	0x0800742b
 80073c8:	0800745f 	.word	0x0800745f
 80073cc:	0800745f 	.word	0x0800745f
 80073d0:	0800745f 	.word	0x0800745f
 80073d4:	08007449 	.word	0x08007449
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7fc fe54 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 80073dc:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	005a      	lsls	r2, r3, #1
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	441a      	add	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f2:	61bb      	str	r3, [r7, #24]
      break;
 80073f4:	e036      	b.n	8007464 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80073f6:	f7fc fe59 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 80073fa:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	005a      	lsls	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	441a      	add	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007410:	61bb      	str	r3, [r7, #24]
      break;
 8007412:	e027      	b.n	8007464 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	085a      	lsrs	r2, r3, #1
 800741a:	4b2c      	ldr	r3, [pc, #176]	; (80074cc <USART_SetConfig+0x300>)
 800741c:	4413      	add	r3, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6852      	ldr	r2, [r2, #4]
 8007422:	fbb3 f3f2 	udiv	r3, r3, r2
 8007426:	61bb      	str	r3, [r7, #24]
      break;
 8007428:	e01c      	b.n	8007464 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800742a:	f7fc fd3d 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 800742e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	005a      	lsls	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	085b      	lsrs	r3, r3, #1
 800743a:	441a      	add	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	61bb      	str	r3, [r7, #24]
      break;
 8007446:	e00d      	b.n	8007464 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	085b      	lsrs	r3, r3, #1
 800744e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	fbb2 f3f3 	udiv	r3, r2, r3
 800745a:	61bb      	str	r3, [r7, #24]
      break;
 800745c:	e002      	b.n	8007464 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	77bb      	strb	r3, [r7, #30]
      break;
 8007462:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b0f      	cmp	r3, #15
 8007468:	d916      	bls.n	8007498 <USART_SetConfig+0x2cc>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007470:	d212      	bcs.n	8007498 <USART_SetConfig+0x2cc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f023 030f 	bic.w	r3, r3, #15
 800747a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	b29a      	uxth	r2, r3
 8007488:	89fb      	ldrh	r3, [r7, #14]
 800748a:	4313      	orrs	r3, r2
 800748c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	89fa      	ldrh	r2, [r7, #14]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	e001      	b.n	800749c <USART_SetConfig+0x2d0>
  }
  else
  {
    ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80074a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	efff69f3 	.word	0xefff69f3
 80074b8:	40011000 	.word	0x40011000
 80074bc:	40023800 	.word	0x40023800
 80074c0:	40004400 	.word	0x40004400
 80074c4:	40004800 	.word	0x40004800
 80074c8:	40011400 	.word	0x40011400
 80074cc:	01e84800 	.word	0x01e84800

080074d0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074de:	f7fa fabd 	bl	8001a5c <HAL_GetTick>
 80074e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d10e      	bne.n	8007510 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80074f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fe2c 	bl	800715e <USART_WaitOnFlagUntilTimeout>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e01e      	b.n	800754e <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b04      	cmp	r3, #4
 800751c:	d10e      	bne.n	800753c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800751e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff fe16 	bl	800715e <USART_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e008      	b.n	800754e <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007558:	b084      	sub	sp, #16
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	f107 001c 	add.w	r0, r7, #28
 8007566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2b01      	cmp	r3, #1
 800756e:	d120      	bne.n	80075b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	4b20      	ldr	r3, [pc, #128]	; (8007604 <USB_CoreInit+0xac>)
 8007582:	4013      	ands	r3, r2
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007596:	2b01      	cmp	r3, #1
 8007598:	d105      	bne.n	80075a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa92 	bl	8007ad0 <USB_CoreReset>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]
 80075b0:	e010      	b.n	80075d4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa86 	bl	8007ad0 <USB_CoreReset>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d10b      	bne.n	80075f2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f043 0206 	orr.w	r2, r3, #6
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f043 0220 	orr.w	r2, r3, #32
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075fe:	b004      	add	sp, #16
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	ffbdffbf 	.word	0xffbdffbf

08007608 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f023 0201 	bic.w	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d115      	bne.n	8007678 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007658:	2001      	movs	r0, #1
 800765a:	f7fa fa0b 	bl	8001a74 <HAL_Delay>
      ms++;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa25 	bl	8007ab4 <USB_GetMode>
 800766a:	4603      	mov	r3, r0
 800766c:	2b01      	cmp	r3, #1
 800766e:	d01e      	beq.n	80076ae <USB_SetCurrentMode+0x84>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b31      	cmp	r3, #49	; 0x31
 8007674:	d9f0      	bls.n	8007658 <USB_SetCurrentMode+0x2e>
 8007676:	e01a      	b.n	80076ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d115      	bne.n	80076aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800768a:	2001      	movs	r0, #1
 800768c:	f7fa f9f2 	bl	8001a74 <HAL_Delay>
      ms++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa0c 	bl	8007ab4 <USB_GetMode>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <USB_SetCurrentMode+0x84>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b31      	cmp	r3, #49	; 0x31
 80076a6:	d9f0      	bls.n	800768a <USB_SetCurrentMode+0x60>
 80076a8:	e001      	b.n	80076ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e005      	b.n	80076ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b32      	cmp	r3, #50	; 0x32
 80076b2:	d101      	bne.n	80076b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e000      	b.n	80076ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076c4:	b084      	sub	sp, #16
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	e009      	b.n	80076f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	3340      	adds	r3, #64	; 0x40
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	3301      	adds	r3, #1
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b0e      	cmp	r3, #14
 80076fc:	d9f2      	bls.n	80076e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d11c      	bne.n	800773e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007712:	f043 0302 	orr.w	r3, r3, #2
 8007716:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e005      	b.n	800774a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007750:	461a      	mov	r2, r3
 8007752:	2300      	movs	r3, #0
 8007754:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775c:	4619      	mov	r1, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007764:	461a      	mov	r2, r3
 8007766:	680b      	ldr	r3, [r1, #0]
 8007768:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10c      	bne.n	800778a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007776:	2100      	movs	r1, #0
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f961 	bl	8007a40 <USB_SetDevSpeed>
 800777e:	e008      	b.n	8007792 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007780:	2101      	movs	r1, #1
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f95c 	bl	8007a40 <USB_SetDevSpeed>
 8007788:	e003      	b.n	8007792 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800778a:	2103      	movs	r1, #3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f957 	bl	8007a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007792:	2110      	movs	r1, #16
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f8f3 	bl	8007980 <USB_FlushTxFifo>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f91d 	bl	80079e4 <USB_FlushRxFifo>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ba:	461a      	mov	r2, r3
 80077bc:	2300      	movs	r3, #0
 80077be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c6:	461a      	mov	r2, r3
 80077c8:	2300      	movs	r3, #0
 80077ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d2:	461a      	mov	r2, r3
 80077d4:	2300      	movs	r3, #0
 80077d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	e043      	b.n	8007866 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f4:	d118      	bne.n	8007828 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007808:	461a      	mov	r2, r3
 800780a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	e013      	b.n	800783a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781e:	461a      	mov	r2, r3
 8007820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	e008      	b.n	800783a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	461a      	mov	r2, r3
 8007836:	2300      	movs	r3, #0
 8007838:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007846:	461a      	mov	r2, r3
 8007848:	2300      	movs	r3, #0
 800784a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007858:	461a      	mov	r2, r3
 800785a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800785e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	3301      	adds	r3, #1
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	429a      	cmp	r2, r3
 800786c:	d3b7      	bcc.n	80077de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	e043      	b.n	80078fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800788a:	d118      	bne.n	80078be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	461a      	mov	r2, r3
 80078a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	e013      	b.n	80078d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	461a      	mov	r2, r3
 80078b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	e008      	b.n	80078d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	461a      	mov	r2, r3
 80078cc:	2300      	movs	r3, #0
 80078ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	461a      	mov	r2, r3
 80078de:	2300      	movs	r3, #0
 80078e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	461a      	mov	r2, r3
 80078f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3301      	adds	r3, #1
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	429a      	cmp	r2, r3
 8007902:	d3b7      	bcc.n	8007874 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007916:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007924:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	2b00      	cmp	r3, #0
 800792a:	d105      	bne.n	8007938 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	f043 0210 	orr.w	r2, r3, #16
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <USB_DevInit+0x2b4>)
 800793e:	4313      	orrs	r3, r2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	f043 0208 	orr.w	r2, r3, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d105      	bne.n	8007968 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <USB_DevInit+0x2b8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007974:	b004      	add	sp, #16
 8007976:	4770      	bx	lr
 8007978:	803c3800 	.word	0x803c3800
 800797c:	40000004 	.word	0x40000004

08007980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	4a12      	ldr	r2, [pc, #72]	; (80079e0 <USB_FlushTxFifo+0x60>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d901      	bls.n	800799e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e01a      	b.n	80079d4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	daf3      	bge.n	800798e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	019b      	lsls	r3, r3, #6
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	4a08      	ldr	r2, [pc, #32]	; (80079e0 <USB_FlushTxFifo+0x60>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d901      	bls.n	80079c6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e006      	b.n	80079d4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d0f1      	beq.n	80079b6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	00030d40 	.word	0x00030d40

080079e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	4a11      	ldr	r2, [pc, #68]	; (8007a3c <USB_FlushRxFifo+0x58>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d901      	bls.n	8007a00 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e017      	b.n	8007a30 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	daf3      	bge.n	80079f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <USB_FlushRxFifo+0x58>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d901      	bls.n	8007a22 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e006      	b.n	8007a30 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b10      	cmp	r3, #16
 8007a2c:	d0f1      	beq.n	8007a12 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	00030d40 	.word	0x00030d40

08007a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a60:	4313      	orrs	r3, r2
 8007a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a8c:	f023 0303 	bic.w	r3, r3, #3
 8007a90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa0:	f043 0302 	orr.w	r3, r3, #2
 8007aa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <USB_CoreReset+0x60>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d901      	bls.n	8007aec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e01a      	b.n	8007b22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	daf3      	bge.n	8007adc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f043 0201 	orr.w	r2, r3, #1
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3301      	adds	r3, #1
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <USB_CoreReset+0x60>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d901      	bls.n	8007b14 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e006      	b.n	8007b22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d0f1      	beq.n	8007b04 <USB_CoreReset+0x34>

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	00030d40 	.word	0x00030d40

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	2000000c 	.word	0x2000000c

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4d0d      	ldr	r5, [pc, #52]	; (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1b64      	subs	r4, r4, r5
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4d0b      	ldr	r5, [pc, #44]	; (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x44>)
 8007b54:	f000 fc62 	bl	800841c <_init>
 8007b58:	1b64      	subs	r4, r4, r5
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	080084bc 	.word	0x080084bc
 8007b7c:	080084bc 	.word	0x080084bc
 8007b80:	080084bc 	.word	0x080084bc
 8007b84:	080084c0 	.word	0x080084c0

08007b88 <memset>:
 8007b88:	4402      	add	r2, r0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d100      	bne.n	8007b92 <memset+0xa>
 8007b90:	4770      	bx	lr
 8007b92:	f803 1b01 	strb.w	r1, [r3], #1
 8007b96:	e7f9      	b.n	8007b8c <memset+0x4>

08007b98 <sniprintf>:
 8007b98:	b40c      	push	{r2, r3}
 8007b9a:	b530      	push	{r4, r5, lr}
 8007b9c:	4b17      	ldr	r3, [pc, #92]	; (8007bfc <sniprintf+0x64>)
 8007b9e:	1e0c      	subs	r4, r1, #0
 8007ba0:	681d      	ldr	r5, [r3, #0]
 8007ba2:	b09d      	sub	sp, #116	; 0x74
 8007ba4:	da08      	bge.n	8007bb8 <sniprintf+0x20>
 8007ba6:	238b      	movs	r3, #139	; 0x8b
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bae:	b01d      	add	sp, #116	; 0x74
 8007bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bb4:	b002      	add	sp, #8
 8007bb6:	4770      	bx	lr
 8007bb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007bbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007bc0:	bf14      	ite	ne
 8007bc2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007bc6:	4623      	moveq	r3, r4
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	9307      	str	r3, [sp, #28]
 8007bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bd0:	9002      	str	r0, [sp, #8]
 8007bd2:	9006      	str	r0, [sp, #24]
 8007bd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007bd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bda:	ab21      	add	r3, sp, #132	; 0x84
 8007bdc:	a902      	add	r1, sp, #8
 8007bde:	4628      	mov	r0, r5
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	f000 f869 	bl	8007cb8 <_svfiprintf_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	bfbc      	itt	lt
 8007bea:	238b      	movlt	r3, #139	; 0x8b
 8007bec:	602b      	strlt	r3, [r5, #0]
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	d0dd      	beq.n	8007bae <sniprintf+0x16>
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e7d9      	b.n	8007bae <sniprintf+0x16>
 8007bfa:	bf00      	nop
 8007bfc:	2000000c 	.word	0x2000000c

08007c00 <__ssputs_r>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	688e      	ldr	r6, [r1, #8]
 8007c06:	429e      	cmp	r6, r3
 8007c08:	4682      	mov	sl, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	4690      	mov	r8, r2
 8007c0e:	461f      	mov	r7, r3
 8007c10:	d838      	bhi.n	8007c84 <__ssputs_r+0x84>
 8007c12:	898a      	ldrh	r2, [r1, #12]
 8007c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c18:	d032      	beq.n	8007c80 <__ssputs_r+0x80>
 8007c1a:	6825      	ldr	r5, [r4, #0]
 8007c1c:	6909      	ldr	r1, [r1, #16]
 8007c1e:	eba5 0901 	sub.w	r9, r5, r1
 8007c22:	6965      	ldr	r5, [r4, #20]
 8007c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	444b      	add	r3, r9
 8007c30:	106d      	asrs	r5, r5, #1
 8007c32:	429d      	cmp	r5, r3
 8007c34:	bf38      	it	cc
 8007c36:	461d      	movcc	r5, r3
 8007c38:	0553      	lsls	r3, r2, #21
 8007c3a:	d531      	bpl.n	8007ca0 <__ssputs_r+0xa0>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f000 fb47 	bl	80082d0 <_malloc_r>
 8007c42:	4606      	mov	r6, r0
 8007c44:	b950      	cbnz	r0, 8007c5c <__ssputs_r+0x5c>
 8007c46:	230c      	movs	r3, #12
 8007c48:	f8ca 3000 	str.w	r3, [sl]
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5c:	6921      	ldr	r1, [r4, #16]
 8007c5e:	464a      	mov	r2, r9
 8007c60:	f000 fabe 	bl	80081e0 <memcpy>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	6126      	str	r6, [r4, #16]
 8007c72:	6165      	str	r5, [r4, #20]
 8007c74:	444e      	add	r6, r9
 8007c76:	eba5 0509 	sub.w	r5, r5, r9
 8007c7a:	6026      	str	r6, [r4, #0]
 8007c7c:	60a5      	str	r5, [r4, #8]
 8007c7e:	463e      	mov	r6, r7
 8007c80:	42be      	cmp	r6, r7
 8007c82:	d900      	bls.n	8007c86 <__ssputs_r+0x86>
 8007c84:	463e      	mov	r6, r7
 8007c86:	4632      	mov	r2, r6
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	f000 fab6 	bl	80081fc <memmove>
 8007c90:	68a3      	ldr	r3, [r4, #8]
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	1b9b      	subs	r3, r3, r6
 8007c96:	4432      	add	r2, r6
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	6022      	str	r2, [r4, #0]
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e7db      	b.n	8007c58 <__ssputs_r+0x58>
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	f000 fb6f 	bl	8008384 <_realloc_r>
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1e1      	bne.n	8007c70 <__ssputs_r+0x70>
 8007cac:	6921      	ldr	r1, [r4, #16]
 8007cae:	4650      	mov	r0, sl
 8007cb0:	f000 fabe 	bl	8008230 <_free_r>
 8007cb4:	e7c7      	b.n	8007c46 <__ssputs_r+0x46>
	...

08007cb8 <_svfiprintf_r>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4698      	mov	r8, r3
 8007cbe:	898b      	ldrh	r3, [r1, #12]
 8007cc0:	061b      	lsls	r3, r3, #24
 8007cc2:	b09d      	sub	sp, #116	; 0x74
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	4614      	mov	r4, r2
 8007cca:	d50e      	bpl.n	8007cea <_svfiprintf_r+0x32>
 8007ccc:	690b      	ldr	r3, [r1, #16]
 8007cce:	b963      	cbnz	r3, 8007cea <_svfiprintf_r+0x32>
 8007cd0:	2140      	movs	r1, #64	; 0x40
 8007cd2:	f000 fafd 	bl	80082d0 <_malloc_r>
 8007cd6:	6028      	str	r0, [r5, #0]
 8007cd8:	6128      	str	r0, [r5, #16]
 8007cda:	b920      	cbnz	r0, 8007ce6 <_svfiprintf_r+0x2e>
 8007cdc:	230c      	movs	r3, #12
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce4:	e0d1      	b.n	8007e8a <_svfiprintf_r+0x1d2>
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	616b      	str	r3, [r5, #20]
 8007cea:	2300      	movs	r3, #0
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	2320      	movs	r3, #32
 8007cf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cf8:	2330      	movs	r3, #48	; 0x30
 8007cfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ea4 <_svfiprintf_r+0x1ec>
 8007cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d02:	f04f 0901 	mov.w	r9, #1
 8007d06:	4623      	mov	r3, r4
 8007d08:	469a      	mov	sl, r3
 8007d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d0e:	b10a      	cbz	r2, 8007d14 <_svfiprintf_r+0x5c>
 8007d10:	2a25      	cmp	r2, #37	; 0x25
 8007d12:	d1f9      	bne.n	8007d08 <_svfiprintf_r+0x50>
 8007d14:	ebba 0b04 	subs.w	fp, sl, r4
 8007d18:	d00b      	beq.n	8007d32 <_svfiprintf_r+0x7a>
 8007d1a:	465b      	mov	r3, fp
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	4638      	mov	r0, r7
 8007d22:	f7ff ff6d 	bl	8007c00 <__ssputs_r>
 8007d26:	3001      	adds	r0, #1
 8007d28:	f000 80aa 	beq.w	8007e80 <_svfiprintf_r+0x1c8>
 8007d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d2e:	445a      	add	r2, fp
 8007d30:	9209      	str	r2, [sp, #36]	; 0x24
 8007d32:	f89a 3000 	ldrb.w	r3, [sl]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80a2 	beq.w	8007e80 <_svfiprintf_r+0x1c8>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d46:	f10a 0a01 	add.w	sl, sl, #1
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	9307      	str	r3, [sp, #28]
 8007d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d52:	931a      	str	r3, [sp, #104]	; 0x68
 8007d54:	4654      	mov	r4, sl
 8007d56:	2205      	movs	r2, #5
 8007d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5c:	4851      	ldr	r0, [pc, #324]	; (8007ea4 <_svfiprintf_r+0x1ec>)
 8007d5e:	f7f8 fa6f 	bl	8000240 <memchr>
 8007d62:	9a04      	ldr	r2, [sp, #16]
 8007d64:	b9d8      	cbnz	r0, 8007d9e <_svfiprintf_r+0xe6>
 8007d66:	06d0      	lsls	r0, r2, #27
 8007d68:	bf44      	itt	mi
 8007d6a:	2320      	movmi	r3, #32
 8007d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d70:	0711      	lsls	r1, r2, #28
 8007d72:	bf44      	itt	mi
 8007d74:	232b      	movmi	r3, #43	; 0x2b
 8007d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d80:	d015      	beq.n	8007dae <_svfiprintf_r+0xf6>
 8007d82:	9a07      	ldr	r2, [sp, #28]
 8007d84:	4654      	mov	r4, sl
 8007d86:	2000      	movs	r0, #0
 8007d88:	f04f 0c0a 	mov.w	ip, #10
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d92:	3b30      	subs	r3, #48	; 0x30
 8007d94:	2b09      	cmp	r3, #9
 8007d96:	d94e      	bls.n	8007e36 <_svfiprintf_r+0x17e>
 8007d98:	b1b0      	cbz	r0, 8007dc8 <_svfiprintf_r+0x110>
 8007d9a:	9207      	str	r2, [sp, #28]
 8007d9c:	e014      	b.n	8007dc8 <_svfiprintf_r+0x110>
 8007d9e:	eba0 0308 	sub.w	r3, r0, r8
 8007da2:	fa09 f303 	lsl.w	r3, r9, r3
 8007da6:	4313      	orrs	r3, r2
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	46a2      	mov	sl, r4
 8007dac:	e7d2      	b.n	8007d54 <_svfiprintf_r+0x9c>
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	1d19      	adds	r1, r3, #4
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	9103      	str	r1, [sp, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bfbb      	ittet	lt
 8007dba:	425b      	neglt	r3, r3
 8007dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8007dc0:	9307      	strge	r3, [sp, #28]
 8007dc2:	9307      	strlt	r3, [sp, #28]
 8007dc4:	bfb8      	it	lt
 8007dc6:	9204      	strlt	r2, [sp, #16]
 8007dc8:	7823      	ldrb	r3, [r4, #0]
 8007dca:	2b2e      	cmp	r3, #46	; 0x2e
 8007dcc:	d10c      	bne.n	8007de8 <_svfiprintf_r+0x130>
 8007dce:	7863      	ldrb	r3, [r4, #1]
 8007dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd2:	d135      	bne.n	8007e40 <_svfiprintf_r+0x188>
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	9203      	str	r2, [sp, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bfb8      	it	lt
 8007de0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007de4:	3402      	adds	r4, #2
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007eb4 <_svfiprintf_r+0x1fc>
 8007dec:	7821      	ldrb	r1, [r4, #0]
 8007dee:	2203      	movs	r2, #3
 8007df0:	4650      	mov	r0, sl
 8007df2:	f7f8 fa25 	bl	8000240 <memchr>
 8007df6:	b140      	cbz	r0, 8007e0a <_svfiprintf_r+0x152>
 8007df8:	2340      	movs	r3, #64	; 0x40
 8007dfa:	eba0 000a 	sub.w	r0, r0, sl
 8007dfe:	fa03 f000 	lsl.w	r0, r3, r0
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	4303      	orrs	r3, r0
 8007e06:	3401      	adds	r4, #1
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e0e:	4826      	ldr	r0, [pc, #152]	; (8007ea8 <_svfiprintf_r+0x1f0>)
 8007e10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e14:	2206      	movs	r2, #6
 8007e16:	f7f8 fa13 	bl	8000240 <memchr>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d038      	beq.n	8007e90 <_svfiprintf_r+0x1d8>
 8007e1e:	4b23      	ldr	r3, [pc, #140]	; (8007eac <_svfiprintf_r+0x1f4>)
 8007e20:	bb1b      	cbnz	r3, 8007e6a <_svfiprintf_r+0x1b2>
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	3307      	adds	r3, #7
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e30:	4433      	add	r3, r6
 8007e32:	9309      	str	r3, [sp, #36]	; 0x24
 8007e34:	e767      	b.n	8007d06 <_svfiprintf_r+0x4e>
 8007e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	e7a5      	b.n	8007d8c <_svfiprintf_r+0xd4>
 8007e40:	2300      	movs	r3, #0
 8007e42:	3401      	adds	r4, #1
 8007e44:	9305      	str	r3, [sp, #20]
 8007e46:	4619      	mov	r1, r3
 8007e48:	f04f 0c0a 	mov.w	ip, #10
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e52:	3a30      	subs	r2, #48	; 0x30
 8007e54:	2a09      	cmp	r2, #9
 8007e56:	d903      	bls.n	8007e60 <_svfiprintf_r+0x1a8>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0c5      	beq.n	8007de8 <_svfiprintf_r+0x130>
 8007e5c:	9105      	str	r1, [sp, #20]
 8007e5e:	e7c3      	b.n	8007de8 <_svfiprintf_r+0x130>
 8007e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e64:	4604      	mov	r4, r0
 8007e66:	2301      	movs	r3, #1
 8007e68:	e7f0      	b.n	8007e4c <_svfiprintf_r+0x194>
 8007e6a:	ab03      	add	r3, sp, #12
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <_svfiprintf_r+0x1f8>)
 8007e72:	a904      	add	r1, sp, #16
 8007e74:	4638      	mov	r0, r7
 8007e76:	f3af 8000 	nop.w
 8007e7a:	1c42      	adds	r2, r0, #1
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	d1d6      	bne.n	8007e2e <_svfiprintf_r+0x176>
 8007e80:	89ab      	ldrh	r3, [r5, #12]
 8007e82:	065b      	lsls	r3, r3, #25
 8007e84:	f53f af2c 	bmi.w	8007ce0 <_svfiprintf_r+0x28>
 8007e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e8a:	b01d      	add	sp, #116	; 0x74
 8007e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e90:	ab03      	add	r3, sp, #12
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	462a      	mov	r2, r5
 8007e96:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <_svfiprintf_r+0x1f8>)
 8007e98:	a904      	add	r1, sp, #16
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	f000 f87a 	bl	8007f94 <_printf_i>
 8007ea0:	e7eb      	b.n	8007e7a <_svfiprintf_r+0x1c2>
 8007ea2:	bf00      	nop
 8007ea4:	08008480 	.word	0x08008480
 8007ea8:	0800848a 	.word	0x0800848a
 8007eac:	00000000 	.word	0x00000000
 8007eb0:	08007c01 	.word	0x08007c01
 8007eb4:	08008486 	.word	0x08008486

08007eb8 <_printf_common>:
 8007eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	4699      	mov	r9, r3
 8007ec0:	688a      	ldr	r2, [r1, #8]
 8007ec2:	690b      	ldr	r3, [r1, #16]
 8007ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	bfb8      	it	lt
 8007ecc:	4613      	movlt	r3, r2
 8007ece:	6033      	str	r3, [r6, #0]
 8007ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	b10a      	cbz	r2, 8007ede <_printf_common+0x26>
 8007eda:	3301      	adds	r3, #1
 8007edc:	6033      	str	r3, [r6, #0]
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	0699      	lsls	r1, r3, #26
 8007ee2:	bf42      	ittt	mi
 8007ee4:	6833      	ldrmi	r3, [r6, #0]
 8007ee6:	3302      	addmi	r3, #2
 8007ee8:	6033      	strmi	r3, [r6, #0]
 8007eea:	6825      	ldr	r5, [r4, #0]
 8007eec:	f015 0506 	ands.w	r5, r5, #6
 8007ef0:	d106      	bne.n	8007f00 <_printf_common+0x48>
 8007ef2:	f104 0a19 	add.w	sl, r4, #25
 8007ef6:	68e3      	ldr	r3, [r4, #12]
 8007ef8:	6832      	ldr	r2, [r6, #0]
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	42ab      	cmp	r3, r5
 8007efe:	dc26      	bgt.n	8007f4e <_printf_common+0x96>
 8007f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f04:	1e13      	subs	r3, r2, #0
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	bf18      	it	ne
 8007f0a:	2301      	movne	r3, #1
 8007f0c:	0692      	lsls	r2, r2, #26
 8007f0e:	d42b      	bmi.n	8007f68 <_printf_common+0xb0>
 8007f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f14:	4649      	mov	r1, r9
 8007f16:	4638      	mov	r0, r7
 8007f18:	47c0      	blx	r8
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d01e      	beq.n	8007f5c <_printf_common+0xa4>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	68e5      	ldr	r5, [r4, #12]
 8007f22:	6832      	ldr	r2, [r6, #0]
 8007f24:	f003 0306 	and.w	r3, r3, #6
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	bf08      	it	eq
 8007f2c:	1aad      	subeq	r5, r5, r2
 8007f2e:	68a3      	ldr	r3, [r4, #8]
 8007f30:	6922      	ldr	r2, [r4, #16]
 8007f32:	bf0c      	ite	eq
 8007f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f38:	2500      	movne	r5, #0
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	bfc4      	itt	gt
 8007f3e:	1a9b      	subgt	r3, r3, r2
 8007f40:	18ed      	addgt	r5, r5, r3
 8007f42:	2600      	movs	r6, #0
 8007f44:	341a      	adds	r4, #26
 8007f46:	42b5      	cmp	r5, r6
 8007f48:	d11a      	bne.n	8007f80 <_printf_common+0xc8>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e008      	b.n	8007f60 <_printf_common+0xa8>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4652      	mov	r2, sl
 8007f52:	4649      	mov	r1, r9
 8007f54:	4638      	mov	r0, r7
 8007f56:	47c0      	blx	r8
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d103      	bne.n	8007f64 <_printf_common+0xac>
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f64:	3501      	adds	r5, #1
 8007f66:	e7c6      	b.n	8007ef6 <_printf_common+0x3e>
 8007f68:	18e1      	adds	r1, r4, r3
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	2030      	movs	r0, #48	; 0x30
 8007f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f72:	4422      	add	r2, r4
 8007f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	e7c7      	b.n	8007f10 <_printf_common+0x58>
 8007f80:	2301      	movs	r3, #1
 8007f82:	4622      	mov	r2, r4
 8007f84:	4649      	mov	r1, r9
 8007f86:	4638      	mov	r0, r7
 8007f88:	47c0      	blx	r8
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d0e6      	beq.n	8007f5c <_printf_common+0xa4>
 8007f8e:	3601      	adds	r6, #1
 8007f90:	e7d9      	b.n	8007f46 <_printf_common+0x8e>
	...

08007f94 <_printf_i>:
 8007f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	460c      	mov	r4, r1
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	7e27      	ldrb	r7, [r4, #24]
 8007f9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fa0:	2f78      	cmp	r7, #120	; 0x78
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	469a      	mov	sl, r3
 8007fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007faa:	d807      	bhi.n	8007fbc <_printf_i+0x28>
 8007fac:	2f62      	cmp	r7, #98	; 0x62
 8007fae:	d80a      	bhi.n	8007fc6 <_printf_i+0x32>
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	f000 80d8 	beq.w	8008166 <_printf_i+0x1d2>
 8007fb6:	2f58      	cmp	r7, #88	; 0x58
 8007fb8:	f000 80a3 	beq.w	8008102 <_printf_i+0x16e>
 8007fbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc4:	e03a      	b.n	800803c <_printf_i+0xa8>
 8007fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fca:	2b15      	cmp	r3, #21
 8007fcc:	d8f6      	bhi.n	8007fbc <_printf_i+0x28>
 8007fce:	a001      	add	r0, pc, #4	; (adr r0, 8007fd4 <_printf_i+0x40>)
 8007fd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	08008041 	.word	0x08008041
 8007fdc:	08007fbd 	.word	0x08007fbd
 8007fe0:	08007fbd 	.word	0x08007fbd
 8007fe4:	08007fbd 	.word	0x08007fbd
 8007fe8:	08007fbd 	.word	0x08007fbd
 8007fec:	08008041 	.word	0x08008041
 8007ff0:	08007fbd 	.word	0x08007fbd
 8007ff4:	08007fbd 	.word	0x08007fbd
 8007ff8:	08007fbd 	.word	0x08007fbd
 8007ffc:	08007fbd 	.word	0x08007fbd
 8008000:	0800814d 	.word	0x0800814d
 8008004:	08008071 	.word	0x08008071
 8008008:	0800812f 	.word	0x0800812f
 800800c:	08007fbd 	.word	0x08007fbd
 8008010:	08007fbd 	.word	0x08007fbd
 8008014:	0800816f 	.word	0x0800816f
 8008018:	08007fbd 	.word	0x08007fbd
 800801c:	08008071 	.word	0x08008071
 8008020:	08007fbd 	.word	0x08007fbd
 8008024:	08007fbd 	.word	0x08007fbd
 8008028:	08008137 	.word	0x08008137
 800802c:	680b      	ldr	r3, [r1, #0]
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	600a      	str	r2, [r1, #0]
 8008034:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800803c:	2301      	movs	r3, #1
 800803e:	e0a3      	b.n	8008188 <_printf_i+0x1f4>
 8008040:	6825      	ldr	r5, [r4, #0]
 8008042:	6808      	ldr	r0, [r1, #0]
 8008044:	062e      	lsls	r6, r5, #24
 8008046:	f100 0304 	add.w	r3, r0, #4
 800804a:	d50a      	bpl.n	8008062 <_printf_i+0xce>
 800804c:	6805      	ldr	r5, [r0, #0]
 800804e:	600b      	str	r3, [r1, #0]
 8008050:	2d00      	cmp	r5, #0
 8008052:	da03      	bge.n	800805c <_printf_i+0xc8>
 8008054:	232d      	movs	r3, #45	; 0x2d
 8008056:	426d      	negs	r5, r5
 8008058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800805c:	485e      	ldr	r0, [pc, #376]	; (80081d8 <_printf_i+0x244>)
 800805e:	230a      	movs	r3, #10
 8008060:	e019      	b.n	8008096 <_printf_i+0x102>
 8008062:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008066:	6805      	ldr	r5, [r0, #0]
 8008068:	600b      	str	r3, [r1, #0]
 800806a:	bf18      	it	ne
 800806c:	b22d      	sxthne	r5, r5
 800806e:	e7ef      	b.n	8008050 <_printf_i+0xbc>
 8008070:	680b      	ldr	r3, [r1, #0]
 8008072:	6825      	ldr	r5, [r4, #0]
 8008074:	1d18      	adds	r0, r3, #4
 8008076:	6008      	str	r0, [r1, #0]
 8008078:	0628      	lsls	r0, r5, #24
 800807a:	d501      	bpl.n	8008080 <_printf_i+0xec>
 800807c:	681d      	ldr	r5, [r3, #0]
 800807e:	e002      	b.n	8008086 <_printf_i+0xf2>
 8008080:	0669      	lsls	r1, r5, #25
 8008082:	d5fb      	bpl.n	800807c <_printf_i+0xe8>
 8008084:	881d      	ldrh	r5, [r3, #0]
 8008086:	4854      	ldr	r0, [pc, #336]	; (80081d8 <_printf_i+0x244>)
 8008088:	2f6f      	cmp	r7, #111	; 0x6f
 800808a:	bf0c      	ite	eq
 800808c:	2308      	moveq	r3, #8
 800808e:	230a      	movne	r3, #10
 8008090:	2100      	movs	r1, #0
 8008092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008096:	6866      	ldr	r6, [r4, #4]
 8008098:	60a6      	str	r6, [r4, #8]
 800809a:	2e00      	cmp	r6, #0
 800809c:	bfa2      	ittt	ge
 800809e:	6821      	ldrge	r1, [r4, #0]
 80080a0:	f021 0104 	bicge.w	r1, r1, #4
 80080a4:	6021      	strge	r1, [r4, #0]
 80080a6:	b90d      	cbnz	r5, 80080ac <_printf_i+0x118>
 80080a8:	2e00      	cmp	r6, #0
 80080aa:	d04d      	beq.n	8008148 <_printf_i+0x1b4>
 80080ac:	4616      	mov	r6, r2
 80080ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80080b2:	fb03 5711 	mls	r7, r3, r1, r5
 80080b6:	5dc7      	ldrb	r7, [r0, r7]
 80080b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080bc:	462f      	mov	r7, r5
 80080be:	42bb      	cmp	r3, r7
 80080c0:	460d      	mov	r5, r1
 80080c2:	d9f4      	bls.n	80080ae <_printf_i+0x11a>
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d10b      	bne.n	80080e0 <_printf_i+0x14c>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	07df      	lsls	r7, r3, #31
 80080cc:	d508      	bpl.n	80080e0 <_printf_i+0x14c>
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	6861      	ldr	r1, [r4, #4]
 80080d2:	4299      	cmp	r1, r3
 80080d4:	bfde      	ittt	le
 80080d6:	2330      	movle	r3, #48	; 0x30
 80080d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080dc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80080e0:	1b92      	subs	r2, r2, r6
 80080e2:	6122      	str	r2, [r4, #16]
 80080e4:	f8cd a000 	str.w	sl, [sp]
 80080e8:	464b      	mov	r3, r9
 80080ea:	aa03      	add	r2, sp, #12
 80080ec:	4621      	mov	r1, r4
 80080ee:	4640      	mov	r0, r8
 80080f0:	f7ff fee2 	bl	8007eb8 <_printf_common>
 80080f4:	3001      	adds	r0, #1
 80080f6:	d14c      	bne.n	8008192 <_printf_i+0x1fe>
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080fc:	b004      	add	sp, #16
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	4835      	ldr	r0, [pc, #212]	; (80081d8 <_printf_i+0x244>)
 8008104:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	680e      	ldr	r6, [r1, #0]
 800810c:	061f      	lsls	r7, r3, #24
 800810e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008112:	600e      	str	r6, [r1, #0]
 8008114:	d514      	bpl.n	8008140 <_printf_i+0x1ac>
 8008116:	07d9      	lsls	r1, r3, #31
 8008118:	bf44      	itt	mi
 800811a:	f043 0320 	orrmi.w	r3, r3, #32
 800811e:	6023      	strmi	r3, [r4, #0]
 8008120:	b91d      	cbnz	r5, 800812a <_printf_i+0x196>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	f023 0320 	bic.w	r3, r3, #32
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	2310      	movs	r3, #16
 800812c:	e7b0      	b.n	8008090 <_printf_i+0xfc>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	f043 0320 	orr.w	r3, r3, #32
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	2378      	movs	r3, #120	; 0x78
 8008138:	4828      	ldr	r0, [pc, #160]	; (80081dc <_printf_i+0x248>)
 800813a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800813e:	e7e3      	b.n	8008108 <_printf_i+0x174>
 8008140:	065e      	lsls	r6, r3, #25
 8008142:	bf48      	it	mi
 8008144:	b2ad      	uxthmi	r5, r5
 8008146:	e7e6      	b.n	8008116 <_printf_i+0x182>
 8008148:	4616      	mov	r6, r2
 800814a:	e7bb      	b.n	80080c4 <_printf_i+0x130>
 800814c:	680b      	ldr	r3, [r1, #0]
 800814e:	6826      	ldr	r6, [r4, #0]
 8008150:	6960      	ldr	r0, [r4, #20]
 8008152:	1d1d      	adds	r5, r3, #4
 8008154:	600d      	str	r5, [r1, #0]
 8008156:	0635      	lsls	r5, r6, #24
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	d501      	bpl.n	8008160 <_printf_i+0x1cc>
 800815c:	6018      	str	r0, [r3, #0]
 800815e:	e002      	b.n	8008166 <_printf_i+0x1d2>
 8008160:	0671      	lsls	r1, r6, #25
 8008162:	d5fb      	bpl.n	800815c <_printf_i+0x1c8>
 8008164:	8018      	strh	r0, [r3, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	4616      	mov	r6, r2
 800816c:	e7ba      	b.n	80080e4 <_printf_i+0x150>
 800816e:	680b      	ldr	r3, [r1, #0]
 8008170:	1d1a      	adds	r2, r3, #4
 8008172:	600a      	str	r2, [r1, #0]
 8008174:	681e      	ldr	r6, [r3, #0]
 8008176:	6862      	ldr	r2, [r4, #4]
 8008178:	2100      	movs	r1, #0
 800817a:	4630      	mov	r0, r6
 800817c:	f7f8 f860 	bl	8000240 <memchr>
 8008180:	b108      	cbz	r0, 8008186 <_printf_i+0x1f2>
 8008182:	1b80      	subs	r0, r0, r6
 8008184:	6060      	str	r0, [r4, #4]
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	2300      	movs	r3, #0
 800818c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008190:	e7a8      	b.n	80080e4 <_printf_i+0x150>
 8008192:	6923      	ldr	r3, [r4, #16]
 8008194:	4632      	mov	r2, r6
 8008196:	4649      	mov	r1, r9
 8008198:	4640      	mov	r0, r8
 800819a:	47d0      	blx	sl
 800819c:	3001      	adds	r0, #1
 800819e:	d0ab      	beq.n	80080f8 <_printf_i+0x164>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	079b      	lsls	r3, r3, #30
 80081a4:	d413      	bmi.n	80081ce <_printf_i+0x23a>
 80081a6:	68e0      	ldr	r0, [r4, #12]
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	4298      	cmp	r0, r3
 80081ac:	bfb8      	it	lt
 80081ae:	4618      	movlt	r0, r3
 80081b0:	e7a4      	b.n	80080fc <_printf_i+0x168>
 80081b2:	2301      	movs	r3, #1
 80081b4:	4632      	mov	r2, r6
 80081b6:	4649      	mov	r1, r9
 80081b8:	4640      	mov	r0, r8
 80081ba:	47d0      	blx	sl
 80081bc:	3001      	adds	r0, #1
 80081be:	d09b      	beq.n	80080f8 <_printf_i+0x164>
 80081c0:	3501      	adds	r5, #1
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	9903      	ldr	r1, [sp, #12]
 80081c6:	1a5b      	subs	r3, r3, r1
 80081c8:	42ab      	cmp	r3, r5
 80081ca:	dcf2      	bgt.n	80081b2 <_printf_i+0x21e>
 80081cc:	e7eb      	b.n	80081a6 <_printf_i+0x212>
 80081ce:	2500      	movs	r5, #0
 80081d0:	f104 0619 	add.w	r6, r4, #25
 80081d4:	e7f5      	b.n	80081c2 <_printf_i+0x22e>
 80081d6:	bf00      	nop
 80081d8:	08008491 	.word	0x08008491
 80081dc:	080084a2 	.word	0x080084a2

080081e0 <memcpy>:
 80081e0:	440a      	add	r2, r1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081e8:	d100      	bne.n	80081ec <memcpy+0xc>
 80081ea:	4770      	bx	lr
 80081ec:	b510      	push	{r4, lr}
 80081ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f6:	4291      	cmp	r1, r2
 80081f8:	d1f9      	bne.n	80081ee <memcpy+0xe>
 80081fa:	bd10      	pop	{r4, pc}

080081fc <memmove>:
 80081fc:	4288      	cmp	r0, r1
 80081fe:	b510      	push	{r4, lr}
 8008200:	eb01 0402 	add.w	r4, r1, r2
 8008204:	d902      	bls.n	800820c <memmove+0x10>
 8008206:	4284      	cmp	r4, r0
 8008208:	4623      	mov	r3, r4
 800820a:	d807      	bhi.n	800821c <memmove+0x20>
 800820c:	1e43      	subs	r3, r0, #1
 800820e:	42a1      	cmp	r1, r4
 8008210:	d008      	beq.n	8008224 <memmove+0x28>
 8008212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800821a:	e7f8      	b.n	800820e <memmove+0x12>
 800821c:	4402      	add	r2, r0
 800821e:	4601      	mov	r1, r0
 8008220:	428a      	cmp	r2, r1
 8008222:	d100      	bne.n	8008226 <memmove+0x2a>
 8008224:	bd10      	pop	{r4, pc}
 8008226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800822a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800822e:	e7f7      	b.n	8008220 <memmove+0x24>

08008230 <_free_r>:
 8008230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008232:	2900      	cmp	r1, #0
 8008234:	d048      	beq.n	80082c8 <_free_r+0x98>
 8008236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823a:	9001      	str	r0, [sp, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f1a1 0404 	sub.w	r4, r1, #4
 8008242:	bfb8      	it	lt
 8008244:	18e4      	addlt	r4, r4, r3
 8008246:	f000 f8d3 	bl	80083f0 <__malloc_lock>
 800824a:	4a20      	ldr	r2, [pc, #128]	; (80082cc <_free_r+0x9c>)
 800824c:	9801      	ldr	r0, [sp, #4]
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	4615      	mov	r5, r2
 8008252:	b933      	cbnz	r3, 8008262 <_free_r+0x32>
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	6014      	str	r4, [r2, #0]
 8008258:	b003      	add	sp, #12
 800825a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800825e:	f000 b8cd 	b.w	80083fc <__malloc_unlock>
 8008262:	42a3      	cmp	r3, r4
 8008264:	d90b      	bls.n	800827e <_free_r+0x4e>
 8008266:	6821      	ldr	r1, [r4, #0]
 8008268:	1862      	adds	r2, r4, r1
 800826a:	4293      	cmp	r3, r2
 800826c:	bf04      	itt	eq
 800826e:	681a      	ldreq	r2, [r3, #0]
 8008270:	685b      	ldreq	r3, [r3, #4]
 8008272:	6063      	str	r3, [r4, #4]
 8008274:	bf04      	itt	eq
 8008276:	1852      	addeq	r2, r2, r1
 8008278:	6022      	streq	r2, [r4, #0]
 800827a:	602c      	str	r4, [r5, #0]
 800827c:	e7ec      	b.n	8008258 <_free_r+0x28>
 800827e:	461a      	mov	r2, r3
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	b10b      	cbz	r3, 8008288 <_free_r+0x58>
 8008284:	42a3      	cmp	r3, r4
 8008286:	d9fa      	bls.n	800827e <_free_r+0x4e>
 8008288:	6811      	ldr	r1, [r2, #0]
 800828a:	1855      	adds	r5, r2, r1
 800828c:	42a5      	cmp	r5, r4
 800828e:	d10b      	bne.n	80082a8 <_free_r+0x78>
 8008290:	6824      	ldr	r4, [r4, #0]
 8008292:	4421      	add	r1, r4
 8008294:	1854      	adds	r4, r2, r1
 8008296:	42a3      	cmp	r3, r4
 8008298:	6011      	str	r1, [r2, #0]
 800829a:	d1dd      	bne.n	8008258 <_free_r+0x28>
 800829c:	681c      	ldr	r4, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	6053      	str	r3, [r2, #4]
 80082a2:	4421      	add	r1, r4
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	e7d7      	b.n	8008258 <_free_r+0x28>
 80082a8:	d902      	bls.n	80082b0 <_free_r+0x80>
 80082aa:	230c      	movs	r3, #12
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	e7d3      	b.n	8008258 <_free_r+0x28>
 80082b0:	6825      	ldr	r5, [r4, #0]
 80082b2:	1961      	adds	r1, r4, r5
 80082b4:	428b      	cmp	r3, r1
 80082b6:	bf04      	itt	eq
 80082b8:	6819      	ldreq	r1, [r3, #0]
 80082ba:	685b      	ldreq	r3, [r3, #4]
 80082bc:	6063      	str	r3, [r4, #4]
 80082be:	bf04      	itt	eq
 80082c0:	1949      	addeq	r1, r1, r5
 80082c2:	6021      	streq	r1, [r4, #0]
 80082c4:	6054      	str	r4, [r2, #4]
 80082c6:	e7c7      	b.n	8008258 <_free_r+0x28>
 80082c8:	b003      	add	sp, #12
 80082ca:	bd30      	pop	{r4, r5, pc}
 80082cc:	20000098 	.word	0x20000098

080082d0 <_malloc_r>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	1ccd      	adds	r5, r1, #3
 80082d4:	f025 0503 	bic.w	r5, r5, #3
 80082d8:	3508      	adds	r5, #8
 80082da:	2d0c      	cmp	r5, #12
 80082dc:	bf38      	it	cc
 80082de:	250c      	movcc	r5, #12
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	4606      	mov	r6, r0
 80082e4:	db01      	blt.n	80082ea <_malloc_r+0x1a>
 80082e6:	42a9      	cmp	r1, r5
 80082e8:	d903      	bls.n	80082f2 <_malloc_r+0x22>
 80082ea:	230c      	movs	r3, #12
 80082ec:	6033      	str	r3, [r6, #0]
 80082ee:	2000      	movs	r0, #0
 80082f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f2:	f000 f87d 	bl	80083f0 <__malloc_lock>
 80082f6:	4921      	ldr	r1, [pc, #132]	; (800837c <_malloc_r+0xac>)
 80082f8:	680a      	ldr	r2, [r1, #0]
 80082fa:	4614      	mov	r4, r2
 80082fc:	b99c      	cbnz	r4, 8008326 <_malloc_r+0x56>
 80082fe:	4f20      	ldr	r7, [pc, #128]	; (8008380 <_malloc_r+0xb0>)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	b923      	cbnz	r3, 800830e <_malloc_r+0x3e>
 8008304:	4621      	mov	r1, r4
 8008306:	4630      	mov	r0, r6
 8008308:	f000 f862 	bl	80083d0 <_sbrk_r>
 800830c:	6038      	str	r0, [r7, #0]
 800830e:	4629      	mov	r1, r5
 8008310:	4630      	mov	r0, r6
 8008312:	f000 f85d 	bl	80083d0 <_sbrk_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d123      	bne.n	8008362 <_malloc_r+0x92>
 800831a:	230c      	movs	r3, #12
 800831c:	6033      	str	r3, [r6, #0]
 800831e:	4630      	mov	r0, r6
 8008320:	f000 f86c 	bl	80083fc <__malloc_unlock>
 8008324:	e7e3      	b.n	80082ee <_malloc_r+0x1e>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	1b5b      	subs	r3, r3, r5
 800832a:	d417      	bmi.n	800835c <_malloc_r+0x8c>
 800832c:	2b0b      	cmp	r3, #11
 800832e:	d903      	bls.n	8008338 <_malloc_r+0x68>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	441c      	add	r4, r3
 8008334:	6025      	str	r5, [r4, #0]
 8008336:	e004      	b.n	8008342 <_malloc_r+0x72>
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	42a2      	cmp	r2, r4
 800833c:	bf0c      	ite	eq
 800833e:	600b      	streq	r3, [r1, #0]
 8008340:	6053      	strne	r3, [r2, #4]
 8008342:	4630      	mov	r0, r6
 8008344:	f000 f85a 	bl	80083fc <__malloc_unlock>
 8008348:	f104 000b 	add.w	r0, r4, #11
 800834c:	1d23      	adds	r3, r4, #4
 800834e:	f020 0007 	bic.w	r0, r0, #7
 8008352:	1ac2      	subs	r2, r0, r3
 8008354:	d0cc      	beq.n	80082f0 <_malloc_r+0x20>
 8008356:	1a1b      	subs	r3, r3, r0
 8008358:	50a3      	str	r3, [r4, r2]
 800835a:	e7c9      	b.n	80082f0 <_malloc_r+0x20>
 800835c:	4622      	mov	r2, r4
 800835e:	6864      	ldr	r4, [r4, #4]
 8008360:	e7cc      	b.n	80082fc <_malloc_r+0x2c>
 8008362:	1cc4      	adds	r4, r0, #3
 8008364:	f024 0403 	bic.w	r4, r4, #3
 8008368:	42a0      	cmp	r0, r4
 800836a:	d0e3      	beq.n	8008334 <_malloc_r+0x64>
 800836c:	1a21      	subs	r1, r4, r0
 800836e:	4630      	mov	r0, r6
 8008370:	f000 f82e 	bl	80083d0 <_sbrk_r>
 8008374:	3001      	adds	r0, #1
 8008376:	d1dd      	bne.n	8008334 <_malloc_r+0x64>
 8008378:	e7cf      	b.n	800831a <_malloc_r+0x4a>
 800837a:	bf00      	nop
 800837c:	20000098 	.word	0x20000098
 8008380:	2000009c 	.word	0x2000009c

08008384 <_realloc_r>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	4607      	mov	r7, r0
 8008388:	4614      	mov	r4, r2
 800838a:	460e      	mov	r6, r1
 800838c:	b921      	cbnz	r1, 8008398 <_realloc_r+0x14>
 800838e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008392:	4611      	mov	r1, r2
 8008394:	f7ff bf9c 	b.w	80082d0 <_malloc_r>
 8008398:	b922      	cbnz	r2, 80083a4 <_realloc_r+0x20>
 800839a:	f7ff ff49 	bl	8008230 <_free_r>
 800839e:	4625      	mov	r5, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a4:	f000 f830 	bl	8008408 <_malloc_usable_size_r>
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d20f      	bcs.n	80083cc <_realloc_r+0x48>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4638      	mov	r0, r7
 80083b0:	f7ff ff8e 	bl	80082d0 <_malloc_r>
 80083b4:	4605      	mov	r5, r0
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0f2      	beq.n	80083a0 <_realloc_r+0x1c>
 80083ba:	4631      	mov	r1, r6
 80083bc:	4622      	mov	r2, r4
 80083be:	f7ff ff0f 	bl	80081e0 <memcpy>
 80083c2:	4631      	mov	r1, r6
 80083c4:	4638      	mov	r0, r7
 80083c6:	f7ff ff33 	bl	8008230 <_free_r>
 80083ca:	e7e9      	b.n	80083a0 <_realloc_r+0x1c>
 80083cc:	4635      	mov	r5, r6
 80083ce:	e7e7      	b.n	80083a0 <_realloc_r+0x1c>

080083d0 <_sbrk_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d06      	ldr	r5, [pc, #24]	; (80083ec <_sbrk_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	f7f9 fa7c 	bl	80018d8 <_sbrk>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_sbrk_r+0x1a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_sbrk_r+0x1a>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20000928 	.word	0x20000928

080083f0 <__malloc_lock>:
 80083f0:	4801      	ldr	r0, [pc, #4]	; (80083f8 <__malloc_lock+0x8>)
 80083f2:	f000 b811 	b.w	8008418 <__retarget_lock_acquire_recursive>
 80083f6:	bf00      	nop
 80083f8:	20000930 	.word	0x20000930

080083fc <__malloc_unlock>:
 80083fc:	4801      	ldr	r0, [pc, #4]	; (8008404 <__malloc_unlock+0x8>)
 80083fe:	f000 b80c 	b.w	800841a <__retarget_lock_release_recursive>
 8008402:	bf00      	nop
 8008404:	20000930 	.word	0x20000930

08008408 <_malloc_usable_size_r>:
 8008408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840c:	1f18      	subs	r0, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfbc      	itt	lt
 8008412:	580b      	ldrlt	r3, [r1, r0]
 8008414:	18c0      	addlt	r0, r0, r3
 8008416:	4770      	bx	lr

08008418 <__retarget_lock_acquire_recursive>:
 8008418:	4770      	bx	lr

0800841a <__retarget_lock_release_recursive>:
 800841a:	4770      	bx	lr

0800841c <_init>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	bf00      	nop
 8008420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008422:	bc08      	pop	{r3}
 8008424:	469e      	mov	lr, r3
 8008426:	4770      	bx	lr

08008428 <_fini>:
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	bf00      	nop
 800842c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842e:	bc08      	pop	{r3}
 8008430:	469e      	mov	lr, r3
 8008432:	4770      	bx	lr
