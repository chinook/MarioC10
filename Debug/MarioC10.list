
MarioC10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b1c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008d1c  08008d1c  00018d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d90  08008d90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d98  08008d98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  20000070  08008e10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  08008e10  0002097c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020785  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003800  00000000  00000000  00040823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00044028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d8  00000000  00000000  00045a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bda2  00000000  00000000  00047340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f719  00000000  00000000  000730e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011023c  00000000  00000000  000927fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a2a37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000756c  00000000  00000000  001a2a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08008d04 	.word	0x08008d04

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08008d04 	.word	0x08008d04

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0c0      	sub	sp, #256	; 0x100
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	index_buff = 0;
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <main+0xb4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	ws_receive_flag = 0;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <main+0xb8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	time_100ms_Flag = 0;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <main+0xbc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	wheel_rpm_speed = 0;
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <main+0xc0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
	rotor_rpm_speed = 0;
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <main+0xc4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f001 f9f1 	bl	80019e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f858 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 fb72 	bl	8000cec <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000608:	f000 fb42 	bl	8000c90 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800060c:	f000 f966 	bl	80008dc <MX_CAN1_Init>
  MX_ADC1_Init();
 8000610:	f000 f8c0 	bl	8000794 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000614:	f000 f910 	bl	8000838 <MX_ADC3_Init>
  MX_CAN2_Init();
 8000618:	f000 f994 	bl	8000944 <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 800061c:	f000 f9c6 	bl	80009ac <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000620:	f000 f9f4 	bl	8000a0c <MX_SPI1_Init>
  MX_USART2_Init();
 8000624:	f000 faa8 	bl	8000b78 <MX_USART2_Init>
  MX_USART6_UART_Init();
 8000628:	f000 fb02 	bl	8000c30 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 fad0 	bl	8000bd0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000630:	f000 fa2a 	bl	8000a88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, sizeof(aRxBuffer));
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	4919      	ldr	r1, [pc, #100]	; (80006a0 <main+0xc8>)
 800063a:	481a      	ldr	r0, [pc, #104]	; (80006a4 <main+0xcc>)
 800063c:	f005 fae1 	bl	8005c02 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */
	  //uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
	  //HAL_UART_Transmit(&huart3,Test,sizeof(Test),10);// Sending in normal mode
	  //HAL_Delay(1000);

	  if(time_100ms_Flag == 1)
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <main+0xbc>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d1fb      	bne.n	8000640 <main+0x68>
	  {
		  uint8_t message[256];
		  time_100ms_Flag = 0 ;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <main+0xbc>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		  snprintf((char*)message, sizeof(message), "Wheel RPM = %u \n\r", (unsigned int)wheel_rpm_speed);
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <main+0xc0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4638      	mov	r0, r7
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <main+0xd0>)
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	f007 ff11 	bl	8008480 <sniprintf>
		  HAL_UART_Transmit(&huart3, message, sizeof(message), 10);
 800065e:	4639      	mov	r1, r7
 8000660:	230a      	movs	r3, #10
 8000662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <main+0xd4>)
 8000668:	f005 fa38 	bl	8005adc <HAL_UART_Transmit>

		  snprintf((char*)message, sizeof(message), "Rotor RPM = %u \n\r", (unsigned int)rotor_rpm_speed);
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <main+0xc4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4638      	mov	r0, r7
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <main+0xd8>)
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	f007 ff02 	bl	8008480 <sniprintf>
		  HAL_UART_Transmit(&huart3, message, sizeof(message), 10);
 800067c:	4639      	mov	r1, r7
 800067e:	230a      	movs	r3, #10
 8000680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <main+0xd4>)
 8000686:	f005 fa29 	bl	8005adc <HAL_UART_Transmit>
	  if(time_100ms_Flag == 1)
 800068a:	e7d9      	b.n	8000640 <main+0x68>
 800068c:	2000009c 	.word	0x2000009c
 8000690:	2000095c 	.word	0x2000095c
 8000694:	200006f8 	.word	0x200006f8
 8000698:	20000638 	.word	0x20000638
 800069c:	200006f4 	.word	0x200006f4
 80006a0:	200007d0 	.word	0x200007d0
 80006a4:	2000074c 	.word	0x2000074c
 80006a8:	08008d1c 	.word	0x08008d1c
 80006ac:	200000e0 	.word	0x200000e0
 80006b0:	08008d30 	.word	0x08008d30

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 fed4 	bl	8008470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d8:	f002 fa84 	bl	8002be4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <SystemClock_Config+0xd8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <SystemClock_Config+0xd8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xd8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemClock_Config+0xdc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fc:	4a24      	ldr	r2, [pc, #144]	; (8000790 <SystemClock_Config+0xdc>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xdc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000718:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000728:	2360      	movs	r3, #96	; 0x60
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072c:	2304      	movs	r3, #4
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fab1 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000748:	f000 fc18 	bl	8000f7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f002 fa5a 	bl	8002c04 <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000756:	f000 fc11 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2101      	movs	r1, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fd43 	bl	8003200 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000780:	f000 fbfc 	bl	8000f7c <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC1_Init+0x98>)
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <MX_ADC1_Init+0x9c>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_ADC1_Init+0x98>)
 80007ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_ADC1_Init+0x98>)
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MX_ADC1_Init+0xa0>)
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_ADC1_Init+0x98>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_ADC1_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_ADC1_Init+0x98>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_ADC1_Init+0x98>)
 80007f6:	f001 f975 	bl	8001ae4 <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000800:	f000 fbbc 	bl	8000f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000804:	2303      	movs	r3, #3
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000808:	2301      	movs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC1_Init+0x98>)
 8000816:	f001 f9a9 	bl	8001b6c <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000820:	f000 fbac 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000063c 	.word	0x2000063c
 8000830:	40012000 	.word	0x40012000
 8000834:	0f000001 	.word	0x0f000001

08000838 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_ADC3_Init+0x98>)
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <MX_ADC3_Init+0x9c>)
 800084e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_ADC3_Init+0x98>)
 8000852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000856:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_ADC3_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_ADC3_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_ADC3_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_ADC3_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_ADC3_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_ADC3_Init+0x98>)
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <MX_ADC3_Init+0xa0>)
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_ADC3_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_ADC3_Init+0x98>)
 8000886:	2201      	movs	r2, #1
 8000888:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_ADC3_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_ADC3_Init+0x98>)
 8000894:	2201      	movs	r2, #1
 8000896:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_ADC3_Init+0x98>)
 800089a:	f001 f923 	bl	8001ae4 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 fb6a 	bl	8000f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008a8:	230a      	movs	r3, #10
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_ADC3_Init+0x98>)
 80008ba:	f001 f957 	bl	8001b6c <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008c4:	f000 fb5a 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200006ac 	.word	0x200006ac
 80008d4:	40012200 	.word	0x40012200
 80008d8:	0f000001 	.word	0x0f000001

080008dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_CAN1_Init+0x60>)
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_CAN1_Init+0x64>)
 80008e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_CAN1_Init+0x60>)
 80008e8:	2210      	movs	r2, #16
 80008ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_CAN1_Init+0x60>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_CAN1_Init+0x60>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_CAN1_Init+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_CAN1_Init+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_CAN1_Init+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_CAN1_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_CAN1_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_CAN1_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_CAN1_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_CAN1_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_CAN1_Init+0x60>)
 800092a:	f001 fb6f 	bl	800200c <HAL_CAN_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000934:	f000 fb22 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000934 	.word	0x20000934
 8000940:	40006400 	.word	0x40006400

08000944 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_CAN2_Init+0x60>)
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <MX_CAN2_Init+0x64>)
 800094c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000950:	2210      	movs	r2, #16
 8000952:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_CAN2_Init+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_CAN2_Init+0x60>)
 800096e:	2200      	movs	r2, #0
 8000970:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_CAN2_Init+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000986:	2200      	movs	r2, #0
 8000988:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_CAN2_Init+0x60>)
 800098c:	2200      	movs	r2, #0
 800098e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_CAN2_Init+0x60>)
 8000992:	f001 fb3b 	bl	800200c <HAL_CAN_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800099c:	f000 faee 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000684 	.word	0x20000684
 80009a8:	40006800 	.word	0x40006800

080009ac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_SDMMC1_SD_Init+0x5c>)
 80009b4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009dc:	f003 fa3a 	bl	8003e54 <HAL_SD_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80009e6:	f000 fac9 	bl	8000f7c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80009ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_SDMMC1_SD_Init+0x58>)
 80009f0:	f003 fc8c 	bl	800430c <HAL_SD_ConfigWideBusOperation>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 80009fa:	f000 fabf 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000568 	.word	0x20000568
 8000a08:	40012c00 	.word	0x40012c00

08000a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_SPI1_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a6c:	f003 ffab 	bl	80049c6 <HAL_SPI_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fa81 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200008d0 	.word	0x200008d0
 8000a84:	40013000 	.word	0x40013000

08000a88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000abc:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <MX_TIM3_Init+0xec>)
 8000abe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000ac2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ac6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000ad0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae2:	4823      	ldr	r0, [pc, #140]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000ae4:	f004 f81a 	bl	8004b1c <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 fa45 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000b00:	f004 fa5e 	bl	8004fc0 <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b0a:	f000 fa37 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000b10:	f004 f85b 	bl	8004bca <HAL_TIM_OC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b1a:	f000 fa2f 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000b2e:	f004 fedb 	bl	80058e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b38:	f000 fa20 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000b54:	f004 f9ba 	bl	8004ecc <HAL_TIM_OC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b5e:	f000 fa0d 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <MX_TIM3_Init+0xe8>)
 8000b64:	f000 fc32 	bl	80013cc <HAL_TIM_MspPostInit>

}
 8000b68:	bf00      	nop
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200005ec 	.word	0x200005ec
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <MX_USART2_Init+0x54>)
 8000b80:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_USART2_Init+0x50>)
 8000bb6:	f006 fa62 	bl	800707e <HAL_USART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f000 f9dc 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200006fc 	.word	0x200006fc
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_USART3_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART3_UART_Init+0x58>)
 8000c14:	f004 ff14 	bl	8005a40 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f9ad 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000e0 	.word	0x200000e0
 8000c2c:	40004800 	.word	0x40004800

08000c30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_USART6_UART_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4800;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c3c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000c40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART6_UART_Init+0x58>)
 8000c74:	f004 fee4 	bl	8005a40 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f97d 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000074c 	.word	0x2000074c
 8000c8c:	40011400 	.word	0x40011400

08000c90 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9e:	2206      	movs	r2, #6
 8000ca0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd4:	f001 fe3d 	bl	8002952 <HAL_PCD_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cde:	f000 f94d 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000164 	.word	0x20000164

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b96      	ldr	r3, [pc, #600]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a95      	ldr	r2, [pc, #596]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b93      	ldr	r3, [pc, #588]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	623b      	str	r3, [r7, #32]
 8000d18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b90      	ldr	r3, [pc, #576]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a8f      	ldr	r2, [pc, #572]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d32:	4b8a      	ldr	r3, [pc, #552]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a89      	ldr	r2, [pc, #548]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b87      	ldr	r3, [pc, #540]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0320 	and.w	r3, r3, #32
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a83      	ldr	r2, [pc, #524]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b81      	ldr	r3, [pc, #516]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b7e      	ldr	r3, [pc, #504]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a7d      	ldr	r2, [pc, #500]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b78      	ldr	r3, [pc, #480]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a77      	ldr	r2, [pc, #476]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b75      	ldr	r3, [pc, #468]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d92:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a71      	ldr	r2, [pc, #452]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b6f      	ldr	r3, [pc, #444]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a6b      	ldr	r2, [pc, #428]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b69      	ldr	r3, [pc, #420]	; (8000f5c <MX_GPIO_Init+0x270>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LORA_RST_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210c      	movs	r1, #12
 8000dc6:	4866      	ldr	r0, [pc, #408]	; (8000f60 <MX_GPIO_Init+0x274>)
 8000dc8:	f001 fd6c 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED_WARNING_Pin|LED_CANB_Pin|LED_CANA_Pin
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f248 3184 	movw	r1, #33668	; 0x8384
 8000dd2:	4864      	ldr	r0, [pc, #400]	; (8000f64 <MX_GPIO_Init+0x278>)
 8000dd4:	f001 fd66 	bl	80028a4 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MAST_CLOCK_Pin|PITCH_CLOCK_Pin|LD3_Pin
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f246 0185 	movw	r1, #24709	; 0x6085
 8000dde:	4862      	ldr	r0, [pc, #392]	; (8000f68 <MX_GPIO_Init+0x27c>)
 8000de0:	f001 fd60 	bl	80028a4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2142      	movs	r1, #66	; 0x42
 8000de8:	4860      	ldr	r0, [pc, #384]	; (8000f6c <MX_GPIO_Init+0x280>)
 8000dea:	f001 fd5b 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_RST_Pin LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LED_ERROR_Pin;
 8000dee:	230c      	movs	r3, #12
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4856      	ldr	r0, [pc, #344]	; (8000f60 <MX_GPIO_Init+0x274>)
 8000e06:	f001 fba1 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4850      	ldr	r0, [pc, #320]	; (8000f60 <MX_GPIO_Init+0x274>)
 8000e1e:	f001 fb95 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED_WARNING_Pin LED_CANB_Pin LED_CANA_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED_WARNING_Pin|LED_CANB_Pin|LED_CANA_Pin
 8000e22:	f248 3384 	movw	r3, #33668	; 0x8384
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	484a      	ldr	r0, [pc, #296]	; (8000f64 <MX_GPIO_Init+0x278>)
 8000e3c:	f001 fb86 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8000e40:	2302      	movs	r3, #2
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e50:	230b      	movs	r3, #11
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4845      	ldr	r0, [pc, #276]	; (8000f70 <MX_GPIO_Init+0x284>)
 8000e5c:	f001 fb76 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000e60:	2306      	movs	r3, #6
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e70:	230b      	movs	r3, #11
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	483e      	ldr	r0, [pc, #248]	; (8000f74 <MX_GPIO_Init+0x288>)
 8000e7c:	f001 fb66 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MAST_CLOCK_Pin PITCH_CLOCK_Pin LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MAST_CLOCK_Pin|PITCH_CLOCK_Pin|LD3_Pin
 8000e80:	f246 0385 	movw	r3, #24709	; 0x6085
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4833      	ldr	r0, [pc, #204]	; (8000f68 <MX_GPIO_Init+0x27c>)
 8000e9a:	f001 fb57 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000e9e:	2342      	movs	r3, #66	; 0x42
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	482d      	ldr	r0, [pc, #180]	; (8000f6c <MX_GPIO_Init+0x280>)
 8000eb6:	f001 fb49 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : WHEEL_RPM_Pin ROTOR_RPM_Pin */
  GPIO_InitStruct.Pin = WHEEL_RPM_Pin|ROTOR_RPM_Pin;
 8000eba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4823      	ldr	r0, [pc, #140]	; (8000f60 <MX_GPIO_Init+0x274>)
 8000ed2:	f001 fb3b 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_INT_Pin MAST_DATA_Pin */
  GPIO_InitStruct.Pin = LORA_INT_Pin|MAST_DATA_Pin;
 8000ed6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4823      	ldr	r0, [pc, #140]	; (8000f78 <MX_GPIO_Init+0x28c>)
 8000eec:	f001 fb2e 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 LIMIT1_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LIMIT1_Pin|USB_OverCurrent_Pin;
 8000ef0:	238c      	movs	r3, #140	; 0x8c
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	481a      	ldr	r0, [pc, #104]	; (8000f6c <MX_GPIO_Init+0x280>)
 8000f04:	f001 fb22 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <MX_GPIO_Init+0x280>)
 8000f26:	f001 fb11 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PITCH_DATA_Pin */
  GPIO_InitStruct.Pin = PITCH_DATA_Pin;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PITCH_DATA_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <MX_GPIO_Init+0x27c>)
 8000f3e:	f001 fb05 	bl	800254c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2028      	movs	r0, #40	; 0x28
 8000f48:	f001 fa37 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f4c:	2028      	movs	r0, #40	; 0x28
 8000f4e:	f001 fa50 	bl	80023f2 <HAL_NVIC_EnableIRQ>

}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020c00 	.word	0x40020c00

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x44>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_MspInit+0x44>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x44>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_MspInit+0x44>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_MspInit+0x44>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_MspInit+0x44>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a2a      	ldr	r2, [pc, #168]	; (8001098 <HAL_ADC_MspInit+0xc8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d124      	bne.n	800103c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a29      	ldr	r2, [pc, #164]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_ADC_MspInit+0xcc>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a23      	ldr	r2, [pc, #140]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = LOADCELL_ADC_Pin;
 8001022:	2308      	movs	r3, #8
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LOADCELL_ADC_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	481a      	ldr	r0, [pc, #104]	; (80010a0 <HAL_ADC_MspInit+0xd0>)
 8001036:	f001 fa89 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800103a:	e028      	b.n	800108e <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d123      	bne.n	800108e <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_ADC_MspInit+0xcc>)
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_ADC_MspInit+0xcc>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TORQUE_ADC_Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TORQUE_ADC_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <HAL_ADC_MspInit+0xd8>)
 800108a:	f001 fa5f 	bl	800254c <HAL_GPIO_Init>
}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012000 	.word	0x40012000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40012200 	.word	0x40012200
 80010a8:	40020800 	.word	0x40020800

080010ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <HAL_CAN_MspInit+0x12c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d131      	bne.n	8001132 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010ce:	4b43      	ldr	r3, [pc, #268]	; (80011dc <HAL_CAN_MspInit+0x130>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a41      	ldr	r2, [pc, #260]	; (80011dc <HAL_CAN_MspInit+0x130>)
 80010d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <HAL_CAN_MspInit+0x130>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10b      	bne.n	80010f8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010e0:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a3e      	ldr	r2, [pc, #248]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 80010e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a38      	ldr	r2, [pc, #224]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001110:	2303      	movs	r3, #3
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001120:	2309      	movs	r3, #9
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	482e      	ldr	r0, [pc, #184]	; (80011e4 <HAL_CAN_MspInit+0x138>)
 800112c:	f001 fa0e 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001130:	e04d      	b.n	80011ce <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <HAL_CAN_MspInit+0x13c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d148      	bne.n	80011ce <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 8001142:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 800115a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_CAN_MspInit+0x130>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <HAL_CAN_MspInit+0x130>)
 8001174:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_CAN_MspInit+0x130>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10b      	bne.n	8001196 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 8001184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_CAN_MspInit+0x134>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011ae:	2360      	movs	r3, #96	; 0x60
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011be:	2309      	movs	r3, #9
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <HAL_CAN_MspInit+0x140>)
 80011ca:	f001 f9bf 	bl	800254c <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3738      	adds	r7, #56	; 0x38
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40006400 	.word	0x40006400
 80011dc:	2000008c 	.word	0x2000008c
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40006800 	.word	0x40006800
 80011ec:	40020400 	.word	0x40020400

080011f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0ae      	sub	sp, #184	; 0xb8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2290      	movs	r2, #144	; 0x90
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f007 f92d 	bl	8008470 <memset>
  if(hsd->Instance==SDMMC1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a33      	ldr	r2, [pc, #204]	; (80012e8 <HAL_SD_MspInit+0xf8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d15f      	bne.n	80012e0 <HAL_SD_MspInit+0xf0>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001220:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001224:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001226:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800122a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4618      	mov	r0, r3
 8001234:	f002 f9e6 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800123e:	f7ff fe9d 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_SD_MspInit+0xfc>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a23      	ldr	r2, [pc, #140]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_SD_MspInit+0xfc>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800128a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800128e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012a4:	230c      	movs	r3, #12
 80012a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ae:	4619      	mov	r1, r3
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <HAL_SD_MspInit+0x100>)
 80012b2:	f001 f94b 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b6:	2304      	movs	r3, #4
 80012b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012ce:	230c      	movs	r3, #12
 80012d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <HAL_SD_MspInit+0x104>)
 80012dc:	f001 f936 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	37b8      	adds	r7, #184	; 0xb8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_SPI_MspInit+0x7c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d127      	bne.n	800136a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_SPI_MspInit+0x80>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <HAL_SPI_MspInit+0x80>)
 8001320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_SPI_MspInit+0x80>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_SPI_MspInit+0x80>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_SPI_MspInit+0x80>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_SPI_MspInit+0x80>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800134a:	23e0      	movs	r3, #224	; 0xe0
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135a:	2305      	movs	r3, #5
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_SPI_MspInit+0x84>)
 8001366:	f001 f8f1 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40013000 	.word	0x40013000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_TIM_Base_MspInit+0x44>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d113      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	201d      	movs	r0, #29
 80013b0:	f001 f803 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b4:	201d      	movs	r0, #29
 80013b6:	f001 f81c 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_TIM_MspPostInit+0x64>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d11b      	bne.n	8001426 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001406:	2340      	movs	r3, #64	; 0x40
 8001408:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001416:	2302      	movs	r3, #2
 8001418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 8001422:	f001 f893 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40000400 	.word	0x40000400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020800 	.word	0x40020800

0800143c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ae      	sub	sp, #184	; 0xb8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2290      	movs	r2, #144	; 0x90
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f007 f807 	bl	8008470 <memset>
  if(husart->Instance==USART2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a31      	ldr	r2, [pc, #196]	; (800152c <HAL_USART_MspInit+0xf0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d15b      	bne.n	8001524 <HAL_USART_MspInit+0xe8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001470:	2300      	movs	r3, #0
 8001472:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4618      	mov	r0, r3
 800147a:	f002 f8c3 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8001484:	f7ff fd7a 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_USART_MspInit+0xf4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <HAL_USART_MspInit+0xf4>)
 800148e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_USART_MspInit+0xf4>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_USART_MspInit+0xf4>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_USART_MspInit+0xf4>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_USART_MspInit+0xf4>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_USART_MspInit+0xf4>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_USART_MspInit+0xf4>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_USART_MspInit+0xf4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d0:	2310      	movs	r3, #16
 80014d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e8:	2307      	movs	r3, #7
 80014ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014f2:	4619      	mov	r1, r3
 80014f4:	480f      	ldr	r0, [pc, #60]	; (8001534 <HAL_USART_MspInit+0xf8>)
 80014f6:	f001 f829 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014fa:	2378      	movs	r3, #120	; 0x78
 80014fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001512:	2307      	movs	r3, #7
 8001514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <HAL_USART_MspInit+0xfc>)
 8001520:	f001 f814 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	37b8      	adds	r7, #184	; 0xb8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40004400 	.word	0x40004400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020c00 	.word	0x40020c00

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b0      	sub	sp, #192	; 0xc0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	2290      	movs	r2, #144	; 0x90
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f006 ff87 	bl	8008470 <memset>
  if(huart->Instance==USART3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a47      	ldr	r2, [pc, #284]	; (8001684 <HAL_UART_MspInit+0x148>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d13d      	bne.n	80015e8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800156c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001570:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4618      	mov	r0, r3
 800157c:	f002 f842 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f7ff fcf9 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_UART_MspInit+0x14c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a3e      	ldr	r2, [pc, #248]	; (8001688 <HAL_UART_MspInit+0x14c>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <HAL_UART_MspInit+0x14c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_UART_MspInit+0x14c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a38      	ldr	r2, [pc, #224]	; (8001688 <HAL_UART_MspInit+0x14c>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_UART_MspInit+0x14c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d4:	2307      	movs	r3, #7
 80015d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015de:	4619      	mov	r1, r3
 80015e0:	482a      	ldr	r0, [pc, #168]	; (800168c <HAL_UART_MspInit+0x150>)
 80015e2:	f000 ffb3 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015e6:	e049      	b.n	800167c <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART6)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_UART_MspInit+0x154>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d144      	bne.n	800167c <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80015f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4618      	mov	r0, r3
 8001602:	f001 ffff 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800160c:	f7ff fcb6 	bl	8000f7c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_UART_MspInit+0x14c>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <HAL_UART_MspInit+0x14c>)
 8001616:	f043 0320 	orr.w	r3, r3, #32
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_UART_MspInit+0x14c>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x14c>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x14c>)
 800162e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_UART_MspInit+0x14c>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001640:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800165a:	2308      	movs	r3, #8
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001660:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001664:	4619      	mov	r1, r3
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <HAL_UART_MspInit+0x158>)
 8001668:	f000 ff70 	bl	800254c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	2047      	movs	r0, #71	; 0x47
 8001672:	f000 fea2 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001676:	2047      	movs	r0, #71	; 0x47
 8001678:	f000 febb 	bl	80023f2 <HAL_NVIC_EnableIRQ>
}
 800167c:	bf00      	nop
 800167e:	37c0      	adds	r7, #192	; 0xc0
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40004800 	.word	0x40004800
 8001688:	40023800 	.word	0x40023800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40011400 	.word	0x40011400
 8001694:	40021800 	.word	0x40021800

08001698 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0ae      	sub	sp, #184	; 0xb8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2290      	movs	r2, #144	; 0x90
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 fed9 	bl	8008470 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c6:	d159      	bne.n	800177c <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 ff93 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80016e4:	f7ff fc4a 	bl	8000f7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_PCD_MspInit+0xec>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a25      	ldr	r2, [pc, #148]	; (8001784 <HAL_PCD_MspInit+0xec>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <HAL_PCD_MspInit+0xec>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001700:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800171a:	230a      	movs	r3, #10
 800171c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001724:	4619      	mov	r1, r3
 8001726:	4818      	ldr	r0, [pc, #96]	; (8001788 <HAL_PCD_MspInit+0xf0>)
 8001728:	f000 ff10 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800172c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001744:	4619      	mov	r1, r3
 8001746:	4810      	ldr	r0, [pc, #64]	; (8001788 <HAL_PCD_MspInit+0xf0>)
 8001748:	f000 ff00 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_PCD_MspInit+0xec>)
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_PCD_MspInit+0xec>)
 8001752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001756:	6353      	str	r3, [r2, #52]	; 0x34
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_PCD_MspInit+0xec>)
 800175a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_PCD_MspInit+0xec>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_PCD_MspInit+0xec>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176e:	6453      	str	r3, [r2, #68]	; 0x44
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_PCD_MspInit+0xec>)
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	37b8      	adds	r7, #184	; 0xb8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f940 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <TIM3_IRQHandler+0x40>)
 80017e8:	f001 f875 	bl	80028d6 <HAL_GPIO_TogglePin>

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <TIM3_IRQHandler+0x44>)
 80017ee:	f003 fa4d 	bl	8004c8c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */
	time_100ms_Flag = 1;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <TIM3_IRQHandler+0x48>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]

	wheel_rpm_speed = wheel_rpm_count;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <TIM3_IRQHandler+0x4c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <TIM3_IRQHandler+0x50>)
 80017fe:	6013      	str	r3, [r2, #0]
	wheel_rpm_count = 0;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <TIM3_IRQHandler+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

	rotor_rpm_speed = rotor_rpm_count;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <TIM3_IRQHandler+0x54>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <TIM3_IRQHandler+0x58>)
 800180c:	6013      	str	r3, [r2, #0]
	rotor_rpm_count = 0;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <TIM3_IRQHandler+0x54>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <TIM3_IRQHandler+0x44>)
 8001816:	f003 fa39 	bl	8004c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40020400 	.word	0x40020400
 8001824:	200005ec 	.word	0x200005ec
 8001828:	200006f8 	.word	0x200006f8
 800182c:	20000960 	.word	0x20000960
 8001830:	20000638 	.word	0x20000638
 8001834:	20000964 	.word	0x20000964
 8001838:	200006f4 	.word	0x200006f4

0800183c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11))
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <EXTI15_10_IRQHandler+0x44>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <EXTI15_10_IRQHandler+0x1a>
	{
		// Wheel RPM
		++wheel_rpm_count;
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <EXTI15_10_IRQHandler+0x48>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <EXTI15_10_IRQHandler+0x48>)
 8001854:	6013      	str	r3, [r2, #0]
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <EXTI15_10_IRQHandler+0x44>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d004      	beq.n	800186c <EXTI15_10_IRQHandler+0x30>
	{
		// Rotor RPM
		++rotor_rpm_count;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <EXTI15_10_IRQHandler+0x4c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <EXTI15_10_IRQHandler+0x4c>)
 800186a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WHEEL_RPM_Pin);
 800186c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001870:	f001 f84c 	bl	800290c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROTOR_RPM_Pin);
 8001874:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001878:	f001 f848 	bl	800290c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40013c00 	.word	0x40013c00
 8001884:	20000960 	.word	0x20000960
 8001888:	20000964 	.word	0x20000964

0800188c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <USART6_IRQHandler+0x5c>)
 8001898:	f001 f81d 	bl	80028d6 <HAL_GPIO_TogglePin>

	if ((USART6->ISR & UART_IT_RXNE)) {
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <USART6_IRQHandler+0x60>)
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	f240 5325 	movw	r3, #1317	; 0x525
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d015      	beq.n	80018d6 <USART6_IRQHandler+0x4a>
		uint8_t rbyte = huart6.Instance->RDR;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <USART6_IRQHandler+0x64>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	71fb      	strb	r3, [r7, #7]
		rx_buff[index_buff] = rbyte;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <USART6_IRQHandler+0x68>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <USART6_IRQHandler+0x6c>)
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	5453      	strb	r3, [r2, r1]
		index_buff++;
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <USART6_IRQHandler+0x68>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <USART6_IRQHandler+0x68>)
 80018c8:	701a      	strb	r2, [r3, #0]

		if(rbyte == '$')
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b24      	cmp	r3, #36	; 0x24
 80018ce:	d102      	bne.n	80018d6 <USART6_IRQHandler+0x4a>
		{
			ws_receive_flag = 1;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <USART6_IRQHandler+0x70>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]

		//__HAL_UART_SEND_REQ(&huart4, UART_RXDATA_FLUSH_REQUEST);
		//__HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
	}

	if (USART6->ISR & UART_IT_ORE)
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <USART6_IRQHandler+0x60>)
 80018d8:	69db      	ldr	r3, [r3, #28]
	{
	  //__HAL_UART_SEND_REQ(&huart4, UART_RXDATA_FLUSH_REQUEST);
	  //__HAL_UART_ENABLE_IT(&huart4,UART_IT_ORE);
	}
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <USART6_IRQHandler+0x64>)
 80018dc:	f004 f9e0 	bl	8005ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40011400 	.word	0x40011400
 80018f0:	2000074c 	.word	0x2000074c
 80018f4:	2000009c 	.word	0x2000009c
 80018f8:	200000a0 	.word	0x200000a0
 80018fc:	2000095c 	.word	0x2000095c

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f006 fd74 	bl	800841c <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20080000 	.word	0x20080000
 8001960:	00000400 	.word	0x00000400
 8001964:	20000090 	.word	0x20000090
 8001968:	20000980 	.word	0x20000980

0800196c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001996:	490e      	ldr	r1, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ac:	4c0b      	ldr	r4, [pc, #44]	; (80019dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ba:	f7ff ffd7 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f006 fd33 	bl	8008428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7fe fe09 	bl	80005d8 <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019d4:	08008da0 	.word	0x08008da0
  ldr r2, =_sbss
 80019d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019dc:	2000097c 	.word	0x2000097c

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>

080019e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e6:	2003      	movs	r0, #3
 80019e8:	f000 fcdc 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f805 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f2:	f7ff fac9 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fcf7 	bl	800240e <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a38:	f000 fcbf 	bl	80023ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000968 	.word	0x20000968

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000968 	.word	0x20000968

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e031      	b.n	8001b5e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fa64 	bl	8000fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_ADC_Init+0x84>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	f043 0202 	orr.w	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f970 	bl	8001e18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	ffffeefd 	.word	0xffffeefd

08001b6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1c>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e136      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x28a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	d93a      	bls.n	8001c0e <HAL_ADC_ConfigChannel+0xa2>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ba0:	d035      	beq.n	8001c0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	2207      	movs	r2, #7
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a8d      	ldr	r2, [pc, #564]	; (8001e04 <HAL_ADC_ConfigChannel+0x298>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10a      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68d9      	ldr	r1, [r3, #12]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	061a      	lsls	r2, r3, #24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be6:	e035      	b.n	8001c54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68d9      	ldr	r1, [r3, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4403      	add	r3, r0
 8001c00:	3b1e      	subs	r3, #30
 8001c02:	409a      	lsls	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c0c:	e022      	b.n	8001c54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6919      	ldr	r1, [r3, #16]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	2207      	movs	r2, #7
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	400a      	ands	r2, r1
 8001c30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6919      	ldr	r1, [r3, #16]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4403      	add	r3, r0
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d824      	bhi.n	8001ca6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b05      	subs	r3, #5
 8001c6e:	221f      	movs	r2, #31
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43da      	mvns	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3b05      	subs	r3, #5
 8001c98:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca4:	e04c      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d824      	bhi.n	8001cf8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b23      	subs	r3, #35	; 0x23
 8001cc0:	221f      	movs	r2, #31
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	400a      	ands	r2, r1
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b23      	subs	r3, #35	; 0x23
 8001cea:	fa00 f203 	lsl.w	r2, r0, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf6:	e023      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b41      	subs	r3, #65	; 0x41
 8001d0a:	221f      	movs	r2, #31
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43da      	mvns	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	400a      	ands	r2, r1
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3b41      	subs	r3, #65	; 0x41
 8001d34:	fa00 f203 	lsl.w	r2, r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a30      	ldr	r2, [pc, #192]	; (8001e08 <HAL_ADC_ConfigChannel+0x29c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10a      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1f4>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a2c      	ldr	r2, [pc, #176]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001d5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d5e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <HAL_ADC_ConfigChannel+0x29c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10f      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x21e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d10b      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001d78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d7c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_ADC_ConfigChannel+0x29c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d12b      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x280>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <HAL_ADC_ConfigChannel+0x298>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <HAL_ADC_ConfigChannel+0x23a>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b11      	cmp	r3, #17
 8001da4:	d122      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001dac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001db0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a0>)
 8001db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dbc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_ADC_ConfigChannel+0x298>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d111      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_ADC_ConfigChannel+0x2a4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_ADC_ConfigChannel+0x2a8>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9a      	lsrs	r2, r3, #18
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dde:	e002      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	10000012 	.word	0x10000012
 8001e08:	40012000 	.word	0x40012000
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e20:	4b78      	ldr	r3, [pc, #480]	; (8002004 <ADC_Init+0x1ec>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a77      	ldr	r2, [pc, #476]	; (8002004 <ADC_Init+0x1ec>)
 8001e26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <ADC_Init+0x1ec>)
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4973      	ldr	r1, [pc, #460]	; (8002004 <ADC_Init+0x1ec>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	021a      	lsls	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	4a58      	ldr	r2, [pc, #352]	; (8002008 <ADC_Init+0x1f0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e00f      	b.n	8001f12 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0202 	bic.w	r2, r2, #2
 8001f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	005a      	lsls	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	035a      	lsls	r2, r3, #13
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e007      	b.n	8001f88 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	051a      	lsls	r2, r3, #20
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fca:	025a      	lsls	r2, r3, #9
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	029a      	lsls	r2, r3, #10
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40012300 	.word	0x40012300
 8002008:	0f000001 	.word	0x0f000001

0800200c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0ed      	b.n	80021fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff f83e 	bl	80010ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff fd20 	bl	8001a84 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002046:	e012      	b.n	800206e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002048:	f7ff fd1c 	bl	8001a84 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d90b      	bls.n	800206e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0c5      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0e5      	beq.n	8002048 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0202 	bic.w	r2, r2, #2
 800208a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800208c:	f7ff fcfa 	bl	8001a84 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002092:	e012      	b.n	80020ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002094:	f7ff fcf6 	bl	8001a84 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b0a      	cmp	r3, #10
 80020a0:	d90b      	bls.n	80020ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2205      	movs	r2, #5
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e09f      	b.n	80021fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e5      	bne.n	8002094 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e007      	b.n	80020f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7e5b      	ldrb	r3, [r3, #25]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e007      	b.n	800211c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e9b      	ldrb	r3, [r3, #26]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e007      	b.n	8002146 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0220 	bic.w	r2, r2, #32
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7edb      	ldrb	r3, [r3, #27]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0210 	bic.w	r2, r2, #16
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e007      	b.n	8002170 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0210 	orr.w	r2, r2, #16
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7f1b      	ldrb	r3, [r3, #28]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f5b      	ldrb	r3, [r3, #29]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0204 	orr.w	r2, r2, #4
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e007      	b.n	80021c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0204 	bic.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	ea42 0103 	orr.w	r1, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <__NVIC_SetPriorityGrouping+0x40>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	4313      	orrs	r3, r2
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x40>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00
 8002248:	05fa0000 	.word	0x05fa0000

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	; (80022a0 <__NVIC_EnableIRQ+0x38>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002384:	f7ff ff8e 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff29 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff3e 	bl	800224c <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff8e 	bl	80022f8 <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff5d 	bl	80022a4 <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff31 	bl	8002268 <__NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffa2 	bl	8002360 <SysTick_Config>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff fb26 	bl	8001a84 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d008      	beq.n	8002458 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e052      	b.n	80024fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0216 	bic.w	r2, r2, #22
 8002466:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002476:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d103      	bne.n	8002488 <HAL_DMA_Abort+0x62>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0208 	bic.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a8:	e013      	b.n	80024d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024aa:	f7ff faeb 	bl	8001a84 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d90c      	bls.n	80024d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e015      	b.n	80024fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e4      	bne.n	80024aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	223f      	movs	r2, #63	; 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d004      	beq.n	8002524 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e00c      	b.n	800253e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2205      	movs	r2, #5
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e175      	b.n	8002858 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	f040 8164 	bne.w	8002852 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d005      	beq.n	80025a2 <HAL_GPIO_Init+0x56>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d130      	bne.n	8002604 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80be 	beq.w	8002852 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_GPIO_Init+0x324>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_GPIO_Init+0x324>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_GPIO_Init+0x324>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026ee:	4a61      	ldr	r2, [pc, #388]	; (8002874 <HAL_GPIO_Init+0x328>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_GPIO_Init+0x32c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d037      	beq.n	800278a <HAL_GPIO_Init+0x23e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a57      	ldr	r2, [pc, #348]	; (800287c <HAL_GPIO_Init+0x330>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d031      	beq.n	8002786 <HAL_GPIO_Init+0x23a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_GPIO_Init+0x334>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02b      	beq.n	8002782 <HAL_GPIO_Init+0x236>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a55      	ldr	r2, [pc, #340]	; (8002884 <HAL_GPIO_Init+0x338>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x232>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a54      	ldr	r2, [pc, #336]	; (8002888 <HAL_GPIO_Init+0x33c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x22e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a53      	ldr	r2, [pc, #332]	; (800288c <HAL_GPIO_Init+0x340>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x22a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_GPIO_Init+0x344>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x226>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a51      	ldr	r2, [pc, #324]	; (8002894 <HAL_GPIO_Init+0x348>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x222>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a50      	ldr	r2, [pc, #320]	; (8002898 <HAL_GPIO_Init+0x34c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x21e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4f      	ldr	r2, [pc, #316]	; (800289c <HAL_GPIO_Init+0x350>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x21a>
 8002762:	2309      	movs	r3, #9
 8002764:	e012      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002766:	230a      	movs	r3, #10
 8002768:	e010      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276a:	2308      	movs	r3, #8
 800276c:	e00e      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276e:	2307      	movs	r3, #7
 8002770:	e00c      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002772:	2306      	movs	r3, #6
 8002774:	e00a      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002776:	2305      	movs	r3, #5
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277a:	2304      	movs	r3, #4
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x240>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_GPIO_Init+0x328>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_GPIO_Init+0x354>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_GPIO_Init+0x354>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_GPIO_Init+0x354>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_GPIO_Init+0x354>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_GPIO_Init+0x354>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f ae86 	bls.w	800256c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40021400 	.word	0x40021400
 8002890:	40021800 	.word	0x40021800
 8002894:	40021c00 	.word	0x40021c00
 8002898:	40022000 	.word	0x40022000
 800289c:	40022400 	.word	0x40022400
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028c0:	e003      	b.n	80028ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e8:	887a      	ldrh	r2, [r7, #2]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	400b      	ands	r3, r1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	619a      	str	r2, [r3, #24]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d006      	beq.n	8002930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f806 	bl	800293c <HAL_GPIO_EXTI_Callback>
  }
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40013c00 	.word	0x40013c00

0800293c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002954:	b08f      	sub	sp, #60	; 0x3c
 8002956:	af0a      	add	r7, sp, #40	; 0x28
 8002958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e116      	b.n	8002b92 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fe8a 	bl	8001698 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2203      	movs	r2, #3
 8002988:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 faa4 	bl	8007ef0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	687e      	ldr	r6, [r7, #4]
 80029b0:	466d      	mov	r5, sp
 80029b2:	f106 0410 	add.w	r4, r6, #16
 80029b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c6:	1d33      	adds	r3, r6, #4
 80029c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f005 fa38 	bl	8007e40 <USB_CoreInit>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0d7      	b.n	8002b92 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f005 fa92 	bl	8007f12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	e04a      	b.n	8002a8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	333d      	adds	r3, #61	; 0x3d
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	333c      	adds	r3, #60	; 0x3c
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	b298      	uxth	r0, r3
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3342      	adds	r3, #66	; 0x42
 8002a30:	4602      	mov	r2, r0
 8002a32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	333f      	adds	r3, #63	; 0x3f
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3344      	adds	r3, #68	; 0x44
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	3348      	adds	r3, #72	; 0x48
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3350      	adds	r3, #80	; 0x50
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	3301      	adds	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3af      	bcc.n	80029f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e044      	b.n	8002b24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	3301      	adds	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3b5      	bcc.n	8002a9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	687e      	ldr	r6, [r7, #4]
 8002b36:	466d      	mov	r5, sp
 8002b38:	f106 0410 	add.w	r4, r6, #16
 8002b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b48:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b4c:	1d33      	adds	r3, r6, #4
 8002b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b50:	6838      	ldr	r0, [r7, #0]
 8002b52:	f005 fa2b 	bl	8007fac <USB_DevInit>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e014      	b.n	8002b92 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f80b 	bl	8002b9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f005 fbe5 	bl	800835a <USB_DevDisconnect>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	10000003 	.word	0x10000003

08002be4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c32:	f7fe ff27 	bl	8001a84 <HAL_GetTick>
 8002c36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c38:	e009      	b.n	8002c4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c3a:	f7fe ff23 	bl	8001a84 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c48:	d901      	bls.n	8002c4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e022      	b.n	8002c94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d1ee      	bne.n	8002c3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7fe ff0c 	bl	8001a84 <HAL_GetTick>
 8002c6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c6e:	e009      	b.n	8002c84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c70:	f7fe ff08 	bl	8001a84 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c7e:	d901      	bls.n	8002c84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e007      	b.n	8002c94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c90:	d1ee      	bne.n	8002c70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cac:	2300      	movs	r3, #0
 8002cae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e29b      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8087 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc8:	4b96      	ldr	r3, [pc, #600]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d00c      	beq.n	8002cee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd4:	4b93      	ldr	r3, [pc, #588]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d112      	bne.n	8002d06 <HAL_RCC_OscConfig+0x62>
 8002ce0:	4b90      	ldr	r3, [pc, #576]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cec:	d10b      	bne.n	8002d06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cee:	4b8d      	ldr	r3, [pc, #564]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d06c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x130>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d168      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e275      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7a>
 8002d10:	4b84      	ldr	r3, [pc, #528]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a83      	ldr	r2, [pc, #524]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e02e      	b.n	8002d7c <HAL_RCC_OscConfig+0xd8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x9c>
 8002d26:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7e      	ldr	r2, [pc, #504]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b7c      	ldr	r3, [pc, #496]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7b      	ldr	r2, [pc, #492]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xd8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a75      	ldr	r2, [pc, #468]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a72      	ldr	r2, [pc, #456]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0xd8>
 8002d64:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a6e      	ldr	r2, [pc, #440]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a6b      	ldr	r2, [pc, #428]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fe7e 	bl	8001a84 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fe7a 	bl	8001a84 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e229      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fe6a 	bl	8001a84 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fe66 	bl	8001a84 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e215      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x110>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d069      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de2:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d11c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x190>
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x17a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e1e9      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1e:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	493d      	ldr	r1, [pc, #244]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	e040      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d023      	beq.n	8002e84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a38      	ldr	r2, [pc, #224]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fe1c 	bl	8001a84 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e50:	f7fe fe18 	bl	8001a84 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1c7      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4929      	ldr	r1, [pc, #164]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
 8002e82:	e018      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e84:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fdf8 	bl	8001a84 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e98:	f7fe fdf4 	bl	8001a84 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1a3      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d038      	beq.n	8002f34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d019      	beq.n	8002efe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe fdd5 	bl	8001a84 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ede:	f7fe fdd1 	bl	8001a84 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e180      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x23a>
 8002efc:	e01a      	b.n	8002f34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fdbb 	bl	8001a84 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f12:	f7fe fdb7 	bl	8001a84 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d903      	bls.n	8002f28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e166      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
 8002f24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b92      	ldr	r3, [pc, #584]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ee      	bne.n	8002f12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a4 	beq.w	800308a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f42:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	4b89      	ldr	r3, [pc, #548]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b86      	ldr	r3, [pc, #536]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f6a:	4b83      	ldr	r3, [pc, #524]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f76:	4b80      	ldr	r3, [pc, #512]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a7f      	ldr	r2, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fd7f 	bl	8001a84 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8a:	f7fe fd7b 	bl	8001a84 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e12a      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9c:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x4d4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x31a>
 8002fb0:	4b70      	ldr	r3, [pc, #448]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a6f      	ldr	r2, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	e02d      	b.n	800301a <HAL_RCC_OscConfig+0x376>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x33c>
 8002fc6:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd2:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	e01c      	b.n	800301a <HAL_RCC_OscConfig+0x376>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x35e>
 8002fe8:	4b62      	ldr	r3, [pc, #392]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a61      	ldr	r2, [pc, #388]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a5e      	ldr	r2, [pc, #376]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x376>
 8003002:	4b5c      	ldr	r3, [pc, #368]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a5b      	ldr	r2, [pc, #364]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d015      	beq.n	800304e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fd2f 	bl	8001a84 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fd2b 	bl	8001a84 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0d8      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ee      	beq.n	800302a <HAL_RCC_OscConfig+0x386>
 800304c:	e014      	b.n	8003078 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe fd19 	bl	8001a84 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe fd15 	bl	8001a84 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0c2      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306c:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ee      	bne.n	8003056 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d105      	bne.n	800308a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a3c      	ldr	r2, [pc, #240]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80ae 	beq.w	80031f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d06d      	beq.n	800317c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d14b      	bne.n	8003140 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a31      	ldr	r2, [pc, #196]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fce6 	bl	8001a84 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe fce2 	bl	8001a84 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e091      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	071b      	lsls	r3, r3, #28
 8003106:	491b      	ldr	r1, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fcb4 	bl	8001a84 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fcb0 	bl	8001a84 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e05f      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x47c>
 800313e:	e057      	b.n	80031f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fc9a 	bl	8001a84 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fc96 	bl	8001a84 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e045      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_OscConfig+0x4d0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x4b0>
 8003172:	e03d      	b.n	80031f0 <HAL_RCC_OscConfig+0x54c>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_RCC_OscConfig+0x558>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d030      	beq.n	80031ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d129      	bne.n	80031ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d122      	bne.n	80031ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d119      	bne.n	80031ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	3b01      	subs	r3, #1
 80031c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d10f      	bne.n	80031ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d0      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d910      	bls.n	8003248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b67      	ldr	r3, [pc, #412]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 020f 	bic.w	r2, r3, #15
 800322e:	4965      	ldr	r1, [pc, #404]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d040      	beq.n	8003324 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d115      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e073      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06b      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4936      	ldr	r1, [pc, #216]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7fe fbc6 	bl	8001a84 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fc:	f7fe fbc2 	bl	8001a84 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e053      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 020c 	and.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	429a      	cmp	r2, r3
 8003322:	d1eb      	bne.n	80032fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d210      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 020f 	bic.w	r2, r3, #15
 800333a:	4922      	ldr	r1, [pc, #136]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	; (80033cc <HAL_RCC_ClockConfig+0x1cc>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1d0>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1d4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fb22 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08008d44 	.word	0x08008d44
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	2300      	movs	r3, #0
 80033ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f0:	4b67      	ldr	r3, [pc, #412]	; (8003590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 80bd 	bhi.w	800357c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	e0b7      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800340e:	60bb      	str	r3, [r7, #8]
      break;
 8003410:	e0b7      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b61      	ldr	r3, [pc, #388]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003414:	60bb      	str	r3, [r7, #8]
      break;
 8003416:	e0b4      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b5d      	ldr	r3, [pc, #372]	; (8003590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003420:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d04d      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b58      	ldr	r3, [pc, #352]	; (8003590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	461a      	mov	r2, r3
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	ea02 0800 	and.w	r8, r2, r0
 8003446:	ea03 0901 	and.w	r9, r3, r1
 800344a:	4640      	mov	r0, r8
 800344c:	4649      	mov	r1, r9
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	014b      	lsls	r3, r1, #5
 8003458:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800345c:	0142      	lsls	r2, r0, #5
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	ebb0 0008 	subs.w	r0, r0, r8
 8003466:	eb61 0109 	sbc.w	r1, r1, r9
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	018b      	lsls	r3, r1, #6
 8003474:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003478:	0182      	lsls	r2, r0, #6
 800347a:	1a12      	subs	r2, r2, r0
 800347c:	eb63 0301 	sbc.w	r3, r3, r1
 8003480:	f04f 0000 	mov.w	r0, #0
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	00d9      	lsls	r1, r3, #3
 800348a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800348e:	00d0      	lsls	r0, r2, #3
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	eb12 0208 	adds.w	r2, r2, r8
 8003498:	eb43 0309 	adc.w	r3, r3, r9
 800349c:	f04f 0000 	mov.w	r0, #0
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	0259      	lsls	r1, r3, #9
 80034a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034aa:	0250      	lsls	r0, r2, #9
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	f7fc ff10 	bl	80002e0 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e04a      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	461a      	mov	r2, r3
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034da:	f04f 0100 	mov.w	r1, #0
 80034de:	ea02 0400 	and.w	r4, r2, r0
 80034e2:	ea03 0501 	and.w	r5, r3, r1
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	014b      	lsls	r3, r1, #5
 80034f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034f8:	0142      	lsls	r2, r0, #5
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	1b00      	subs	r0, r0, r4
 8003500:	eb61 0105 	sbc.w	r1, r1, r5
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	018b      	lsls	r3, r1, #6
 800350e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003512:	0182      	lsls	r2, r0, #6
 8003514:	1a12      	subs	r2, r2, r0
 8003516:	eb63 0301 	sbc.w	r3, r3, r1
 800351a:	f04f 0000 	mov.w	r0, #0
 800351e:	f04f 0100 	mov.w	r1, #0
 8003522:	00d9      	lsls	r1, r3, #3
 8003524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003528:	00d0      	lsls	r0, r2, #3
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	1912      	adds	r2, r2, r4
 8003530:	eb45 0303 	adc.w	r3, r5, r3
 8003534:	f04f 0000 	mov.w	r0, #0
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	0299      	lsls	r1, r3, #10
 800353e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003542:	0290      	lsls	r0, r2, #10
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	461a      	mov	r2, r3
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f7fc fec4 	bl	80002e0 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4613      	mov	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	60bb      	str	r3, [r7, #8]
      break;
 800357a:	e002      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800357e:	60bb      	str	r3, [r7, #8]
      break;
 8003580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003582:	68bb      	ldr	r3, [r7, #8]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	00f42400 	.word	0x00f42400
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000000 	.word	0x20000000

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b8:	f7ff fff0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0a9b      	lsrs	r3, r3, #10
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08008d54 	.word	0x08008d54

080035dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035e0:	f7ff ffdc 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0b5b      	lsrs	r3, r3, #13
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	08008d54 	.word	0x08008d54

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d012      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800362c:	4b69      	ldr	r3, [pc, #420]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003636:	6093      	str	r3, [r2, #8]
 8003638:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	4964      	ldr	r1, [pc, #400]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800364e:	2301      	movs	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d017      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	4959      	ldr	r1, [pc, #356]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d017      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800369a:	4b4e      	ldr	r3, [pc, #312]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	494a      	ldr	r1, [pc, #296]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 808b 	beq.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	4a39      	ldr	r2, [pc, #228]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6413      	str	r3, [r2, #64]	; 0x40
 80036f4:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fe f9ba 	bl	8001a84 <HAL_GetTick>
 8003710:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fe f9b6 	bl	8001a84 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e38f      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d035      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d02e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003772:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d114      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe f97e 	bl	8001a84 <HAL_GetTick>
 8003788:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fe f97a 	bl	8001a84 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e351      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ee      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ba:	d111      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	4901      	ldr	r1, [pc, #4]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
 80037d2:	e00b      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	0ffffcff 	.word	0x0ffffcff
 80037e0:	4bb3      	ldr	r3, [pc, #716]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4ab2      	ldr	r2, [pc, #712]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037ea:	6093      	str	r3, [r2, #8]
 80037ec:	4bb0      	ldr	r3, [pc, #704]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	49ad      	ldr	r1, [pc, #692]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d010      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800380a:	4ba9      	ldr	r3, [pc, #676]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	4aa7      	ldr	r2, [pc, #668]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800381a:	4ba5      	ldr	r3, [pc, #660]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	49a2      	ldr	r1, [pc, #648]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003838:	4b9d      	ldr	r3, [pc, #628]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	499a      	ldr	r1, [pc, #616]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800385a:	4b95      	ldr	r3, [pc, #596]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003868:	4991      	ldr	r1, [pc, #580]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800387c:	4b8c      	ldr	r3, [pc, #560]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388a:	4989      	ldr	r1, [pc, #548]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800389e:	4b84      	ldr	r3, [pc, #528]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4980      	ldr	r1, [pc, #512]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c0:	4b7b      	ldr	r3, [pc, #492]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4978      	ldr	r1, [pc, #480]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e2:	4b73      	ldr	r3, [pc, #460]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f023 020c 	bic.w	r2, r3, #12
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	496f      	ldr	r1, [pc, #444]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	4967      	ldr	r1, [pc, #412]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003926:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	495e      	ldr	r1, [pc, #376]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	4956      	ldr	r1, [pc, #344]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	494d      	ldr	r1, [pc, #308]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800398c:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	4945      	ldr	r1, [pc, #276]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039bc:	493c      	ldr	r1, [pc, #240]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039de:	4934      	ldr	r1, [pc, #208]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d011      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039f2:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	492b      	ldr	r1, [pc, #172]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a10:	d101      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	491b      	ldr	r1, [pc, #108]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a64:	4912      	ldr	r1, [pc, #72]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00f      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	e002      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	4986      	ldr	r1, [pc, #536]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ac8:	4b81      	ldr	r3, [pc, #516]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ace:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	497d      	ldr	r1, [pc, #500]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d006      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80d6 	beq.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003af4:	4b76      	ldr	r3, [pc, #472]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd ffc0 	bl	8001a84 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b08:	f7fd ffbc 	bl	8001a84 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e195      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d021      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b3a:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	0e1b      	lsrs	r3, r3, #24
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	019a      	lsls	r2, r3, #6
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	4958      	ldr	r1, [pc, #352]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02e      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba0:	d129      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bb0:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	0f1b      	lsrs	r3, r3, #28
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	019a      	lsls	r2, r3, #6
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	493e      	ldr	r1, [pc, #248]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bde:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	f023 021f 	bic.w	r2, r3, #31
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	3b01      	subs	r3, #1
 8003bee:	4938      	ldr	r1, [pc, #224]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01d      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c02:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c08:	0e1b      	lsrs	r3, r3, #24
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c10:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c16:	0f1b      	lsrs	r3, r3, #28
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	019a      	lsls	r2, r3, #6
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	071b      	lsls	r3, r3, #28
 8003c36:	4926      	ldr	r1, [pc, #152]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	019a      	lsls	r2, r3, #6
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	491a      	ldr	r1, [pc, #104]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c6e:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7a:	f7fd ff03 	bl	8001a84 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c82:	f7fd feff 	bl	8001a84 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b64      	cmp	r3, #100	; 0x64
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0d8      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	f040 80ce 	bne.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fd fee6 	bl	8001a84 <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cbc:	f7fd fee2 	bl	8001a84 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d904      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0bb      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce0:	d0ec      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d02e      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d12a      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d0a:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d18:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	0f1b      	lsrs	r3, r3, #28
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	019a      	lsls	r2, r3, #6
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	071b      	lsls	r3, r3, #28
 8003d3e:	4944      	ldr	r1, [pc, #272]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d46:	4b42      	ldr	r3, [pc, #264]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	493d      	ldr	r1, [pc, #244]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d74:	d11d      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	0e1b      	lsrs	r3, r3, #24
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d84:	4b32      	ldr	r3, [pc, #200]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	0f1b      	lsrs	r3, r3, #28
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	019a      	lsls	r2, r3, #6
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	061b      	lsls	r3, r3, #24
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	071b      	lsls	r3, r3, #28
 8003daa:	4929      	ldr	r1, [pc, #164]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	0e1b      	lsrs	r3, r3, #24
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	019a      	lsls	r2, r3, #6
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	4917      	ldr	r1, [pc, #92]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4911      	ldr	r1, [pc, #68]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1c:	f7fd fe32 	bl	8001a84 <HAL_GetTick>
 8003e20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e24:	f7fd fe2e 	bl	8001a84 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e007      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e42:	d1ef      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800

08003e54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e022      	b.n	8003eac <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fd f9b9 	bl	80011f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f814 	bl	8003eb4 <HAL_SD_InitCard>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e00a      	b.n	8003eac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003eb4:	b5b0      	push	{r4, r5, r7, lr}
 8003eb6:	b08e      	sub	sp, #56	; 0x38
 8003eb8:	af04      	add	r7, sp, #16
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003ed0:	2376      	movs	r3, #118	; 0x76
 8003ed2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681d      	ldr	r5, [r3, #0]
 8003ed8:	466c      	mov	r4, sp
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eec:	4628      	mov	r0, r5
 8003eee:	f003 fb0d 	bl	800750c <SDMMC_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e059      	b.n	8003fb8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f12:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 fb30 	bl	800757e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f7fd fdb4 	bl	8001a9c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb4f 	bl	80045d8 <SD_PowerON>
 8003f3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e02e      	b.n	8003fb8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa70 	bl	8004440 <SD_InitCard>
 8003f60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00b      	beq.n	8003f80 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e01b      	b.n	8003fb8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f003 fb8b 	bl	80076a4 <SDMMC_CmdBlockLength>
 8003f8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00f      	beq.n	8003fb6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <HAL_SD_InitCard+0x10c>)
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc0:	004005ff 	.word	0x004005ff

08003fc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fd2:	0f9b      	lsrs	r3, r3, #30
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fde:	0e9b      	lsrs	r3, r3, #26
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	b2da      	uxtb	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b2da      	uxtb	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401a:	b2da      	uxtb	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004024:	0d1b      	lsrs	r3, r3, #20
 8004026:	b29a      	uxth	r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	b2da      	uxtb	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004042:	0bdb      	lsrs	r3, r3, #15
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004054:	0b9b      	lsrs	r3, r3, #14
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004066:	0b5b      	lsrs	r3, r3, #13
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004078:	0b1b      	lsrs	r3, r3, #12
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	2b00      	cmp	r3, #0
 8004092:	d163      	bne.n	800415c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004098:	009a      	lsls	r2, r3, #2
 800409a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80040a4:	0f92      	lsrs	r2, r2, #30
 80040a6:	431a      	orrs	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b0:	0edb      	lsrs	r3, r3, #27
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	0e1b      	lsrs	r3, r3, #24
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d4:	0d5b      	lsrs	r3, r3, #21
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	0c9b      	lsrs	r3, r3, #18
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f8:	0bdb      	lsrs	r3, r3, #15
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	b2da      	uxtb	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	7e1b      	ldrb	r3, [r3, #24]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	3302      	adds	r3, #2
 800411c:	2201      	movs	r2, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004126:	fb02 f203 	mul.w	r2, r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	7a1b      	ldrb	r3, [r3, #8]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	2201      	movs	r2, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004148:	0a52      	lsrs	r2, r2, #9
 800414a:	fb02 f203 	mul.w	r2, r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004158:	661a      	str	r2, [r3, #96]	; 0x60
 800415a:	e031      	b.n	80041c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	2b01      	cmp	r3, #1
 8004162:	d11d      	bne.n	80041a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	431a      	orrs	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	3301      	adds	r3, #1
 8004180:	029a      	lsls	r2, r3, #10
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004194:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	661a      	str	r2, [r3, #96]	; 0x60
 800419e:	e00f      	b.n	80041c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_SD_GetCardCSD+0x344>)
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e09d      	b.n	80042fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c4:	0b9b      	lsrs	r3, r3, #14
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	09db      	lsrs	r3, r3, #7
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	0fdb      	lsrs	r3, r3, #31
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	0f5b      	lsrs	r3, r3, #29
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	b2da      	uxtb	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	0e9b      	lsrs	r3, r3, #26
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	b2da      	uxtb	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	0d9b      	lsrs	r3, r3, #22
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	b2da      	uxtb	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	0d5b      	lsrs	r3, r3, #21
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	b2da      	uxtb	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	0bdb      	lsrs	r3, r3, #15
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	0b9b      	lsrs	r3, r3, #14
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	0b5b      	lsrs	r3, r3, #13
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	0b1b      	lsrs	r3, r3, #12
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	0a9b      	lsrs	r3, r3, #10
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	004005ff 	.word	0x004005ff

0800430c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800430c:	b5b0      	push	{r4, r5, r7, lr}
 800430e:	b08e      	sub	sp, #56	; 0x38
 8004310:	af04      	add	r7, sp, #16
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2203      	movs	r2, #3
 8004320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	2b03      	cmp	r3, #3
 800432a:	d02e      	beq.n	800438a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	d106      	bne.n	8004342 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
 8004340:	e029      	b.n	8004396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	d10a      	bne.n	8004360 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f9d2 	bl	80046f4 <SD_WideBus_Enable>
 8004350:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
 800435e:	e01a      	b.n	8004396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa0f 	bl	800478a <SD_WideBus_Disable>
 800436c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
 800437a:	e00c      	b.n	8004396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
 8004388:	e005      	b.n	8004396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_SD_ConfigWideBusOperation+0x130>)
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043b4:	e01f      	b.n	80043f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681d      	ldr	r5, [r3, #0]
 80043dc:	466c      	mov	r4, sp
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043f0:	4628      	mov	r0, r5
 80043f2:	f003 f88b 	bl	800750c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043fe:	4618      	mov	r0, r3
 8004400:	f003 f950 	bl	80076a4 <SDMMC_CmdBlockLength>
 8004404:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800442e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004432:	4618      	mov	r0, r3
 8004434:	3728      	adds	r7, #40	; 0x28
 8004436:	46bd      	mov	sp, r7
 8004438:	bdb0      	pop	{r4, r5, r7, pc}
 800443a:	bf00      	nop
 800443c:	004005ff 	.word	0x004005ff

08004440 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b094      	sub	sp, #80	; 0x50
 8004444:	af04      	add	r7, sp, #16
 8004446:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004448:	2301      	movs	r3, #1
 800444a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f003 f8a2 	bl	800759a <SDMMC_GetPowerState>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800445c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004460:	e0b6      	b.n	80045d0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	2b03      	cmp	r3, #3
 8004468:	d02f      	beq.n	80044ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f003 fa23 	bl	80078ba <SDMMC_CmdSendCID>
 8004474:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <SD_InitCard+0x40>
    {
      return errorstate;
 800447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447e:	e0a7      	b.n	80045d0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f003 f8cd 	bl	8007626 <SDMMC_GetResponse>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2104      	movs	r1, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f003 f8c4 	bl	8007626 <SDMMC_GetResponse>
 800449e:	4602      	mov	r2, r0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2108      	movs	r1, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f003 f8bb 	bl	8007626 <SDMMC_GetResponse>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	210c      	movs	r1, #12
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 f8b2 	bl	8007626 <SDMMC_GetResponse>
 80044c2:	4602      	mov	r2, r0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d00d      	beq.n	80044ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f107 020e 	add.w	r2, r7, #14
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f003 fa29 	bl	8007934 <SDMMC_CmdSetRelAdd>
 80044e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <SD_InitCard+0xae>
    {
      return errorstate;
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	e070      	b.n	80045d0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d036      	beq.n	8004564 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80044f6:	89fb      	ldrh	r3, [r7, #14]
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f003 f9f3 	bl	80078f6 <SDMMC_CmdSendCSD>
 8004510:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451a:	e059      	b.n	80045d0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f003 f87f 	bl	8007626 <SDMMC_GetResponse>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2104      	movs	r1, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f003 f876 	bl	8007626 <SDMMC_GetResponse>
 800453a:	4602      	mov	r2, r0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2108      	movs	r1, #8
 8004546:	4618      	mov	r0, r3
 8004548:	f003 f86d 	bl	8007626 <SDMMC_GetResponse>
 800454c:	4602      	mov	r2, r0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	210c      	movs	r1, #12
 8004558:	4618      	mov	r0, r3
 800455a:	f003 f864 	bl	8007626 <SDMMC_GetResponse>
 800455e:	4602      	mov	r2, r0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2104      	movs	r1, #4
 800456a:	4618      	mov	r0, r3
 800456c:	f003 f85b 	bl	8007626 <SDMMC_GetResponse>
 8004570:	4603      	mov	r3, r0
 8004572:	0d1a      	lsrs	r2, r3, #20
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fd20 	bl	8003fc4 <HAL_SD_GetCardCSD>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800458a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800458e:	e01f      	b.n	80045d0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	461a      	mov	r2, r3
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	4608      	mov	r0, r1
 80045a2:	f003 f8a1 	bl	80076e8 <SDMMC_CmdSelDesel>
 80045a6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80045a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <SD_InitCard+0x172>
  {
    return errorstate;
 80045ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b0:	e00e      	b.n	80045d0 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681d      	ldr	r5, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	466c      	mov	r4, sp
 80045ba:	f103 0210 	add.w	r2, r3, #16
 80045be:	ca07      	ldmia	r2, {r0, r1, r2}
 80045c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045c4:	3304      	adds	r3, #4
 80045c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c8:	4628      	mov	r0, r5
 80045ca:	f002 ff9f 	bl	800750c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3740      	adds	r7, #64	; 0x40
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bdb0      	pop	{r4, r5, r7, pc}

080045d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f003 f89c 	bl	800772e <SDMMC_CmdGoIdleState>
 80045f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <SD_PowerON+0x2a>
  {
    return errorstate;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	e072      	b.n	80046e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f003 f8af 	bl	800776a <SDMMC_CmdOperCond>
 800460c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f003 f885 	bl	800772e <SDMMC_CmdGoIdleState>
 8004624:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <SD_PowerON+0x5e>
    {
      return errorstate;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	e05b      	b.n	80046e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	2b01      	cmp	r3, #1
 800463c:	d137      	bne.n	80046ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f003 f8af 	bl	80077a8 <SDMMC_CmdAppCommand>
 800464a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02d      	beq.n	80046ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004656:	e047      	b.n	80046e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f003 f8a2 	bl	80077a8 <SDMMC_CmdAppCommand>
 8004664:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <SD_PowerON+0x98>
    {
      return errorstate;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e03b      	b.n	80046e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	491e      	ldr	r1, [pc, #120]	; (80046f0 <SD_PowerON+0x118>)
 8004676:	4618      	mov	r0, r3
 8004678:	f003 f8b8 	bl	80077ec <SDMMC_CmdAppOperCommand>
 800467c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004688:	e02e      	b.n	80046e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f002 ffc8 	bl	8007626 <SDMMC_GetResponse>
 8004696:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	0fdb      	lsrs	r3, r3, #31
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <SD_PowerON+0xcc>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <SD_PowerON+0xce>
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]

    count++;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3301      	adds	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d802      	bhi.n	80046be <SD_PowerON+0xe6>
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0cc      	beq.n	8004658 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d902      	bls.n	80046ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80046c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046cc:	e00c      	b.n	80046e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
 80046de:	e002      	b.n	80046e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	c1100000 	.word	0xc1100000

080046f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f002 ff8b 	bl	8007626 <SDMMC_GetResponse>
 8004710:	4603      	mov	r3, r0
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471a:	d102      	bne.n	8004722 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800471c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004720:	e02f      	b.n	8004782 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004722:	f107 030c 	add.w	r3, r7, #12
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f879 	bl	8004820 <SD_FindSCR>
 800472e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	e023      	b.n	8004782 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01c      	beq.n	800477e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f003 f829 	bl	80077a8 <SDMMC_CmdAppCommand>
 8004756:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e00f      	b.n	8004782 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2102      	movs	r1, #2
 8004768:	4618      	mov	r0, r3
 800476a:	f003 f863 	bl	8007834 <SDMMC_CmdBusWidth>
 800476e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	e003      	b.n	8004782 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800477a:	2300      	movs	r3, #0
 800477c:	e001      	b.n	8004782 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800477e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f002 ff40 	bl	8007626 <SDMMC_GetResponse>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b0:	d102      	bne.n	80047b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80047b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047b6:	e02f      	b.n	8004818 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f82e 	bl	8004820 <SD_FindSCR>
 80047c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	e023      	b.n	8004818 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01c      	beq.n	8004814 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f002 ffde 	bl	80077a8 <SDMMC_CmdAppCommand>
 80047ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	e00f      	b.n	8004818 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 f818 	bl	8007834 <SDMMC_CmdBusWidth>
 8004804:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	e003      	b.n	8004818 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004810:	2300      	movs	r3, #0
 8004812:	e001      	b.n	8004818 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004814:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b08f      	sub	sp, #60	; 0x3c
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800482a:	f7fd f92b 	bl	8001a84 <HAL_GetTick>
 800482e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2108      	movs	r1, #8
 8004846:	4618      	mov	r0, r3
 8004848:	f002 ff2c 	bl	80076a4 <SDMMC_CmdBlockLength>
 800484c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	e0b2      	b.n	80049be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f002 ff9f 	bl	80077a8 <SDMMC_CmdAppCommand>
 800486a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	e0a3      	b.n	80049be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800487a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800487c:	2308      	movs	r3, #8
 800487e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004880:	2330      	movs	r3, #48	; 0x30
 8004882:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004884:	2302      	movs	r3, #2
 8004886:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800488c:	2301      	movs	r3, #1
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f107 0210 	add.w	r2, r7, #16
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f002 fed6 	bl	800764c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 ffe7 	bl	8007878 <SDMMC_CmdSendSCR>
 80048aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02a      	beq.n	8004908 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	e083      	b.n	80049be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00f      	beq.n	80048e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f107 0208 	add.w	r2, r7, #8
 80048d0:	18d4      	adds	r4, r2, r3
 80048d2:	4608      	mov	r0, r1
 80048d4:	f002 fe46 	bl	8007564 <SDMMC_ReadFIFO>
 80048d8:	4603      	mov	r3, r0
 80048da:	6023      	str	r3, [r4, #0]
      index++;
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	3301      	adds	r3, #1
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
 80048e2:	e006      	b.n	80048f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80048f2:	f7fd f8c7 	bl	8001a84 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004900:	d102      	bne.n	8004908 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004902:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004906:	e05a      	b.n	80049be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0cf      	beq.n	80048b6 <SD_FindSCR+0x96>
 8004916:	e000      	b.n	800491a <SD_FindSCR+0xfa>
      break;
 8004918:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2208      	movs	r2, #8
 800492e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004930:	2308      	movs	r3, #8
 8004932:	e044      	b.n	80049be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2202      	movs	r2, #2
 8004948:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800494a:	2302      	movs	r3, #2
 800494c:	e037      	b.n	80049be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2220      	movs	r2, #32
 8004962:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004964:	2320      	movs	r3, #32
 8004966:	e02a      	b.n	80049be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004970:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	061a      	lsls	r2, r3, #24
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800497e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004988:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	601a      	str	r2, [r3, #0]
    scr++;
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	3304      	adds	r3, #4
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	061a      	lsls	r2, r3, #24
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0e1b      	lsrs	r3, r3, #24
 80049b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	373c      	adds	r7, #60	; 0x3c
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd90      	pop	{r4, r7, pc}

080049c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e09d      	b.n	8004b14 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d108      	bne.n	80049f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e8:	d009      	beq.n	80049fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	61da      	str	r2, [r3, #28]
 80049f0:	e005      	b.n	80049fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fc fc6d 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a34:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a3e:	d902      	bls.n	8004a46 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e002      	b.n	8004a4c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a54:	d007      	beq.n	8004a66 <HAL_SPI_Init+0xa0>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa8:	ea42 0103 	orr.w	r1, r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0204 	and.w	r2, r3, #4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ae2:	ea42 0103 	orr.w	r1, r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e049      	b.n	8004bc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fc1c 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f000 fb2c 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e049      	b.n	8004c70 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f841 	bl	8004c78 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 fad5 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0202 	mvn.w	r2, #2
 8004cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa54 	bl	800517c <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa46 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa57 	bl	8005190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0204 	mvn.w	r2, #4
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa2a 	bl	800517c <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa1c 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fa2d 	bl	8005190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0208 	mvn.w	r2, #8
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa00 	bl	800517c <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9f2 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fa03 	bl	8005190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0210 	mvn.w	r2, #16
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2208      	movs	r2, #8
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f9d6 	bl	800517c <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9c8 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f9d9 	bl	8005190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d10e      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d107      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0201 	mvn.w	r2, #1
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9a2 	bl	8005154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d10e      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d107      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fdee 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d10e      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e56:	2b80      	cmp	r3, #128	; 0x80
 8004e58:	d107      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fde1 	bl	8005a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d10e      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d107      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f987 	bl	80051a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0220 	mvn.w	r2, #32
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fda1 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e066      	b.n	8004fb8 <HAL_TIM_OC_ConfigChannel+0xec>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b14      	cmp	r3, #20
 8004ef6:	d857      	bhi.n	8004fa8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f55 	.word	0x08004f55
 8004f04:	08004fa9 	.word	0x08004fa9
 8004f08:	08004fa9 	.word	0x08004fa9
 8004f0c:	08004fa9 	.word	0x08004fa9
 8004f10:	08004f63 	.word	0x08004f63
 8004f14:	08004fa9 	.word	0x08004fa9
 8004f18:	08004fa9 	.word	0x08004fa9
 8004f1c:	08004fa9 	.word	0x08004fa9
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08004fa9 	.word	0x08004fa9
 8004f28:	08004fa9 	.word	0x08004fa9
 8004f2c:	08004fa9 	.word	0x08004fa9
 8004f30:	08004f7f 	.word	0x08004f7f
 8004f34:	08004fa9 	.word	0x08004fa9
 8004f38:	08004fa9 	.word	0x08004fa9
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08004f8d 	.word	0x08004f8d
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004fa9 	.word	0x08004fa9
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004f9b 	.word	0x08004f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 f9cc 	bl	80052f8 <TIM_OC1_SetConfig>
      break;
 8004f60:	e025      	b.n	8004fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fa37 	bl	80053dc <TIM_OC2_SetConfig>
      break;
 8004f6e:	e01e      	b.n	8004fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 faa8 	bl	80054cc <TIM_OC3_SetConfig>
      break;
 8004f7c:	e017      	b.n	8004fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fb17 	bl	80055b8 <TIM_OC4_SetConfig>
      break;
 8004f8a:	e010      	b.n	8004fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fb68 	bl	8005668 <TIM_OC5_SetConfig>
      break;
 8004f98:	e009      	b.n	8004fae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fbb3 	bl	800570c <TIM_OC6_SetConfig>
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_ConfigClockSource+0x1c>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e0b4      	b.n	8005146 <HAL_TIM_ConfigClockSource+0x186>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	4b56      	ldr	r3, [pc, #344]	; (8005150 <HAL_TIM_ConfigClockSource+0x190>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005014:	d03e      	beq.n	8005094 <HAL_TIM_ConfigClockSource+0xd4>
 8005016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501a:	f200 8087 	bhi.w	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005022:	f000 8086 	beq.w	8005132 <HAL_TIM_ConfigClockSource+0x172>
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502a:	d87f      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b70      	cmp	r3, #112	; 0x70
 800502e:	d01a      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xa6>
 8005030:	2b70      	cmp	r3, #112	; 0x70
 8005032:	d87b      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d050      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x11a>
 8005038:	2b60      	cmp	r3, #96	; 0x60
 800503a:	d877      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b50      	cmp	r3, #80	; 0x50
 800503e:	d03c      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xfa>
 8005040:	2b50      	cmp	r3, #80	; 0x50
 8005042:	d873      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d058      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x13a>
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d86f      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d064      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005050:	2b30      	cmp	r3, #48	; 0x30
 8005052:	d86b      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d060      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d867      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d05c      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005060:	2b10      	cmp	r3, #16
 8005062:	d05a      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	e062      	b.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f000 fc17 	bl	80058a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	609a      	str	r2, [r3, #8]
      break;
 8005092:	e04f      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	6899      	ldr	r1, [r3, #8]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f000 fc00 	bl	80058a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b6:	609a      	str	r2, [r3, #8]
      break;
 80050b8:	e03c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 fb74 	bl	80057b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2150      	movs	r1, #80	; 0x50
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fbcd 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80050d8:	e02c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f000 fb93 	bl	8005812 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2160      	movs	r1, #96	; 0x60
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fbbd 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80050f8:	e01c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	461a      	mov	r2, r3
 8005108:	f000 fb54 	bl	80057b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2140      	movs	r1, #64	; 0x40
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fbad 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 8005118:	e00c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f000 fba4 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 800512a:	e003      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
      break;
 8005130:	e000      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	fffeff88 	.word	0xfffeff88

08005154 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a40      	ldr	r2, [pc, #256]	; (80052cc <TIM_Base_SetConfig+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d00f      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a3c      	ldr	r2, [pc, #240]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3a      	ldr	r2, [pc, #232]	; (80052dc <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <TIM_Base_SetConfig+0x114>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d02b      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d027      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d023      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01f      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01b      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <TIM_Base_SetConfig+0x124>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d017      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <TIM_Base_SetConfig+0x128>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <TIM_Base_SetConfig+0x12c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00f      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <TIM_Base_SetConfig+0x130>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00b      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a25      	ldr	r2, [pc, #148]	; (80052ec <TIM_Base_SetConfig+0x134>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <TIM_Base_SetConfig+0x138>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <TIM_Base_SetConfig+0x13c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d108      	bne.n	800527c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <TIM_Base_SetConfig+0x114>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <TIM_Base_SetConfig+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40010400 	.word	0x40010400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800
 80052ec:	40001800 	.word	0x40001800
 80052f0:	40001c00 	.word	0x40001c00
 80052f4:	40002000 	.word	0x40002000

080052f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <TIM_OC1_SetConfig+0xd8>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 0302 	bic.w	r3, r3, #2
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a21      	ldr	r2, [pc, #132]	; (80053d4 <TIM_OC1_SetConfig+0xdc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_OC1_SetConfig+0x64>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <TIM_OC1_SetConfig+0xe0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10c      	bne.n	8005376 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0308 	bic.w	r3, r3, #8
 8005362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a16      	ldr	r2, [pc, #88]	; (80053d4 <TIM_OC1_SetConfig+0xdc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC1_SetConfig+0x8e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <TIM_OC1_SetConfig+0xe0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d111      	bne.n	80053aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	fffeff8f 	.word	0xfffeff8f
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40010400 	.word	0x40010400

080053dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0210 	bic.w	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4b2e      	ldr	r3, [pc, #184]	; (80054c0 <TIM_OC2_SetConfig+0xe4>)
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0320 	bic.w	r3, r3, #32
 8005426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <TIM_OC2_SetConfig+0xe8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_OC2_SetConfig+0x68>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <TIM_OC2_SetConfig+0xec>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10d      	bne.n	8005460 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <TIM_OC2_SetConfig+0xe8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC2_SetConfig+0x94>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <TIM_OC2_SetConfig+0xec>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d113      	bne.n	8005498 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	feff8fff 	.word	0xfeff8fff
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40010400 	.word	0x40010400

080054cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <TIM_OC3_SetConfig+0xe0>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <TIM_OC3_SetConfig+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC3_SetConfig+0x66>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_OC3_SetConfig+0xe8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d10d      	bne.n	800554e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <TIM_OC3_SetConfig+0xe4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_OC3_SetConfig+0x92>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <TIM_OC3_SetConfig+0xe8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d113      	bne.n	8005586 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	fffeff8f 	.word	0xfffeff8f
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4b1e      	ldr	r3, [pc, #120]	; (800565c <TIM_OC4_SetConfig+0xa4>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	031b      	lsls	r3, r3, #12
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a13      	ldr	r2, [pc, #76]	; (8005660 <TIM_OC4_SetConfig+0xa8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC4_SetConfig+0x68>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a12      	ldr	r2, [pc, #72]	; (8005664 <TIM_OC4_SetConfig+0xac>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d109      	bne.n	8005634 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	feff8fff 	.word	0xfeff8fff
 8005660:	40010000 	.word	0x40010000
 8005664:	40010400 	.word	0x40010400

08005668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <TIM_OC5_SetConfig+0x98>)
 8005694:	4013      	ands	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a12      	ldr	r2, [pc, #72]	; (8005704 <TIM_OC5_SetConfig+0x9c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_OC5_SetConfig+0x5e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a11      	ldr	r2, [pc, #68]	; (8005708 <TIM_OC5_SetConfig+0xa0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d109      	bne.n	80056da <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	621a      	str	r2, [r3, #32]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	fffeff8f 	.word	0xfffeff8f
 8005704:	40010000 	.word	0x40010000
 8005708:	40010400 	.word	0x40010400

0800570c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <TIM_OC6_SetConfig+0x9c>)
 8005738:	4013      	ands	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800574e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	051b      	lsls	r3, r3, #20
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a13      	ldr	r2, [pc, #76]	; (80057ac <TIM_OC6_SetConfig+0xa0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC6_SetConfig+0x60>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <TIM_OC6_SetConfig+0xa4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d109      	bne.n	8005780 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005772:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	029b      	lsls	r3, r3, #10
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	feff8fff 	.word	0xfeff8fff
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40010400 	.word	0x40010400

080057b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 030a 	bic.w	r3, r3, #10
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005812:	b480      	push	{r7}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0210 	bic.w	r2, r3, #16
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800584e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	f043 0307 	orr.w	r3, r3, #7
 8005894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	021a      	lsls	r2, r3, #8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e06d      	b.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a30      	ldr	r2, [pc, #192]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2f      	ldr	r2, [pc, #188]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800593a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d01d      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40001800 	.word	0x40001800

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e040      	b.n	8005ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb fd6a 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fc22 	bl	80062c8 <UART_SetConfig>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e022      	b.n	8005ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fe78 	bl	800678c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 feff 	bl	80068d0 <UART_CheckIdleState>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	; 0x28
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	f040 8081 	bne.w	8005bf8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Transmit+0x26>
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e079      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x38>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e072      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2221      	movs	r2, #33	; 0x21
 8005b28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2a:	f7fb ffab 	bl	8001a84 <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	88fa      	ldrh	r2, [r7, #6]
 8005b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d108      	bne.n	8005b5c <HAL_UART_Transmit+0x80>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	e003      	b.n	8005b64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b6c:	e02c      	b.n	8005bc8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fef2 	bl	8006962 <UART_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e038      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e007      	b.n	8005bb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	781a      	ldrb	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1cc      	bne.n	8005b6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 febf 	bl	8006962 <UART_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e005      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08a      	sub	sp, #40	; 0x28
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d13d      	bne.n	8005c94 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_UART_Receive_IT+0x22>
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e036      	b.n	8005c96 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Receive_IT+0x34>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e02f      	b.n	8005c96 <HAL_UART_Receive_IT+0x94>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	623b      	str	r3, [r7, #32]
 8005c72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	69f9      	ldr	r1, [r7, #28]
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e6      	bne.n	8005c52 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 ff2e 	bl	8006aec <UART_Start_Receive_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	e000      	b.n	8005c96 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3728      	adds	r7, #40	; 0x28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b0ba      	sub	sp, #232	; 0xe8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cca:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cce:	4013      	ands	r3, r2
 8005cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d115      	bne.n	8005d08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00f      	beq.n	8005d08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 82a4 	beq.w	8006246 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
      }
      return;
 8005d06:	e29e      	b.n	8006246 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8117 	beq.w	8005f40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d22:	4b85      	ldr	r3, [pc, #532]	; (8005f38 <HAL_UART_IRQHandler+0x298>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 810a 	beq.w	8005f40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d011      	beq.n	8005d5c <HAL_UART_IRQHandler+0xbc>
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d52:	f043 0201 	orr.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d011      	beq.n	8005d8c <HAL_UART_IRQHandler+0xec>
 8005d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d011      	beq.n	8005dbc <HAL_UART_IRQHandler+0x11c>
 8005d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2204      	movs	r2, #4
 8005daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db2:	f043 0202 	orr.w	r2, r3, #2
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2208      	movs	r2, #8
 8005de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dee:	f043 0208 	orr.w	r2, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d012      	beq.n	8005e2a <HAL_UART_IRQHandler+0x18a>
 8005e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00c      	beq.n	8005e2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 820a 	beq.w	800624a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d005      	beq.n	8005e82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d04f      	beq.n	8005f22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fefc 	bl	8006c80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d141      	bne.n	8005f1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1d9      	bne.n	8005e96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d013      	beq.n	8005f12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <HAL_UART_IRQHandler+0x29c>)
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fc fb05 	bl	8002506 <HAL_DMA_Abort_IT>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d017      	beq.n	8005f32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	e00f      	b.n	8005f32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9b8 	bl	8006288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	e00b      	b.n	8005f32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f9b4 	bl	8006288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	e007      	b.n	8005f32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9b0 	bl	8006288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f30:	e18b      	b.n	800624a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f32:	bf00      	nop
    return;
 8005f34:	e189      	b.n	800624a <HAL_UART_IRQHandler+0x5aa>
 8005f36:	bf00      	nop
 8005f38:	04000120 	.word	0x04000120
 8005f3c:	08006d47 	.word	0x08006d47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f040 8144 	bne.w	80061d2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 813d 	beq.w	80061d2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8136 	beq.w	80061d2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	f040 80b2 	bne.w	80060e2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 815d 	beq.w	800624e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	f080 8155 	bcs.w	800624e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb8:	f000 8085 	beq.w	80060c6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ff2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1da      	bne.n	8005fbc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3308      	adds	r3, #8
 8006026:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800602a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800602e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006032:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800603c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e1      	bne.n	8006006 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3308      	adds	r3, #8
 8006062:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006066:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006068:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800606c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e3      	bne.n	8006042 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006096:	f023 0310 	bic.w	r3, r3, #16
 800609a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80060aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e4      	bne.n	8006086 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fc f9b0 	bl	8002426 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8de 	bl	800629c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060e0:	e0b5      	b.n	800624e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a7 	beq.w	8006252 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a2 	beq.w	8006252 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006130:	647b      	str	r3, [r7, #68]	; 0x44
 8006132:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e4      	bne.n	800610e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	623b      	str	r3, [r7, #32]
   return(result);
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006168:	633a      	str	r2, [r7, #48]	; 0x30
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800616e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e3      	bne.n	8006144 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	60fb      	str	r3, [r7, #12]
   return(result);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0310 	bic.w	r3, r3, #16
 80061a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	69b9      	ldr	r1, [r7, #24]
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	617b      	str	r3, [r7, #20]
   return(result);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e4      	bne.n	800618e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f866 	bl	800629c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061d0:	e03f      	b.n	8006252 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <HAL_UART_IRQHandler+0x55c>
 80061de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f85d 	bl	80062b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061fa:	e02d      	b.n	8006258 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01c      	beq.n	8006256 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
    }
    return;
 8006224:	e017      	b.n	8006256 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d012      	beq.n	8006258 <HAL_UART_IRQHandler+0x5b8>
 8006232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fd97 	bl	8006d72 <UART_EndTransmit_IT>
    return;
 8006244:	e008      	b.n	8006258 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006246:	bf00      	nop
 8006248:	e006      	b.n	8006258 <HAL_UART_IRQHandler+0x5b8>
    return;
 800624a:	bf00      	nop
 800624c:	e004      	b.n	8006258 <HAL_UART_IRQHandler+0x5b8>
      return;
 800624e:	bf00      	nop
 8006250:	e002      	b.n	8006258 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006252:	bf00      	nop
 8006254:	e000      	b.n	8006258 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006256:	bf00      	nop
  }

}
 8006258:	37e8      	adds	r7, #232	; 0xe8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop

08006260 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4ba7      	ldr	r3, [pc, #668]	; (8006590 <UART_SetConfig+0x2c8>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	6979      	ldr	r1, [r7, #20]
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a95      	ldr	r2, [pc, #596]	; (8006594 <UART_SetConfig+0x2cc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d120      	bne.n	8006386 <UART_SetConfig+0xbe>
 8006344:	4b94      	ldr	r3, [pc, #592]	; (8006598 <UART_SetConfig+0x2d0>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d816      	bhi.n	8006380 <UART_SetConfig+0xb8>
 8006352:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x90>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	08006369 	.word	0x08006369
 800635c:	08006375 	.word	0x08006375
 8006360:	0800636f 	.word	0x0800636f
 8006364:	0800637b 	.word	0x0800637b
 8006368:	2301      	movs	r3, #1
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e14f      	b.n	800660e <UART_SetConfig+0x346>
 800636e:	2302      	movs	r3, #2
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e14c      	b.n	800660e <UART_SetConfig+0x346>
 8006374:	2304      	movs	r3, #4
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e149      	b.n	800660e <UART_SetConfig+0x346>
 800637a:	2308      	movs	r3, #8
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e146      	b.n	800660e <UART_SetConfig+0x346>
 8006380:	2310      	movs	r3, #16
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e143      	b.n	800660e <UART_SetConfig+0x346>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a84      	ldr	r2, [pc, #528]	; (800659c <UART_SetConfig+0x2d4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d132      	bne.n	80063f6 <UART_SetConfig+0x12e>
 8006390:	4b81      	ldr	r3, [pc, #516]	; (8006598 <UART_SetConfig+0x2d0>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b0c      	cmp	r3, #12
 800639c:	d828      	bhi.n	80063f0 <UART_SetConfig+0x128>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0xdc>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063d9 	.word	0x080063d9
 80063a8:	080063f1 	.word	0x080063f1
 80063ac:	080063f1 	.word	0x080063f1
 80063b0:	080063f1 	.word	0x080063f1
 80063b4:	080063e5 	.word	0x080063e5
 80063b8:	080063f1 	.word	0x080063f1
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	080063f1 	.word	0x080063f1
 80063c4:	080063df 	.word	0x080063df
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f1 	.word	0x080063f1
 80063d4:	080063eb 	.word	0x080063eb
 80063d8:	2300      	movs	r3, #0
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e117      	b.n	800660e <UART_SetConfig+0x346>
 80063de:	2302      	movs	r3, #2
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e114      	b.n	800660e <UART_SetConfig+0x346>
 80063e4:	2304      	movs	r3, #4
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e111      	b.n	800660e <UART_SetConfig+0x346>
 80063ea:	2308      	movs	r3, #8
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e10e      	b.n	800660e <UART_SetConfig+0x346>
 80063f0:	2310      	movs	r3, #16
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e10b      	b.n	800660e <UART_SetConfig+0x346>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a69      	ldr	r2, [pc, #420]	; (80065a0 <UART_SetConfig+0x2d8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d120      	bne.n	8006442 <UART_SetConfig+0x17a>
 8006400:	4b65      	ldr	r3, [pc, #404]	; (8006598 <UART_SetConfig+0x2d0>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800640a:	2b30      	cmp	r3, #48	; 0x30
 800640c:	d013      	beq.n	8006436 <UART_SetConfig+0x16e>
 800640e:	2b30      	cmp	r3, #48	; 0x30
 8006410:	d814      	bhi.n	800643c <UART_SetConfig+0x174>
 8006412:	2b20      	cmp	r3, #32
 8006414:	d009      	beq.n	800642a <UART_SetConfig+0x162>
 8006416:	2b20      	cmp	r3, #32
 8006418:	d810      	bhi.n	800643c <UART_SetConfig+0x174>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <UART_SetConfig+0x15c>
 800641e:	2b10      	cmp	r3, #16
 8006420:	d006      	beq.n	8006430 <UART_SetConfig+0x168>
 8006422:	e00b      	b.n	800643c <UART_SetConfig+0x174>
 8006424:	2300      	movs	r3, #0
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e0f1      	b.n	800660e <UART_SetConfig+0x346>
 800642a:	2302      	movs	r3, #2
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e0ee      	b.n	800660e <UART_SetConfig+0x346>
 8006430:	2304      	movs	r3, #4
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e0eb      	b.n	800660e <UART_SetConfig+0x346>
 8006436:	2308      	movs	r3, #8
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e0e8      	b.n	800660e <UART_SetConfig+0x346>
 800643c:	2310      	movs	r3, #16
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e0e5      	b.n	800660e <UART_SetConfig+0x346>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a57      	ldr	r2, [pc, #348]	; (80065a4 <UART_SetConfig+0x2dc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d120      	bne.n	800648e <UART_SetConfig+0x1c6>
 800644c:	4b52      	ldr	r3, [pc, #328]	; (8006598 <UART_SetConfig+0x2d0>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006456:	2bc0      	cmp	r3, #192	; 0xc0
 8006458:	d013      	beq.n	8006482 <UART_SetConfig+0x1ba>
 800645a:	2bc0      	cmp	r3, #192	; 0xc0
 800645c:	d814      	bhi.n	8006488 <UART_SetConfig+0x1c0>
 800645e:	2b80      	cmp	r3, #128	; 0x80
 8006460:	d009      	beq.n	8006476 <UART_SetConfig+0x1ae>
 8006462:	2b80      	cmp	r3, #128	; 0x80
 8006464:	d810      	bhi.n	8006488 <UART_SetConfig+0x1c0>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <UART_SetConfig+0x1a8>
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d006      	beq.n	800647c <UART_SetConfig+0x1b4>
 800646e:	e00b      	b.n	8006488 <UART_SetConfig+0x1c0>
 8006470:	2300      	movs	r3, #0
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e0cb      	b.n	800660e <UART_SetConfig+0x346>
 8006476:	2302      	movs	r3, #2
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e0c8      	b.n	800660e <UART_SetConfig+0x346>
 800647c:	2304      	movs	r3, #4
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e0c5      	b.n	800660e <UART_SetConfig+0x346>
 8006482:	2308      	movs	r3, #8
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e0c2      	b.n	800660e <UART_SetConfig+0x346>
 8006488:	2310      	movs	r3, #16
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e0bf      	b.n	800660e <UART_SetConfig+0x346>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a45      	ldr	r2, [pc, #276]	; (80065a8 <UART_SetConfig+0x2e0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d125      	bne.n	80064e4 <UART_SetConfig+0x21c>
 8006498:	4b3f      	ldr	r3, [pc, #252]	; (8006598 <UART_SetConfig+0x2d0>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a6:	d017      	beq.n	80064d8 <UART_SetConfig+0x210>
 80064a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ac:	d817      	bhi.n	80064de <UART_SetConfig+0x216>
 80064ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b2:	d00b      	beq.n	80064cc <UART_SetConfig+0x204>
 80064b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b8:	d811      	bhi.n	80064de <UART_SetConfig+0x216>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <UART_SetConfig+0x1fe>
 80064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c2:	d006      	beq.n	80064d2 <UART_SetConfig+0x20a>
 80064c4:	e00b      	b.n	80064de <UART_SetConfig+0x216>
 80064c6:	2300      	movs	r3, #0
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e0a0      	b.n	800660e <UART_SetConfig+0x346>
 80064cc:	2302      	movs	r3, #2
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e09d      	b.n	800660e <UART_SetConfig+0x346>
 80064d2:	2304      	movs	r3, #4
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e09a      	b.n	800660e <UART_SetConfig+0x346>
 80064d8:	2308      	movs	r3, #8
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e097      	b.n	800660e <UART_SetConfig+0x346>
 80064de:	2310      	movs	r3, #16
 80064e0:	77fb      	strb	r3, [r7, #31]
 80064e2:	e094      	b.n	800660e <UART_SetConfig+0x346>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a30      	ldr	r2, [pc, #192]	; (80065ac <UART_SetConfig+0x2e4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d125      	bne.n	800653a <UART_SetConfig+0x272>
 80064ee:	4b2a      	ldr	r3, [pc, #168]	; (8006598 <UART_SetConfig+0x2d0>)
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064fc:	d017      	beq.n	800652e <UART_SetConfig+0x266>
 80064fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006502:	d817      	bhi.n	8006534 <UART_SetConfig+0x26c>
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006508:	d00b      	beq.n	8006522 <UART_SetConfig+0x25a>
 800650a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650e:	d811      	bhi.n	8006534 <UART_SetConfig+0x26c>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <UART_SetConfig+0x254>
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d006      	beq.n	8006528 <UART_SetConfig+0x260>
 800651a:	e00b      	b.n	8006534 <UART_SetConfig+0x26c>
 800651c:	2301      	movs	r3, #1
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e075      	b.n	800660e <UART_SetConfig+0x346>
 8006522:	2302      	movs	r3, #2
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	e072      	b.n	800660e <UART_SetConfig+0x346>
 8006528:	2304      	movs	r3, #4
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e06f      	b.n	800660e <UART_SetConfig+0x346>
 800652e:	2308      	movs	r3, #8
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e06c      	b.n	800660e <UART_SetConfig+0x346>
 8006534:	2310      	movs	r3, #16
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e069      	b.n	800660e <UART_SetConfig+0x346>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <UART_SetConfig+0x2e8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d137      	bne.n	80065b4 <UART_SetConfig+0x2ec>
 8006544:	4b14      	ldr	r3, [pc, #80]	; (8006598 <UART_SetConfig+0x2d0>)
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800654e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006552:	d017      	beq.n	8006584 <UART_SetConfig+0x2bc>
 8006554:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006558:	d817      	bhi.n	800658a <UART_SetConfig+0x2c2>
 800655a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655e:	d00b      	beq.n	8006578 <UART_SetConfig+0x2b0>
 8006560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006564:	d811      	bhi.n	800658a <UART_SetConfig+0x2c2>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <UART_SetConfig+0x2aa>
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d006      	beq.n	800657e <UART_SetConfig+0x2b6>
 8006570:	e00b      	b.n	800658a <UART_SetConfig+0x2c2>
 8006572:	2300      	movs	r3, #0
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e04a      	b.n	800660e <UART_SetConfig+0x346>
 8006578:	2302      	movs	r3, #2
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e047      	b.n	800660e <UART_SetConfig+0x346>
 800657e:	2304      	movs	r3, #4
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e044      	b.n	800660e <UART_SetConfig+0x346>
 8006584:	2308      	movs	r3, #8
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e041      	b.n	800660e <UART_SetConfig+0x346>
 800658a:	2310      	movs	r3, #16
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e03e      	b.n	800660e <UART_SetConfig+0x346>
 8006590:	efff69f3 	.word	0xefff69f3
 8006594:	40011000 	.word	0x40011000
 8006598:	40023800 	.word	0x40023800
 800659c:	40004400 	.word	0x40004400
 80065a0:	40004800 	.word	0x40004800
 80065a4:	40004c00 	.word	0x40004c00
 80065a8:	40005000 	.word	0x40005000
 80065ac:	40011400 	.word	0x40011400
 80065b0:	40007800 	.word	0x40007800
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a71      	ldr	r2, [pc, #452]	; (8006780 <UART_SetConfig+0x4b8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d125      	bne.n	800660a <UART_SetConfig+0x342>
 80065be:	4b71      	ldr	r3, [pc, #452]	; (8006784 <UART_SetConfig+0x4bc>)
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065cc:	d017      	beq.n	80065fe <UART_SetConfig+0x336>
 80065ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065d2:	d817      	bhi.n	8006604 <UART_SetConfig+0x33c>
 80065d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d8:	d00b      	beq.n	80065f2 <UART_SetConfig+0x32a>
 80065da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065de:	d811      	bhi.n	8006604 <UART_SetConfig+0x33c>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <UART_SetConfig+0x324>
 80065e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e8:	d006      	beq.n	80065f8 <UART_SetConfig+0x330>
 80065ea:	e00b      	b.n	8006604 <UART_SetConfig+0x33c>
 80065ec:	2300      	movs	r3, #0
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e00d      	b.n	800660e <UART_SetConfig+0x346>
 80065f2:	2302      	movs	r3, #2
 80065f4:	77fb      	strb	r3, [r7, #31]
 80065f6:	e00a      	b.n	800660e <UART_SetConfig+0x346>
 80065f8:	2304      	movs	r3, #4
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	e007      	b.n	800660e <UART_SetConfig+0x346>
 80065fe:	2308      	movs	r3, #8
 8006600:	77fb      	strb	r3, [r7, #31]
 8006602:	e004      	b.n	800660e <UART_SetConfig+0x346>
 8006604:	2310      	movs	r3, #16
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e001      	b.n	800660e <UART_SetConfig+0x346>
 800660a:	2310      	movs	r3, #16
 800660c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006616:	d15a      	bne.n	80066ce <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006618:	7ffb      	ldrb	r3, [r7, #31]
 800661a:	2b08      	cmp	r3, #8
 800661c:	d827      	bhi.n	800666e <UART_SetConfig+0x3a6>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <UART_SetConfig+0x35c>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006649 	.word	0x08006649
 8006628:	08006651 	.word	0x08006651
 800662c:	08006659 	.word	0x08006659
 8006630:	0800666f 	.word	0x0800666f
 8006634:	0800665f 	.word	0x0800665f
 8006638:	0800666f 	.word	0x0800666f
 800663c:	0800666f 	.word	0x0800666f
 8006640:	0800666f 	.word	0x0800666f
 8006644:	08006667 	.word	0x08006667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006648:	f7fc ffb4 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 800664c:	61b8      	str	r0, [r7, #24]
        break;
 800664e:	e013      	b.n	8006678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006650:	f7fc ffc4 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8006654:	61b8      	str	r0, [r7, #24]
        break;
 8006656:	e00f      	b.n	8006678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006658:	4b4b      	ldr	r3, [pc, #300]	; (8006788 <UART_SetConfig+0x4c0>)
 800665a:	61bb      	str	r3, [r7, #24]
        break;
 800665c:	e00c      	b.n	8006678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800665e:	f7fc febb 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8006662:	61b8      	str	r0, [r7, #24]
        break;
 8006664:	e008      	b.n	8006678 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800666a:	61bb      	str	r3, [r7, #24]
        break;
 800666c:	e004      	b.n	8006678 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	77bb      	strb	r3, [r7, #30]
        break;
 8006676:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d074      	beq.n	8006768 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	005a      	lsls	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d916      	bls.n	80066c8 <UART_SetConfig+0x400>
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a0:	d212      	bcs.n	80066c8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f023 030f 	bic.w	r3, r3, #15
 80066aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	89fa      	ldrh	r2, [r7, #14]
 80066c4:	60da      	str	r2, [r3, #12]
 80066c6:	e04f      	b.n	8006768 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	77bb      	strb	r3, [r7, #30]
 80066cc:	e04c      	b.n	8006768 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ce:	7ffb      	ldrb	r3, [r7, #31]
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d828      	bhi.n	8006726 <UART_SetConfig+0x45e>
 80066d4:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <UART_SetConfig+0x414>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006709 	.word	0x08006709
 80066e4:	08006711 	.word	0x08006711
 80066e8:	08006727 	.word	0x08006727
 80066ec:	08006717 	.word	0x08006717
 80066f0:	08006727 	.word	0x08006727
 80066f4:	08006727 	.word	0x08006727
 80066f8:	08006727 	.word	0x08006727
 80066fc:	0800671f 	.word	0x0800671f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006700:	f7fc ff58 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8006704:	61b8      	str	r0, [r7, #24]
        break;
 8006706:	e013      	b.n	8006730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006708:	f7fc ff68 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 800670c:	61b8      	str	r0, [r7, #24]
        break;
 800670e:	e00f      	b.n	8006730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006710:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <UART_SetConfig+0x4c0>)
 8006712:	61bb      	str	r3, [r7, #24]
        break;
 8006714:	e00c      	b.n	8006730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006716:	f7fc fe5f 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 800671a:	61b8      	str	r0, [r7, #24]
        break;
 800671c:	e008      	b.n	8006730 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800671e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006722:	61bb      	str	r3, [r7, #24]
        break;
 8006724:	e004      	b.n	8006730 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	77bb      	strb	r3, [r7, #30]
        break;
 800672e:	bf00      	nop
    }

    if (pclk != 0U)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d018      	beq.n	8006768 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085a      	lsrs	r2, r3, #1
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	441a      	add	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b0f      	cmp	r3, #15
 800674e:	d909      	bls.n	8006764 <UART_SetConfig+0x49c>
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006756:	d205      	bcs.n	8006764 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	b29a      	uxth	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60da      	str	r2, [r3, #12]
 8006762:	e001      	b.n	8006768 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006774:	7fbb      	ldrb	r3, [r7, #30]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40007c00 	.word	0x40007c00
 8006784:	40023800 	.word	0x40023800
 8006788:	00f42400 	.word	0x00f42400

0800678c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688a:	d10a      	bne.n	80068a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068e0:	f7fb f8d0 	bl	8001a84 <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d10e      	bne.n	8006912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f82d 	bl	8006962 <UART_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e023      	b.n	800695a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b04      	cmp	r3, #4
 800691e:	d10e      	bne.n	800693e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f817 	bl	8006962 <UART_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e00d      	b.n	800695a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b09c      	sub	sp, #112	; 0x70
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006972:	e0a5      	b.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800697a:	f000 80a1 	beq.w	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fb f881 	bl	8001a84 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <UART_WaitOnFlagUntilTimeout+0x32>
 800698e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006990:	2b00      	cmp	r3, #0
 8006992:	d13e      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069a8:	667b      	str	r3, [r7, #100]	; 0x64
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e6      	bne.n	8006994 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	663b      	str	r3, [r7, #96]	; 0x60
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80069e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e067      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d04f      	beq.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2e:	d147      	bne.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a8c:	623a      	str	r2, [r7, #32]
 8006a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	69f9      	ldr	r1, [r7, #28]
 8006a92:	6a3a      	ldr	r2, [r7, #32]
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e5      	bne.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e010      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69da      	ldr	r2, [r3, #28]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	bf0c      	ite	eq
 8006ad0:	2301      	moveq	r3, #1
 8006ad2:	2300      	movne	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	f43f af4a 	beq.w	8006974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3770      	adds	r7, #112	; 0x70
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b097      	sub	sp, #92	; 0x5c
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	88fa      	ldrh	r2, [r7, #6]
 8006b0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d10e      	bne.n	8006b3e <UART_Start_Receive_IT+0x52>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <UART_Start_Receive_IT+0x48>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b32:	e02d      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	22ff      	movs	r2, #255	; 0xff
 8006b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b3c:	e028      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10d      	bne.n	8006b62 <UART_Start_Receive_IT+0x76>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <UART_Start_Receive_IT+0x6c>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b56:	e01b      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	227f      	movs	r2, #127	; 0x7f
 8006b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b60:	e016      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b6a:	d10d      	bne.n	8006b88 <UART_Start_Receive_IT+0x9c>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <UART_Start_Receive_IT+0x92>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	227f      	movs	r2, #127	; 0x7f
 8006b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b7c:	e008      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	223f      	movs	r2, #63	; 0x3f
 8006b82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b86:	e003      	b.n	8006b90 <UART_Start_Receive_IT+0xa4>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2222      	movs	r2, #34	; 0x22
 8006b9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	f043 0301 	orr.w	r3, r3, #1
 8006bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e5      	bne.n	8006b9e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bda:	d107      	bne.n	8006bec <UART_Start_Receive_IT+0x100>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a24      	ldr	r2, [pc, #144]	; (8006c78 <UART_Start_Receive_IT+0x18c>)
 8006be8:	665a      	str	r2, [r3, #100]	; 0x64
 8006bea:	e002      	b.n	8006bf2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a23      	ldr	r2, [pc, #140]	; (8006c7c <UART_Start_Receive_IT+0x190>)
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d019      	beq.n	8006c36 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
 8006c22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <UART_Start_Receive_IT+0x116>
 8006c34:	e018      	b.n	8006c68 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	613b      	str	r3, [r7, #16]
   return(result);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f043 0320 	orr.w	r3, r3, #32
 8006c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c54:	623b      	str	r3, [r7, #32]
 8006c56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	6a3a      	ldr	r2, [r7, #32]
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	375c      	adds	r7, #92	; 0x5c
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	08006f23 	.word	0x08006f23
 8006c7c:	08006dc7 	.word	0x08006dc7

08006c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b095      	sub	sp, #84	; 0x54
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e6      	bne.n	8006c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d118      	bne.n	8006d28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f023 0310 	bic.w	r3, r3, #16
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6979      	ldr	r1, [r7, #20]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	613b      	str	r3, [r7, #16]
   return(result);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006d3a:	bf00      	nop
 8006d3c:	3754      	adds	r7, #84	; 0x54
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fa8f 	bl	8006288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b088      	sub	sp, #32
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6979      	ldr	r1, [r7, #20]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	613b      	str	r3, [r7, #16]
   return(result);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fa51 	bl	8006260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dbe:	bf00      	nop
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b096      	sub	sp, #88	; 0x58
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ddc:	2b22      	cmp	r3, #34	; 0x22
 8006dde:	f040 8094 	bne.w	8006f0a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006df0:	b2d9      	uxtb	r1, r3
 8006df2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	400a      	ands	r2, r1
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d177      	bne.n	8006f1a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e48:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	f023 0301 	bic.w	r3, r3, #1
 8006e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d12e      	bne.n	8006f02 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0310 	bic.w	r3, r3, #16
 8006ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	69b9      	ldr	r1, [r7, #24]
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e6      	bne.n	8006eaa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d103      	bne.n	8006ef2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff f9ce 	bl	800629c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f00:	e00b      	b.n	8006f1a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff f9b6 	bl	8006274 <HAL_UART_RxCpltCallback>
}
 8006f08:	e007      	b.n	8006f1a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0208 	orr.w	r2, r2, #8
 8006f18:	619a      	str	r2, [r3, #24]
}
 8006f1a:	bf00      	nop
 8006f1c:	3758      	adds	r7, #88	; 0x58
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b096      	sub	sp, #88	; 0x58
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f38:	2b22      	cmp	r3, #34	; 0x22
 8006f3a:	f040 8094 	bne.w	8007066 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f4e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006f52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f56:	4013      	ands	r3, r2
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	1c9a      	adds	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d177      	bne.n	8007076 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e6      	bne.n	8006f86 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e5      	bne.n	8006fb8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d12e      	bne.n	800705e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b10      	cmp	r3, #16
 8007044:	d103      	bne.n	800704e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2210      	movs	r2, #16
 800704c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff f920 	bl	800629c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800705c:	e00b      	b.n	8007076 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff f908 	bl	8006274 <HAL_UART_RxCpltCallback>
}
 8007064:	e007      	b.n	8007076 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0208 	orr.w	r2, r2, #8
 8007074:	619a      	str	r2, [r3, #24]
}
 8007076:	bf00      	nop
 8007078:	3758      	adds	r7, #88	; 0x58
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e03c      	b.n	800710a <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fa f9c9 	bl	800143c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f85c 	bl	8007180 <USART_SetConfig>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e01b      	b.n	800710a <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070e0:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9be 	bl	8007484 <USART_CheckIdleState>
 8007108:	4603      	mov	r3, r0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007122:	e018      	b.n	8007156 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712a:	d014      	beq.n	8007156 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712c:	f7fa fcaa 	bl	8001a84 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	429a      	cmp	r2, r3
 800713a:	d302      	bcc.n	8007142 <USART_WaitOnFlagUntilTimeout+0x30>
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e00f      	b.n	8007176 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69da      	ldr	r2, [r3, #28]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4013      	ands	r3, r2
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	bf0c      	ite	eq
 8007166:	2301      	moveq	r3, #1
 8007168:	2300      	movne	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	429a      	cmp	r2, r3
 8007172:	d0d7      	beq.n	8007124 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800718c:	2300      	movs	r3, #0
 800718e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	4bae      	ldr	r3, [pc, #696]	; (8007468 <USART_SetConfig+0x2e8>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	6979      	ldr	r1, [r7, #20]
 80071b6:	430b      	orrs	r3, r1
 80071b8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80071ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071be:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a9b      	ldr	r2, [pc, #620]	; (800746c <USART_SetConfig+0x2ec>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d121      	bne.n	8007246 <USART_SetConfig+0xc6>
 8007202:	4b9b      	ldr	r3, [pc, #620]	; (8007470 <USART_SetConfig+0x2f0>)
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	2b03      	cmp	r3, #3
 800720e:	d817      	bhi.n	8007240 <USART_SetConfig+0xc0>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <USART_SetConfig+0x98>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	08007229 	.word	0x08007229
 800721c:	08007235 	.word	0x08007235
 8007220:	0800722f 	.word	0x0800722f
 8007224:	0800723b 	.word	0x0800723b
 8007228:	2301      	movs	r3, #1
 800722a:	77fb      	strb	r3, [r7, #31]
 800722c:	e096      	b.n	800735c <USART_SetConfig+0x1dc>
 800722e:	2302      	movs	r3, #2
 8007230:	77fb      	strb	r3, [r7, #31]
 8007232:	e093      	b.n	800735c <USART_SetConfig+0x1dc>
 8007234:	2304      	movs	r3, #4
 8007236:	77fb      	strb	r3, [r7, #31]
 8007238:	e090      	b.n	800735c <USART_SetConfig+0x1dc>
 800723a:	2308      	movs	r3, #8
 800723c:	77fb      	strb	r3, [r7, #31]
 800723e:	e08d      	b.n	800735c <USART_SetConfig+0x1dc>
 8007240:	2310      	movs	r3, #16
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e08a      	b.n	800735c <USART_SetConfig+0x1dc>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a8a      	ldr	r2, [pc, #552]	; (8007474 <USART_SetConfig+0x2f4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d132      	bne.n	80072b6 <USART_SetConfig+0x136>
 8007250:	4b87      	ldr	r3, [pc, #540]	; (8007470 <USART_SetConfig+0x2f0>)
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007256:	f003 030c 	and.w	r3, r3, #12
 800725a:	2b0c      	cmp	r3, #12
 800725c:	d828      	bhi.n	80072b0 <USART_SetConfig+0x130>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <USART_SetConfig+0xe4>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007299 	.word	0x08007299
 8007268:	080072b1 	.word	0x080072b1
 800726c:	080072b1 	.word	0x080072b1
 8007270:	080072b1 	.word	0x080072b1
 8007274:	080072a5 	.word	0x080072a5
 8007278:	080072b1 	.word	0x080072b1
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080072b1 	.word	0x080072b1
 8007284:	0800729f 	.word	0x0800729f
 8007288:	080072b1 	.word	0x080072b1
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072b1 	.word	0x080072b1
 8007294:	080072ab 	.word	0x080072ab
 8007298:	2300      	movs	r3, #0
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e05e      	b.n	800735c <USART_SetConfig+0x1dc>
 800729e:	2302      	movs	r3, #2
 80072a0:	77fb      	strb	r3, [r7, #31]
 80072a2:	e05b      	b.n	800735c <USART_SetConfig+0x1dc>
 80072a4:	2304      	movs	r3, #4
 80072a6:	77fb      	strb	r3, [r7, #31]
 80072a8:	e058      	b.n	800735c <USART_SetConfig+0x1dc>
 80072aa:	2308      	movs	r3, #8
 80072ac:	77fb      	strb	r3, [r7, #31]
 80072ae:	e055      	b.n	800735c <USART_SetConfig+0x1dc>
 80072b0:	2310      	movs	r3, #16
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e052      	b.n	800735c <USART_SetConfig+0x1dc>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a6f      	ldr	r2, [pc, #444]	; (8007478 <USART_SetConfig+0x2f8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d120      	bne.n	8007302 <USART_SetConfig+0x182>
 80072c0:	4b6b      	ldr	r3, [pc, #428]	; (8007470 <USART_SetConfig+0x2f0>)
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072ca:	2b30      	cmp	r3, #48	; 0x30
 80072cc:	d013      	beq.n	80072f6 <USART_SetConfig+0x176>
 80072ce:	2b30      	cmp	r3, #48	; 0x30
 80072d0:	d814      	bhi.n	80072fc <USART_SetConfig+0x17c>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d009      	beq.n	80072ea <USART_SetConfig+0x16a>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d810      	bhi.n	80072fc <USART_SetConfig+0x17c>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <USART_SetConfig+0x164>
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d006      	beq.n	80072f0 <USART_SetConfig+0x170>
 80072e2:	e00b      	b.n	80072fc <USART_SetConfig+0x17c>
 80072e4:	2300      	movs	r3, #0
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e038      	b.n	800735c <USART_SetConfig+0x1dc>
 80072ea:	2302      	movs	r3, #2
 80072ec:	77fb      	strb	r3, [r7, #31]
 80072ee:	e035      	b.n	800735c <USART_SetConfig+0x1dc>
 80072f0:	2304      	movs	r3, #4
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e032      	b.n	800735c <USART_SetConfig+0x1dc>
 80072f6:	2308      	movs	r3, #8
 80072f8:	77fb      	strb	r3, [r7, #31]
 80072fa:	e02f      	b.n	800735c <USART_SetConfig+0x1dc>
 80072fc:	2310      	movs	r3, #16
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e02c      	b.n	800735c <USART_SetConfig+0x1dc>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a5d      	ldr	r2, [pc, #372]	; (800747c <USART_SetConfig+0x2fc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d125      	bne.n	8007358 <USART_SetConfig+0x1d8>
 800730c:	4b58      	ldr	r3, [pc, #352]	; (8007470 <USART_SetConfig+0x2f0>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800731a:	d017      	beq.n	800734c <USART_SetConfig+0x1cc>
 800731c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007320:	d817      	bhi.n	8007352 <USART_SetConfig+0x1d2>
 8007322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007326:	d00b      	beq.n	8007340 <USART_SetConfig+0x1c0>
 8007328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732c:	d811      	bhi.n	8007352 <USART_SetConfig+0x1d2>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <USART_SetConfig+0x1ba>
 8007332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007336:	d006      	beq.n	8007346 <USART_SetConfig+0x1c6>
 8007338:	e00b      	b.n	8007352 <USART_SetConfig+0x1d2>
 800733a:	2301      	movs	r3, #1
 800733c:	77fb      	strb	r3, [r7, #31]
 800733e:	e00d      	b.n	800735c <USART_SetConfig+0x1dc>
 8007340:	2302      	movs	r3, #2
 8007342:	77fb      	strb	r3, [r7, #31]
 8007344:	e00a      	b.n	800735c <USART_SetConfig+0x1dc>
 8007346:	2304      	movs	r3, #4
 8007348:	77fb      	strb	r3, [r7, #31]
 800734a:	e007      	b.n	800735c <USART_SetConfig+0x1dc>
 800734c:	2308      	movs	r3, #8
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e004      	b.n	800735c <USART_SetConfig+0x1dc>
 8007352:	2310      	movs	r3, #16
 8007354:	77fb      	strb	r3, [r7, #31]
 8007356:	e001      	b.n	800735c <USART_SetConfig+0x1dc>
 8007358:	2310      	movs	r3, #16
 800735a:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800735c:	7ffb      	ldrb	r3, [r7, #31]
 800735e:	2b08      	cmp	r3, #8
 8007360:	d857      	bhi.n	8007412 <USART_SetConfig+0x292>
 8007362:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <USART_SetConfig+0x1e8>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	0800738d 	.word	0x0800738d
 800736c:	080073ab 	.word	0x080073ab
 8007370:	080073c9 	.word	0x080073c9
 8007374:	08007413 	.word	0x08007413
 8007378:	080073df 	.word	0x080073df
 800737c:	08007413 	.word	0x08007413
 8007380:	08007413 	.word	0x08007413
 8007384:	08007413 	.word	0x08007413
 8007388:	080073fd 	.word	0x080073fd
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800738c:	f7fc f912 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8007390:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	005a      	lsls	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	441a      	add	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	61bb      	str	r3, [r7, #24]
      break;
 80073a8:	e036      	b.n	8007418 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80073aa:	f7fc f917 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 80073ae:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	005a      	lsls	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	441a      	add	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	61bb      	str	r3, [r7, #24]
      break;
 80073c6:	e027      	b.n	8007418 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	085a      	lsrs	r2, r3, #1
 80073ce:	4b2c      	ldr	r3, [pc, #176]	; (8007480 <USART_SetConfig+0x300>)
 80073d0:	4413      	add	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6852      	ldr	r2, [r2, #4]
 80073d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073da:	61bb      	str	r3, [r7, #24]
      break;
 80073dc:	e01c      	b.n	8007418 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80073de:	f7fb fffb 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 80073e2:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	005a      	lsls	r2, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	441a      	add	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	61bb      	str	r3, [r7, #24]
      break;
 80073fa:	e00d      	b.n	8007418 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	fbb2 f3f3 	udiv	r3, r2, r3
 800740e:	61bb      	str	r3, [r7, #24]
      break;
 8007410:	e002      	b.n	8007418 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	77bb      	strb	r3, [r7, #30]
      break;
 8007416:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b0f      	cmp	r3, #15
 800741c:	d916      	bls.n	800744c <USART_SetConfig+0x2cc>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007424:	d212      	bcs.n	800744c <USART_SetConfig+0x2cc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f023 030f 	bic.w	r3, r3, #15
 800742e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	b29b      	uxth	r3, r3
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	b29a      	uxth	r2, r3
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	4313      	orrs	r3, r2
 8007440:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	89fa      	ldrh	r2, [r7, #14]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e001      	b.n	8007450 <USART_SetConfig+0x2d0>
  }
  else
  {
    ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800745c:	7fbb      	ldrb	r3, [r7, #30]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	efff69f3 	.word	0xefff69f3
 800746c:	40011000 	.word	0x40011000
 8007470:	40023800 	.word	0x40023800
 8007474:	40004400 	.word	0x40004400
 8007478:	40004800 	.word	0x40004800
 800747c:	40011400 	.word	0x40011400
 8007480:	01e84800 	.word	0x01e84800

08007484 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af02      	add	r7, sp, #8
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007492:	f7fa faf7 	bl	8001a84 <HAL_GetTick>
 8007496:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	d10e      	bne.n	80074c4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80074a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fe2c 	bl	8007112 <USART_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e01e      	b.n	8007502 <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d10e      	bne.n	80074f0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80074d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff fe16 	bl	8007112 <USART_WaitOnFlagUntilTimeout>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e008      	b.n	8007502 <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800750c:	b084      	sub	sp, #16
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	f107 001c 	add.w	r0, r7, #28
 800751a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007522:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007524:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007526:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800752a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800752e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007532:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007536:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <SDMMC_Init+0x54>)
 8007544:	4013      	ands	r3, r2
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	b004      	add	sp, #16
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	ffff8100 	.word	0xffff8100

08007564 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2203      	movs	r2, #3
 800758a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0303 	and.w	r3, r3, #3
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
	...

080075b8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80075dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80075e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	4b06      	ldr	r3, [pc, #24]	; (8007608 <SDMMC_SendCommand+0x50>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	fffff000 	.word	0xfffff000

0800760c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	b2db      	uxtb	r3, r3
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3314      	adds	r3, #20
 8007634:	461a      	mov	r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	4413      	add	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
}  
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007672:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007678:	431a      	orrs	r2, r3
                       Data->DPSM);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800767e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007696:	2300      	movs	r3, #0

}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80076b2:	2310      	movs	r3, #16
 80076b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076b6:	2340      	movs	r3, #64	; 0x40
 80076b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076c4:	f107 0308 	add.w	r3, r7, #8
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff ff74 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80076d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d4:	2110      	movs	r1, #16
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f94e 	bl	8007978 <SDMMC_GetCmdResp1>
 80076dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076de:	69fb      	ldr	r3, [r7, #28]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80076f8:	2307      	movs	r3, #7
 80076fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076fc:	2340      	movs	r3, #64	; 0x40
 80076fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007700:	2300      	movs	r3, #0
 8007702:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007708:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800770a:	f107 0310 	add.w	r3, r7, #16
 800770e:	4619      	mov	r1, r3
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff ff51 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007716:	f241 3288 	movw	r2, #5000	; 0x1388
 800771a:	2107      	movs	r1, #7
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f92b 	bl	8007978 <SDMMC_GetCmdResp1>
 8007722:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007726:	4618      	mov	r0, r3
 8007728:	3728      	adds	r7, #40	; 0x28
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b088      	sub	sp, #32
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800774a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800774c:	f107 0308 	add.w	r3, r7, #8
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff ff30 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb45 	bl	8007de8 <SDMMC_GetCmdError>
 800775e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007760:	69fb      	ldr	r3, [r7, #28]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b088      	sub	sp, #32
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007772:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007778:	2308      	movs	r3, #8
 800777a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007788:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff ff11 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fad8 	bl	8007d4c <SDMMC_GetCmdResp7>
 800779c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800779e:	69fb      	ldr	r3, [r7, #28]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80077b6:	2337      	movs	r3, #55	; 0x37
 80077b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077ba:	2340      	movs	r3, #64	; 0x40
 80077bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077c8:	f107 0308 	add.w	r3, r7, #8
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff fef2 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80077d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d8:	2137      	movs	r1, #55	; 0x37
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f8cc 	bl	8007978 <SDMMC_GetCmdResp1>
 80077e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077e2:	69fb      	ldr	r3, [r7, #28]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	4b0d      	ldr	r3, [pc, #52]	; (8007830 <SDMMC_CmdAppOperCommand+0x44>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80077fe:	2329      	movs	r3, #41	; 0x29
 8007800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007802:	2340      	movs	r3, #64	; 0x40
 8007804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800780a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007810:	f107 0308 	add.w	r3, r7, #8
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff fece 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9e1 	bl	8007be4 <SDMMC_GetCmdResp3>
 8007822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007824:	69fb      	ldr	r3, [r7, #28]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	80100000 	.word	0x80100000

08007834 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007842:	2306      	movs	r3, #6
 8007844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007846:	2340      	movs	r3, #64	; 0x40
 8007848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800784e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007852:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007854:	f107 0308 	add.w	r3, r7, #8
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff feac 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007860:	f241 3288 	movw	r2, #5000	; 0x1388
 8007864:	2106      	movs	r1, #6
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f886 	bl	8007978 <SDMMC_GetCmdResp1>
 800786c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800786e:	69fb      	ldr	r3, [r7, #28]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007884:	2333      	movs	r3, #51	; 0x33
 8007886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007888:	2340      	movs	r3, #64	; 0x40
 800788a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fe8b 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80078a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a6:	2133      	movs	r1, #51	; 0x33
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f865 	bl	8007978 <SDMMC_GetCmdResp1>
 80078ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078b0:	69fb      	ldr	r3, [r7, #28]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b088      	sub	sp, #32
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80078c6:	2302      	movs	r3, #2
 80078c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80078ca:	23c0      	movs	r3, #192	; 0xc0
 80078cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078d8:	f107 0308 	add.w	r3, r7, #8
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fe6a 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f935 	bl	8007b54 <SDMMC_GetCmdResp2>
 80078ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ec:	69fb      	ldr	r3, [r7, #28]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3720      	adds	r7, #32
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007904:	2309      	movs	r3, #9
 8007906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007908:	23c0      	movs	r3, #192	; 0xc0
 800790a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fe4b 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f916 	bl	8007b54 <SDMMC_GetCmdResp2>
 8007928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800792a:	69fb      	ldr	r3, [r7, #28]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007942:	2303      	movs	r3, #3
 8007944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007946:	2340      	movs	r3, #64	; 0x40
 8007948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800794e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007954:	f107 0308 	add.w	r3, r7, #8
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fe2c 	bl	80075b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	2103      	movs	r1, #3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f97b 	bl	8007c60 <SDMMC_GetCmdResp6>
 800796a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800796c:	69fb      	ldr	r3, [r7, #28]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	460b      	mov	r3, r1
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007986:	4b70      	ldr	r3, [pc, #448]	; (8007b48 <SDMMC_GetCmdResp1+0x1d0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a70      	ldr	r2, [pc, #448]	; (8007b4c <SDMMC_GetCmdResp1+0x1d4>)
 800798c:	fba2 2303 	umull	r2, r3, r2, r3
 8007990:	0a5a      	lsrs	r2, r3, #9
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	fb02 f303 	mul.w	r3, r2, r3
 8007998:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	1e5a      	subs	r2, r3, #1
 800799e:	61fa      	str	r2, [r7, #28]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079a8:	e0c9      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0ef      	beq.n	800799a <SDMMC_GetCmdResp1+0x22>
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ea      	bne.n	800799a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2204      	movs	r2, #4
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079d6:	2304      	movs	r3, #4
 80079d8:	e0b1      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0a6      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	22c5      	movs	r2, #197	; 0xc5
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff fe08 	bl	800760c <SDMMC_GetCommandResponse>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d001      	beq.n	8007a0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e099      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff fe0a 	bl	8007626 <SDMMC_GetResponse>
 8007a12:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4b4e      	ldr	r3, [pc, #312]	; (8007b50 <SDMMC_GetCmdResp1+0x1d8>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e08d      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da02      	bge.n	8007a2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a2c:	e087      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007a38:	2340      	movs	r3, #64	; 0x40
 8007a3a:	e080      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a46:	2380      	movs	r3, #128	; 0x80
 8007a48:	e079      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a58:	e071      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a68:	e069      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a78:	e061      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a88:	e059      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a98:	e051      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aa8:	e049      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ab8:	e041      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac8:	e039      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ad8:	e031      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ae8:	e029      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007af4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007af8:	e021      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007b04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b08:	e019      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007b14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b18:	e011      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007b24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b28:	e009      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007b34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b38:	e001      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000000 	.word	0x20000000
 8007b4c:	10624dd3 	.word	0x10624dd3
 8007b50:	fdffe008 	.word	0xfdffe008

08007b54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b5c:	4b1f      	ldr	r3, [pc, #124]	; (8007bdc <SDMMC_GetCmdResp2+0x88>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <SDMMC_GetCmdResp2+0x8c>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	0a5b      	lsrs	r3, r3, #9
 8007b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
 8007b70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	1e5a      	subs	r2, r3, #1
 8007b76:	60fa      	str	r2, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b80:	e026      	b.n	8007bd0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ef      	beq.n	8007b72 <SDMMC_GetCmdResp2+0x1e>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1ea      	bne.n	8007b72 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2204      	movs	r2, #4
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bae:	2304      	movs	r3, #4
 8007bb0:	e00e      	b.n	8007bd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e003      	b.n	8007bd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	22c5      	movs	r2, #197	; 0xc5
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	20000000 	.word	0x20000000
 8007be0:	10624dd3 	.word	0x10624dd3

08007be4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <SDMMC_GetCmdResp3+0x74>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1a      	ldr	r2, [pc, #104]	; (8007c5c <SDMMC_GetCmdResp3+0x78>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	0a5b      	lsrs	r3, r3, #9
 8007bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
 8007c00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1e5a      	subs	r2, r3, #1
 8007c06:	60fa      	str	r2, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c10:	e01b      	b.n	8007c4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0ef      	beq.n	8007c02 <SDMMC_GetCmdResp3+0x1e>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1ea      	bne.n	8007c02 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c3e:	2304      	movs	r3, #4
 8007c40:	e003      	b.n	8007c4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	22c5      	movs	r2, #197	; 0xc5
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000000 	.word	0x20000000
 8007c5c:	10624dd3 	.word	0x10624dd3

08007c60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c6e:	4b35      	ldr	r3, [pc, #212]	; (8007d44 <SDMMC_GetCmdResp6+0xe4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a35      	ldr	r2, [pc, #212]	; (8007d48 <SDMMC_GetCmdResp6+0xe8>)
 8007c74:	fba2 2303 	umull	r2, r3, r2, r3
 8007c78:	0a5b      	lsrs	r3, r3, #9
 8007c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
 8007c82:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	1e5a      	subs	r2, r3, #1
 8007c88:	61fa      	str	r2, [r7, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c92:	e052      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0ef      	beq.n	8007c84 <SDMMC_GetCmdResp6+0x24>
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1ea      	bne.n	8007c84 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d004      	beq.n	8007cc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	e03a      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e02f      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fc96 	bl	800760c <SDMMC_GetCommandResponse>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d001      	beq.n	8007cee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e025      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	22c5      	movs	r2, #197	; 0xc5
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fc95 	bl	8007626 <SDMMC_GetResponse>
 8007cfc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	0c1b      	lsrs	r3, r3, #16
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e011      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d24:	e009      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d34:	e001      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000000 	.word	0x20000000
 8007d48:	10624dd3 	.word	0x10624dd3

08007d4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d54:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <SDMMC_GetCmdResp7+0x94>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a22      	ldr	r2, [pc, #136]	; (8007de4 <SDMMC_GetCmdResp7+0x98>)
 8007d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5e:	0a5b      	lsrs	r3, r3, #9
 8007d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d64:	fb02 f303 	mul.w	r3, r2, r3
 8007d68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	60fa      	str	r2, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d78:	e02c      	b.n	8007dd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0ef      	beq.n	8007d6a <SDMMC_GetCmdResp7+0x1e>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ea      	bne.n	8007d6a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007da6:	2304      	movs	r3, #4
 8007da8:	e014      	b.n	8007dd4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e009      	b.n	8007dd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2240      	movs	r2, #64	; 0x40
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007dd2:	2300      	movs	r3, #0
  
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	20000000 	.word	0x20000000
 8007de4:	10624dd3 	.word	0x10624dd3

08007de8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007df0:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <SDMMC_GetCmdError+0x50>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <SDMMC_GetCmdError+0x54>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	0a5b      	lsrs	r3, r3, #9
 8007dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e00:	fb02 f303 	mul.w	r3, r2, r3
 8007e04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1e5a      	subs	r2, r3, #1
 8007e0a:	60fa      	str	r2, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e14:	e009      	b.n	8007e2a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0f1      	beq.n	8007e06 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	22c5      	movs	r2, #197	; 0xc5
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000000 	.word	0x20000000
 8007e3c:	10624dd3 	.word	0x10624dd3

08007e40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e40:	b084      	sub	sp, #16
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	f107 001c 	add.w	r0, r7, #28
 8007e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d120      	bne.n	8007e9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	4b20      	ldr	r3, [pc, #128]	; (8007eec <USB_CoreInit+0xac>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d105      	bne.n	8007e8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa92 	bl	80083b8 <USB_CoreReset>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
 8007e98:	e010      	b.n	8007ebc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa86 	bl	80083b8 <USB_CoreReset>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d10b      	bne.n	8007eda <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f043 0206 	orr.w	r2, r3, #6
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f043 0220 	orr.w	r2, r3, #32
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ee6:	b004      	add	sp, #16
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	ffbdffbf 	.word	0xffbdffbf

08007ef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f023 0201 	bic.w	r2, r3, #1
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d115      	bne.n	8007f60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f40:	2001      	movs	r0, #1
 8007f42:	f7f9 fdab 	bl	8001a9c <HAL_Delay>
      ms++;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fa25 	bl	800839c <USB_GetMode>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d01e      	beq.n	8007f96 <USB_SetCurrentMode+0x84>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b31      	cmp	r3, #49	; 0x31
 8007f5c:	d9f0      	bls.n	8007f40 <USB_SetCurrentMode+0x2e>
 8007f5e:	e01a      	b.n	8007f96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d115      	bne.n	8007f92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f72:	2001      	movs	r0, #1
 8007f74:	f7f9 fd92 	bl	8001a9c <HAL_Delay>
      ms++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa0c 	bl	800839c <USB_GetMode>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <USB_SetCurrentMode+0x84>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b31      	cmp	r3, #49	; 0x31
 8007f8e:	d9f0      	bls.n	8007f72 <USB_SetCurrentMode+0x60>
 8007f90:	e001      	b.n	8007f96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e005      	b.n	8007fa2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b32      	cmp	r3, #50	; 0x32
 8007f9a:	d101      	bne.n	8007fa0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fac:	b084      	sub	sp, #16
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b086      	sub	sp, #24
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	e009      	b.n	8007fe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	3340      	adds	r3, #64	; 0x40
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b0e      	cmp	r3, #14
 8007fe4:	d9f2      	bls.n	8007fcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d11c      	bne.n	8008026 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ffa:	f043 0302 	orr.w	r3, r3, #2
 8007ffe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008004:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e005      	b.n	8008032 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008038:	461a      	mov	r2, r3
 800803a:	2300      	movs	r3, #0
 800803c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008044:	4619      	mov	r1, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804c:	461a      	mov	r2, r3
 800804e:	680b      	ldr	r3, [r1, #0]
 8008050:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	2b01      	cmp	r3, #1
 8008056:	d10c      	bne.n	8008072 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800805e:	2100      	movs	r1, #0
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f961 	bl	8008328 <USB_SetDevSpeed>
 8008066:	e008      	b.n	800807a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008068:	2101      	movs	r1, #1
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f95c 	bl	8008328 <USB_SetDevSpeed>
 8008070:	e003      	b.n	800807a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008072:	2103      	movs	r1, #3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f957 	bl	8008328 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800807a:	2110      	movs	r1, #16
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f8f3 	bl	8008268 <USB_FlushTxFifo>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f91d 	bl	80082cc <USB_FlushRxFifo>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	461a      	mov	r2, r3
 80080a4:	2300      	movs	r3, #0
 80080a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ae:	461a      	mov	r2, r3
 80080b0:	2300      	movs	r3, #0
 80080b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ba:	461a      	mov	r2, r3
 80080bc:	2300      	movs	r3, #0
 80080be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080c0:	2300      	movs	r3, #0
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	e043      	b.n	800814e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080dc:	d118      	bne.n	8008110 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f0:	461a      	mov	r2, r3
 80080f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	e013      	b.n	8008122 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008106:	461a      	mov	r2, r3
 8008108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	e008      	b.n	8008122 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	461a      	mov	r2, r3
 800811e:	2300      	movs	r3, #0
 8008120:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812e:	461a      	mov	r2, r3
 8008130:	2300      	movs	r3, #0
 8008132:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008140:	461a      	mov	r2, r3
 8008142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008146:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3301      	adds	r3, #1
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	429a      	cmp	r2, r3
 8008154:	d3b7      	bcc.n	80080c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008156:	2300      	movs	r3, #0
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	e043      	b.n	80081e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800816e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008172:	d118      	bne.n	80081a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008186:	461a      	mov	r2, r3
 8008188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	e013      	b.n	80081b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	461a      	mov	r2, r3
 800819e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	e008      	b.n	80081b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b2:	461a      	mov	r2, r3
 80081b4:	2300      	movs	r3, #0
 80081b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c4:	461a      	mov	r2, r3
 80081c6:	2300      	movs	r3, #0
 80081c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d6:	461a      	mov	r2, r3
 80081d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3301      	adds	r3, #1
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3b7      	bcc.n	800815c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800820c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f043 0210 	orr.w	r2, r3, #16
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <USB_DevInit+0x2b4>)
 8008226:	4313      	orrs	r3, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d005      	beq.n	800823e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f043 0208 	orr.w	r2, r3, #8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800823e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d105      	bne.n	8008250 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699a      	ldr	r2, [r3, #24]
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <USB_DevInit+0x2b8>)
 800824a:	4313      	orrs	r3, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800825c:	b004      	add	sp, #16
 800825e:	4770      	bx	lr
 8008260:	803c3800 	.word	0x803c3800
 8008264:	40000004 	.word	0x40000004

08008268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	4a12      	ldr	r2, [pc, #72]	; (80082c8 <USB_FlushTxFifo+0x60>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e01a      	b.n	80082bc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	daf3      	bge.n	8008276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	019b      	lsls	r3, r3, #6
 8008296:	f043 0220 	orr.w	r2, r3, #32
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <USB_FlushTxFifo+0x60>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e006      	b.n	80082bc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d0f1      	beq.n	800829e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	00030d40 	.word	0x00030d40

080082cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	4a11      	ldr	r2, [pc, #68]	; (8008324 <USB_FlushRxFifo+0x58>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d901      	bls.n	80082e8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e017      	b.n	8008318 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	daf3      	bge.n	80082d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2210      	movs	r2, #16
 80082f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	4a08      	ldr	r2, [pc, #32]	; (8008324 <USB_FlushRxFifo+0x58>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d901      	bls.n	800830a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e006      	b.n	8008318 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	2b10      	cmp	r3, #16
 8008314:	d0f1      	beq.n	80082fa <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	00030d40 	.word	0x00030d40

08008328 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008348:	4313      	orrs	r3, r2
 800834a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008374:	f023 0303 	bic.w	r3, r3, #3
 8008378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008388:	f043 0302 	orr.w	r3, r3, #2
 800838c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	f003 0301 	and.w	r3, r3, #1
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	4a13      	ldr	r2, [pc, #76]	; (8008418 <USB_CoreReset+0x60>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d901      	bls.n	80083d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e01a      	b.n	800840a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	daf3      	bge.n	80083c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	f043 0201 	orr.w	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	4a09      	ldr	r2, [pc, #36]	; (8008418 <USB_CoreReset+0x60>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d901      	bls.n	80083fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e006      	b.n	800840a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b01      	cmp	r3, #1
 8008406:	d0f1      	beq.n	80083ec <USB_CoreReset+0x34>

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	00030d40 	.word	0x00030d40

0800841c <__errno>:
 800841c:	4b01      	ldr	r3, [pc, #4]	; (8008424 <__errno+0x8>)
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	2000000c 	.word	0x2000000c

08008428 <__libc_init_array>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	4d0d      	ldr	r5, [pc, #52]	; (8008460 <__libc_init_array+0x38>)
 800842c:	4c0d      	ldr	r4, [pc, #52]	; (8008464 <__libc_init_array+0x3c>)
 800842e:	1b64      	subs	r4, r4, r5
 8008430:	10a4      	asrs	r4, r4, #2
 8008432:	2600      	movs	r6, #0
 8008434:	42a6      	cmp	r6, r4
 8008436:	d109      	bne.n	800844c <__libc_init_array+0x24>
 8008438:	4d0b      	ldr	r5, [pc, #44]	; (8008468 <__libc_init_array+0x40>)
 800843a:	4c0c      	ldr	r4, [pc, #48]	; (800846c <__libc_init_array+0x44>)
 800843c:	f000 fc62 	bl	8008d04 <_init>
 8008440:	1b64      	subs	r4, r4, r5
 8008442:	10a4      	asrs	r4, r4, #2
 8008444:	2600      	movs	r6, #0
 8008446:	42a6      	cmp	r6, r4
 8008448:	d105      	bne.n	8008456 <__libc_init_array+0x2e>
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008450:	4798      	blx	r3
 8008452:	3601      	adds	r6, #1
 8008454:	e7ee      	b.n	8008434 <__libc_init_array+0xc>
 8008456:	f855 3b04 	ldr.w	r3, [r5], #4
 800845a:	4798      	blx	r3
 800845c:	3601      	adds	r6, #1
 800845e:	e7f2      	b.n	8008446 <__libc_init_array+0x1e>
 8008460:	08008d98 	.word	0x08008d98
 8008464:	08008d98 	.word	0x08008d98
 8008468:	08008d98 	.word	0x08008d98
 800846c:	08008d9c 	.word	0x08008d9c

08008470 <memset>:
 8008470:	4402      	add	r2, r0
 8008472:	4603      	mov	r3, r0
 8008474:	4293      	cmp	r3, r2
 8008476:	d100      	bne.n	800847a <memset+0xa>
 8008478:	4770      	bx	lr
 800847a:	f803 1b01 	strb.w	r1, [r3], #1
 800847e:	e7f9      	b.n	8008474 <memset+0x4>

08008480 <sniprintf>:
 8008480:	b40c      	push	{r2, r3}
 8008482:	b530      	push	{r4, r5, lr}
 8008484:	4b17      	ldr	r3, [pc, #92]	; (80084e4 <sniprintf+0x64>)
 8008486:	1e0c      	subs	r4, r1, #0
 8008488:	681d      	ldr	r5, [r3, #0]
 800848a:	b09d      	sub	sp, #116	; 0x74
 800848c:	da08      	bge.n	80084a0 <sniprintf+0x20>
 800848e:	238b      	movs	r3, #139	; 0x8b
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008496:	b01d      	add	sp, #116	; 0x74
 8008498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800849c:	b002      	add	sp, #8
 800849e:	4770      	bx	lr
 80084a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80084a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084a8:	bf14      	ite	ne
 80084aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80084ae:	4623      	moveq	r3, r4
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	9307      	str	r3, [sp, #28]
 80084b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084b8:	9002      	str	r0, [sp, #8]
 80084ba:	9006      	str	r0, [sp, #24]
 80084bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084c2:	ab21      	add	r3, sp, #132	; 0x84
 80084c4:	a902      	add	r1, sp, #8
 80084c6:	4628      	mov	r0, r5
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	f000 f869 	bl	80085a0 <_svfiprintf_r>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	bfbc      	itt	lt
 80084d2:	238b      	movlt	r3, #139	; 0x8b
 80084d4:	602b      	strlt	r3, [r5, #0]
 80084d6:	2c00      	cmp	r4, #0
 80084d8:	d0dd      	beq.n	8008496 <sniprintf+0x16>
 80084da:	9b02      	ldr	r3, [sp, #8]
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
 80084e0:	e7d9      	b.n	8008496 <sniprintf+0x16>
 80084e2:	bf00      	nop
 80084e4:	2000000c 	.word	0x2000000c

080084e8 <__ssputs_r>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	688e      	ldr	r6, [r1, #8]
 80084ee:	429e      	cmp	r6, r3
 80084f0:	4682      	mov	sl, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	4690      	mov	r8, r2
 80084f6:	461f      	mov	r7, r3
 80084f8:	d838      	bhi.n	800856c <__ssputs_r+0x84>
 80084fa:	898a      	ldrh	r2, [r1, #12]
 80084fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008500:	d032      	beq.n	8008568 <__ssputs_r+0x80>
 8008502:	6825      	ldr	r5, [r4, #0]
 8008504:	6909      	ldr	r1, [r1, #16]
 8008506:	eba5 0901 	sub.w	r9, r5, r1
 800850a:	6965      	ldr	r5, [r4, #20]
 800850c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008514:	3301      	adds	r3, #1
 8008516:	444b      	add	r3, r9
 8008518:	106d      	asrs	r5, r5, #1
 800851a:	429d      	cmp	r5, r3
 800851c:	bf38      	it	cc
 800851e:	461d      	movcc	r5, r3
 8008520:	0553      	lsls	r3, r2, #21
 8008522:	d531      	bpl.n	8008588 <__ssputs_r+0xa0>
 8008524:	4629      	mov	r1, r5
 8008526:	f000 fb47 	bl	8008bb8 <_malloc_r>
 800852a:	4606      	mov	r6, r0
 800852c:	b950      	cbnz	r0, 8008544 <__ssputs_r+0x5c>
 800852e:	230c      	movs	r3, #12
 8008530:	f8ca 3000 	str.w	r3, [sl]
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008544:	6921      	ldr	r1, [r4, #16]
 8008546:	464a      	mov	r2, r9
 8008548:	f000 fabe 	bl	8008ac8 <memcpy>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	6126      	str	r6, [r4, #16]
 800855a:	6165      	str	r5, [r4, #20]
 800855c:	444e      	add	r6, r9
 800855e:	eba5 0509 	sub.w	r5, r5, r9
 8008562:	6026      	str	r6, [r4, #0]
 8008564:	60a5      	str	r5, [r4, #8]
 8008566:	463e      	mov	r6, r7
 8008568:	42be      	cmp	r6, r7
 800856a:	d900      	bls.n	800856e <__ssputs_r+0x86>
 800856c:	463e      	mov	r6, r7
 800856e:	4632      	mov	r2, r6
 8008570:	6820      	ldr	r0, [r4, #0]
 8008572:	4641      	mov	r1, r8
 8008574:	f000 fab6 	bl	8008ae4 <memmove>
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	6822      	ldr	r2, [r4, #0]
 800857c:	1b9b      	subs	r3, r3, r6
 800857e:	4432      	add	r2, r6
 8008580:	60a3      	str	r3, [r4, #8]
 8008582:	6022      	str	r2, [r4, #0]
 8008584:	2000      	movs	r0, #0
 8008586:	e7db      	b.n	8008540 <__ssputs_r+0x58>
 8008588:	462a      	mov	r2, r5
 800858a:	f000 fb6f 	bl	8008c6c <_realloc_r>
 800858e:	4606      	mov	r6, r0
 8008590:	2800      	cmp	r0, #0
 8008592:	d1e1      	bne.n	8008558 <__ssputs_r+0x70>
 8008594:	6921      	ldr	r1, [r4, #16]
 8008596:	4650      	mov	r0, sl
 8008598:	f000 fabe 	bl	8008b18 <_free_r>
 800859c:	e7c7      	b.n	800852e <__ssputs_r+0x46>
	...

080085a0 <_svfiprintf_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	4698      	mov	r8, r3
 80085a6:	898b      	ldrh	r3, [r1, #12]
 80085a8:	061b      	lsls	r3, r3, #24
 80085aa:	b09d      	sub	sp, #116	; 0x74
 80085ac:	4607      	mov	r7, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	4614      	mov	r4, r2
 80085b2:	d50e      	bpl.n	80085d2 <_svfiprintf_r+0x32>
 80085b4:	690b      	ldr	r3, [r1, #16]
 80085b6:	b963      	cbnz	r3, 80085d2 <_svfiprintf_r+0x32>
 80085b8:	2140      	movs	r1, #64	; 0x40
 80085ba:	f000 fafd 	bl	8008bb8 <_malloc_r>
 80085be:	6028      	str	r0, [r5, #0]
 80085c0:	6128      	str	r0, [r5, #16]
 80085c2:	b920      	cbnz	r0, 80085ce <_svfiprintf_r+0x2e>
 80085c4:	230c      	movs	r3, #12
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085cc:	e0d1      	b.n	8008772 <_svfiprintf_r+0x1d2>
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	616b      	str	r3, [r5, #20]
 80085d2:	2300      	movs	r3, #0
 80085d4:	9309      	str	r3, [sp, #36]	; 0x24
 80085d6:	2320      	movs	r3, #32
 80085d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e0:	2330      	movs	r3, #48	; 0x30
 80085e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800878c <_svfiprintf_r+0x1ec>
 80085e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085ea:	f04f 0901 	mov.w	r9, #1
 80085ee:	4623      	mov	r3, r4
 80085f0:	469a      	mov	sl, r3
 80085f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f6:	b10a      	cbz	r2, 80085fc <_svfiprintf_r+0x5c>
 80085f8:	2a25      	cmp	r2, #37	; 0x25
 80085fa:	d1f9      	bne.n	80085f0 <_svfiprintf_r+0x50>
 80085fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008600:	d00b      	beq.n	800861a <_svfiprintf_r+0x7a>
 8008602:	465b      	mov	r3, fp
 8008604:	4622      	mov	r2, r4
 8008606:	4629      	mov	r1, r5
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff ff6d 	bl	80084e8 <__ssputs_r>
 800860e:	3001      	adds	r0, #1
 8008610:	f000 80aa 	beq.w	8008768 <_svfiprintf_r+0x1c8>
 8008614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008616:	445a      	add	r2, fp
 8008618:	9209      	str	r2, [sp, #36]	; 0x24
 800861a:	f89a 3000 	ldrb.w	r3, [sl]
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80a2 	beq.w	8008768 <_svfiprintf_r+0x1c8>
 8008624:	2300      	movs	r3, #0
 8008626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800862a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862e:	f10a 0a01 	add.w	sl, sl, #1
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	9307      	str	r3, [sp, #28]
 8008636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800863a:	931a      	str	r3, [sp, #104]	; 0x68
 800863c:	4654      	mov	r4, sl
 800863e:	2205      	movs	r2, #5
 8008640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008644:	4851      	ldr	r0, [pc, #324]	; (800878c <_svfiprintf_r+0x1ec>)
 8008646:	f7f7 fdfb 	bl	8000240 <memchr>
 800864a:	9a04      	ldr	r2, [sp, #16]
 800864c:	b9d8      	cbnz	r0, 8008686 <_svfiprintf_r+0xe6>
 800864e:	06d0      	lsls	r0, r2, #27
 8008650:	bf44      	itt	mi
 8008652:	2320      	movmi	r3, #32
 8008654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008658:	0711      	lsls	r1, r2, #28
 800865a:	bf44      	itt	mi
 800865c:	232b      	movmi	r3, #43	; 0x2b
 800865e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008662:	f89a 3000 	ldrb.w	r3, [sl]
 8008666:	2b2a      	cmp	r3, #42	; 0x2a
 8008668:	d015      	beq.n	8008696 <_svfiprintf_r+0xf6>
 800866a:	9a07      	ldr	r2, [sp, #28]
 800866c:	4654      	mov	r4, sl
 800866e:	2000      	movs	r0, #0
 8008670:	f04f 0c0a 	mov.w	ip, #10
 8008674:	4621      	mov	r1, r4
 8008676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800867a:	3b30      	subs	r3, #48	; 0x30
 800867c:	2b09      	cmp	r3, #9
 800867e:	d94e      	bls.n	800871e <_svfiprintf_r+0x17e>
 8008680:	b1b0      	cbz	r0, 80086b0 <_svfiprintf_r+0x110>
 8008682:	9207      	str	r2, [sp, #28]
 8008684:	e014      	b.n	80086b0 <_svfiprintf_r+0x110>
 8008686:	eba0 0308 	sub.w	r3, r0, r8
 800868a:	fa09 f303 	lsl.w	r3, r9, r3
 800868e:	4313      	orrs	r3, r2
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	46a2      	mov	sl, r4
 8008694:	e7d2      	b.n	800863c <_svfiprintf_r+0x9c>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	1d19      	adds	r1, r3, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	9103      	str	r1, [sp, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bfbb      	ittet	lt
 80086a2:	425b      	neglt	r3, r3
 80086a4:	f042 0202 	orrlt.w	r2, r2, #2
 80086a8:	9307      	strge	r3, [sp, #28]
 80086aa:	9307      	strlt	r3, [sp, #28]
 80086ac:	bfb8      	it	lt
 80086ae:	9204      	strlt	r2, [sp, #16]
 80086b0:	7823      	ldrb	r3, [r4, #0]
 80086b2:	2b2e      	cmp	r3, #46	; 0x2e
 80086b4:	d10c      	bne.n	80086d0 <_svfiprintf_r+0x130>
 80086b6:	7863      	ldrb	r3, [r4, #1]
 80086b8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ba:	d135      	bne.n	8008728 <_svfiprintf_r+0x188>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	9203      	str	r2, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bfb8      	it	lt
 80086c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086cc:	3402      	adds	r4, #2
 80086ce:	9305      	str	r3, [sp, #20]
 80086d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800879c <_svfiprintf_r+0x1fc>
 80086d4:	7821      	ldrb	r1, [r4, #0]
 80086d6:	2203      	movs	r2, #3
 80086d8:	4650      	mov	r0, sl
 80086da:	f7f7 fdb1 	bl	8000240 <memchr>
 80086de:	b140      	cbz	r0, 80086f2 <_svfiprintf_r+0x152>
 80086e0:	2340      	movs	r3, #64	; 0x40
 80086e2:	eba0 000a 	sub.w	r0, r0, sl
 80086e6:	fa03 f000 	lsl.w	r0, r3, r0
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	4303      	orrs	r3, r0
 80086ee:	3401      	adds	r4, #1
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f6:	4826      	ldr	r0, [pc, #152]	; (8008790 <_svfiprintf_r+0x1f0>)
 80086f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086fc:	2206      	movs	r2, #6
 80086fe:	f7f7 fd9f 	bl	8000240 <memchr>
 8008702:	2800      	cmp	r0, #0
 8008704:	d038      	beq.n	8008778 <_svfiprintf_r+0x1d8>
 8008706:	4b23      	ldr	r3, [pc, #140]	; (8008794 <_svfiprintf_r+0x1f4>)
 8008708:	bb1b      	cbnz	r3, 8008752 <_svfiprintf_r+0x1b2>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	3307      	adds	r3, #7
 800870e:	f023 0307 	bic.w	r3, r3, #7
 8008712:	3308      	adds	r3, #8
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008718:	4433      	add	r3, r6
 800871a:	9309      	str	r3, [sp, #36]	; 0x24
 800871c:	e767      	b.n	80085ee <_svfiprintf_r+0x4e>
 800871e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008722:	460c      	mov	r4, r1
 8008724:	2001      	movs	r0, #1
 8008726:	e7a5      	b.n	8008674 <_svfiprintf_r+0xd4>
 8008728:	2300      	movs	r3, #0
 800872a:	3401      	adds	r4, #1
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	4619      	mov	r1, r3
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4620      	mov	r0, r4
 8008736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800873a:	3a30      	subs	r2, #48	; 0x30
 800873c:	2a09      	cmp	r2, #9
 800873e:	d903      	bls.n	8008748 <_svfiprintf_r+0x1a8>
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0c5      	beq.n	80086d0 <_svfiprintf_r+0x130>
 8008744:	9105      	str	r1, [sp, #20]
 8008746:	e7c3      	b.n	80086d0 <_svfiprintf_r+0x130>
 8008748:	fb0c 2101 	mla	r1, ip, r1, r2
 800874c:	4604      	mov	r4, r0
 800874e:	2301      	movs	r3, #1
 8008750:	e7f0      	b.n	8008734 <_svfiprintf_r+0x194>
 8008752:	ab03      	add	r3, sp, #12
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <_svfiprintf_r+0x1f8>)
 800875a:	a904      	add	r1, sp, #16
 800875c:	4638      	mov	r0, r7
 800875e:	f3af 8000 	nop.w
 8008762:	1c42      	adds	r2, r0, #1
 8008764:	4606      	mov	r6, r0
 8008766:	d1d6      	bne.n	8008716 <_svfiprintf_r+0x176>
 8008768:	89ab      	ldrh	r3, [r5, #12]
 800876a:	065b      	lsls	r3, r3, #25
 800876c:	f53f af2c 	bmi.w	80085c8 <_svfiprintf_r+0x28>
 8008770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008772:	b01d      	add	sp, #116	; 0x74
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	ab03      	add	r3, sp, #12
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	462a      	mov	r2, r5
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <_svfiprintf_r+0x1f8>)
 8008780:	a904      	add	r1, sp, #16
 8008782:	4638      	mov	r0, r7
 8008784:	f000 f87a 	bl	800887c <_printf_i>
 8008788:	e7eb      	b.n	8008762 <_svfiprintf_r+0x1c2>
 800878a:	bf00      	nop
 800878c:	08008d5c 	.word	0x08008d5c
 8008790:	08008d66 	.word	0x08008d66
 8008794:	00000000 	.word	0x00000000
 8008798:	080084e9 	.word	0x080084e9
 800879c:	08008d62 	.word	0x08008d62

080087a0 <_printf_common>:
 80087a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	4616      	mov	r6, r2
 80087a6:	4699      	mov	r9, r3
 80087a8:	688a      	ldr	r2, [r1, #8]
 80087aa:	690b      	ldr	r3, [r1, #16]
 80087ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b0:	4293      	cmp	r3, r2
 80087b2:	bfb8      	it	lt
 80087b4:	4613      	movlt	r3, r2
 80087b6:	6033      	str	r3, [r6, #0]
 80087b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087bc:	4607      	mov	r7, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	b10a      	cbz	r2, 80087c6 <_printf_common+0x26>
 80087c2:	3301      	adds	r3, #1
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	0699      	lsls	r1, r3, #26
 80087ca:	bf42      	ittt	mi
 80087cc:	6833      	ldrmi	r3, [r6, #0]
 80087ce:	3302      	addmi	r3, #2
 80087d0:	6033      	strmi	r3, [r6, #0]
 80087d2:	6825      	ldr	r5, [r4, #0]
 80087d4:	f015 0506 	ands.w	r5, r5, #6
 80087d8:	d106      	bne.n	80087e8 <_printf_common+0x48>
 80087da:	f104 0a19 	add.w	sl, r4, #25
 80087de:	68e3      	ldr	r3, [r4, #12]
 80087e0:	6832      	ldr	r2, [r6, #0]
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	dc26      	bgt.n	8008836 <_printf_common+0x96>
 80087e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087ec:	1e13      	subs	r3, r2, #0
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	bf18      	it	ne
 80087f2:	2301      	movne	r3, #1
 80087f4:	0692      	lsls	r2, r2, #26
 80087f6:	d42b      	bmi.n	8008850 <_printf_common+0xb0>
 80087f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087fc:	4649      	mov	r1, r9
 80087fe:	4638      	mov	r0, r7
 8008800:	47c0      	blx	r8
 8008802:	3001      	adds	r0, #1
 8008804:	d01e      	beq.n	8008844 <_printf_common+0xa4>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	68e5      	ldr	r5, [r4, #12]
 800880a:	6832      	ldr	r2, [r6, #0]
 800880c:	f003 0306 	and.w	r3, r3, #6
 8008810:	2b04      	cmp	r3, #4
 8008812:	bf08      	it	eq
 8008814:	1aad      	subeq	r5, r5, r2
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	bf0c      	ite	eq
 800881c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008820:	2500      	movne	r5, #0
 8008822:	4293      	cmp	r3, r2
 8008824:	bfc4      	itt	gt
 8008826:	1a9b      	subgt	r3, r3, r2
 8008828:	18ed      	addgt	r5, r5, r3
 800882a:	2600      	movs	r6, #0
 800882c:	341a      	adds	r4, #26
 800882e:	42b5      	cmp	r5, r6
 8008830:	d11a      	bne.n	8008868 <_printf_common+0xc8>
 8008832:	2000      	movs	r0, #0
 8008834:	e008      	b.n	8008848 <_printf_common+0xa8>
 8008836:	2301      	movs	r3, #1
 8008838:	4652      	mov	r2, sl
 800883a:	4649      	mov	r1, r9
 800883c:	4638      	mov	r0, r7
 800883e:	47c0      	blx	r8
 8008840:	3001      	adds	r0, #1
 8008842:	d103      	bne.n	800884c <_printf_common+0xac>
 8008844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	3501      	adds	r5, #1
 800884e:	e7c6      	b.n	80087de <_printf_common+0x3e>
 8008850:	18e1      	adds	r1, r4, r3
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	2030      	movs	r0, #48	; 0x30
 8008856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800885a:	4422      	add	r2, r4
 800885c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008864:	3302      	adds	r3, #2
 8008866:	e7c7      	b.n	80087f8 <_printf_common+0x58>
 8008868:	2301      	movs	r3, #1
 800886a:	4622      	mov	r2, r4
 800886c:	4649      	mov	r1, r9
 800886e:	4638      	mov	r0, r7
 8008870:	47c0      	blx	r8
 8008872:	3001      	adds	r0, #1
 8008874:	d0e6      	beq.n	8008844 <_printf_common+0xa4>
 8008876:	3601      	adds	r6, #1
 8008878:	e7d9      	b.n	800882e <_printf_common+0x8e>
	...

0800887c <_printf_i>:
 800887c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	460c      	mov	r4, r1
 8008882:	4691      	mov	r9, r2
 8008884:	7e27      	ldrb	r7, [r4, #24]
 8008886:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008888:	2f78      	cmp	r7, #120	; 0x78
 800888a:	4680      	mov	r8, r0
 800888c:	469a      	mov	sl, r3
 800888e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008892:	d807      	bhi.n	80088a4 <_printf_i+0x28>
 8008894:	2f62      	cmp	r7, #98	; 0x62
 8008896:	d80a      	bhi.n	80088ae <_printf_i+0x32>
 8008898:	2f00      	cmp	r7, #0
 800889a:	f000 80d8 	beq.w	8008a4e <_printf_i+0x1d2>
 800889e:	2f58      	cmp	r7, #88	; 0x58
 80088a0:	f000 80a3 	beq.w	80089ea <_printf_i+0x16e>
 80088a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088ac:	e03a      	b.n	8008924 <_printf_i+0xa8>
 80088ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088b2:	2b15      	cmp	r3, #21
 80088b4:	d8f6      	bhi.n	80088a4 <_printf_i+0x28>
 80088b6:	a001      	add	r0, pc, #4	; (adr r0, 80088bc <_printf_i+0x40>)
 80088b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80088bc:	08008915 	.word	0x08008915
 80088c0:	08008929 	.word	0x08008929
 80088c4:	080088a5 	.word	0x080088a5
 80088c8:	080088a5 	.word	0x080088a5
 80088cc:	080088a5 	.word	0x080088a5
 80088d0:	080088a5 	.word	0x080088a5
 80088d4:	08008929 	.word	0x08008929
 80088d8:	080088a5 	.word	0x080088a5
 80088dc:	080088a5 	.word	0x080088a5
 80088e0:	080088a5 	.word	0x080088a5
 80088e4:	080088a5 	.word	0x080088a5
 80088e8:	08008a35 	.word	0x08008a35
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008a17 	.word	0x08008a17
 80088f4:	080088a5 	.word	0x080088a5
 80088f8:	080088a5 	.word	0x080088a5
 80088fc:	08008a57 	.word	0x08008a57
 8008900:	080088a5 	.word	0x080088a5
 8008904:	08008959 	.word	0x08008959
 8008908:	080088a5 	.word	0x080088a5
 800890c:	080088a5 	.word	0x080088a5
 8008910:	08008a1f 	.word	0x08008a1f
 8008914:	680b      	ldr	r3, [r1, #0]
 8008916:	1d1a      	adds	r2, r3, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	600a      	str	r2, [r1, #0]
 800891c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008924:	2301      	movs	r3, #1
 8008926:	e0a3      	b.n	8008a70 <_printf_i+0x1f4>
 8008928:	6825      	ldr	r5, [r4, #0]
 800892a:	6808      	ldr	r0, [r1, #0]
 800892c:	062e      	lsls	r6, r5, #24
 800892e:	f100 0304 	add.w	r3, r0, #4
 8008932:	d50a      	bpl.n	800894a <_printf_i+0xce>
 8008934:	6805      	ldr	r5, [r0, #0]
 8008936:	600b      	str	r3, [r1, #0]
 8008938:	2d00      	cmp	r5, #0
 800893a:	da03      	bge.n	8008944 <_printf_i+0xc8>
 800893c:	232d      	movs	r3, #45	; 0x2d
 800893e:	426d      	negs	r5, r5
 8008940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008944:	485e      	ldr	r0, [pc, #376]	; (8008ac0 <_printf_i+0x244>)
 8008946:	230a      	movs	r3, #10
 8008948:	e019      	b.n	800897e <_printf_i+0x102>
 800894a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800894e:	6805      	ldr	r5, [r0, #0]
 8008950:	600b      	str	r3, [r1, #0]
 8008952:	bf18      	it	ne
 8008954:	b22d      	sxthne	r5, r5
 8008956:	e7ef      	b.n	8008938 <_printf_i+0xbc>
 8008958:	680b      	ldr	r3, [r1, #0]
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	1d18      	adds	r0, r3, #4
 800895e:	6008      	str	r0, [r1, #0]
 8008960:	0628      	lsls	r0, r5, #24
 8008962:	d501      	bpl.n	8008968 <_printf_i+0xec>
 8008964:	681d      	ldr	r5, [r3, #0]
 8008966:	e002      	b.n	800896e <_printf_i+0xf2>
 8008968:	0669      	lsls	r1, r5, #25
 800896a:	d5fb      	bpl.n	8008964 <_printf_i+0xe8>
 800896c:	881d      	ldrh	r5, [r3, #0]
 800896e:	4854      	ldr	r0, [pc, #336]	; (8008ac0 <_printf_i+0x244>)
 8008970:	2f6f      	cmp	r7, #111	; 0x6f
 8008972:	bf0c      	ite	eq
 8008974:	2308      	moveq	r3, #8
 8008976:	230a      	movne	r3, #10
 8008978:	2100      	movs	r1, #0
 800897a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800897e:	6866      	ldr	r6, [r4, #4]
 8008980:	60a6      	str	r6, [r4, #8]
 8008982:	2e00      	cmp	r6, #0
 8008984:	bfa2      	ittt	ge
 8008986:	6821      	ldrge	r1, [r4, #0]
 8008988:	f021 0104 	bicge.w	r1, r1, #4
 800898c:	6021      	strge	r1, [r4, #0]
 800898e:	b90d      	cbnz	r5, 8008994 <_printf_i+0x118>
 8008990:	2e00      	cmp	r6, #0
 8008992:	d04d      	beq.n	8008a30 <_printf_i+0x1b4>
 8008994:	4616      	mov	r6, r2
 8008996:	fbb5 f1f3 	udiv	r1, r5, r3
 800899a:	fb03 5711 	mls	r7, r3, r1, r5
 800899e:	5dc7      	ldrb	r7, [r0, r7]
 80089a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089a4:	462f      	mov	r7, r5
 80089a6:	42bb      	cmp	r3, r7
 80089a8:	460d      	mov	r5, r1
 80089aa:	d9f4      	bls.n	8008996 <_printf_i+0x11a>
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d10b      	bne.n	80089c8 <_printf_i+0x14c>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	07df      	lsls	r7, r3, #31
 80089b4:	d508      	bpl.n	80089c8 <_printf_i+0x14c>
 80089b6:	6923      	ldr	r3, [r4, #16]
 80089b8:	6861      	ldr	r1, [r4, #4]
 80089ba:	4299      	cmp	r1, r3
 80089bc:	bfde      	ittt	le
 80089be:	2330      	movle	r3, #48	; 0x30
 80089c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089c4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80089c8:	1b92      	subs	r2, r2, r6
 80089ca:	6122      	str	r2, [r4, #16]
 80089cc:	f8cd a000 	str.w	sl, [sp]
 80089d0:	464b      	mov	r3, r9
 80089d2:	aa03      	add	r2, sp, #12
 80089d4:	4621      	mov	r1, r4
 80089d6:	4640      	mov	r0, r8
 80089d8:	f7ff fee2 	bl	80087a0 <_printf_common>
 80089dc:	3001      	adds	r0, #1
 80089de:	d14c      	bne.n	8008a7a <_printf_i+0x1fe>
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089e4:	b004      	add	sp, #16
 80089e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ea:	4835      	ldr	r0, [pc, #212]	; (8008ac0 <_printf_i+0x244>)
 80089ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	680e      	ldr	r6, [r1, #0]
 80089f4:	061f      	lsls	r7, r3, #24
 80089f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80089fa:	600e      	str	r6, [r1, #0]
 80089fc:	d514      	bpl.n	8008a28 <_printf_i+0x1ac>
 80089fe:	07d9      	lsls	r1, r3, #31
 8008a00:	bf44      	itt	mi
 8008a02:	f043 0320 	orrmi.w	r3, r3, #32
 8008a06:	6023      	strmi	r3, [r4, #0]
 8008a08:	b91d      	cbnz	r5, 8008a12 <_printf_i+0x196>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	f023 0320 	bic.w	r3, r3, #32
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	2310      	movs	r3, #16
 8008a14:	e7b0      	b.n	8008978 <_printf_i+0xfc>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	f043 0320 	orr.w	r3, r3, #32
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	2378      	movs	r3, #120	; 0x78
 8008a20:	4828      	ldr	r0, [pc, #160]	; (8008ac4 <_printf_i+0x248>)
 8008a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a26:	e7e3      	b.n	80089f0 <_printf_i+0x174>
 8008a28:	065e      	lsls	r6, r3, #25
 8008a2a:	bf48      	it	mi
 8008a2c:	b2ad      	uxthmi	r5, r5
 8008a2e:	e7e6      	b.n	80089fe <_printf_i+0x182>
 8008a30:	4616      	mov	r6, r2
 8008a32:	e7bb      	b.n	80089ac <_printf_i+0x130>
 8008a34:	680b      	ldr	r3, [r1, #0]
 8008a36:	6826      	ldr	r6, [r4, #0]
 8008a38:	6960      	ldr	r0, [r4, #20]
 8008a3a:	1d1d      	adds	r5, r3, #4
 8008a3c:	600d      	str	r5, [r1, #0]
 8008a3e:	0635      	lsls	r5, r6, #24
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	d501      	bpl.n	8008a48 <_printf_i+0x1cc>
 8008a44:	6018      	str	r0, [r3, #0]
 8008a46:	e002      	b.n	8008a4e <_printf_i+0x1d2>
 8008a48:	0671      	lsls	r1, r6, #25
 8008a4a:	d5fb      	bpl.n	8008a44 <_printf_i+0x1c8>
 8008a4c:	8018      	strh	r0, [r3, #0]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6123      	str	r3, [r4, #16]
 8008a52:	4616      	mov	r6, r2
 8008a54:	e7ba      	b.n	80089cc <_printf_i+0x150>
 8008a56:	680b      	ldr	r3, [r1, #0]
 8008a58:	1d1a      	adds	r2, r3, #4
 8008a5a:	600a      	str	r2, [r1, #0]
 8008a5c:	681e      	ldr	r6, [r3, #0]
 8008a5e:	6862      	ldr	r2, [r4, #4]
 8008a60:	2100      	movs	r1, #0
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7f7 fbec 	bl	8000240 <memchr>
 8008a68:	b108      	cbz	r0, 8008a6e <_printf_i+0x1f2>
 8008a6a:	1b80      	subs	r0, r0, r6
 8008a6c:	6060      	str	r0, [r4, #4]
 8008a6e:	6863      	ldr	r3, [r4, #4]
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	2300      	movs	r3, #0
 8008a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a78:	e7a8      	b.n	80089cc <_printf_i+0x150>
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4640      	mov	r0, r8
 8008a82:	47d0      	blx	sl
 8008a84:	3001      	adds	r0, #1
 8008a86:	d0ab      	beq.n	80089e0 <_printf_i+0x164>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	079b      	lsls	r3, r3, #30
 8008a8c:	d413      	bmi.n	8008ab6 <_printf_i+0x23a>
 8008a8e:	68e0      	ldr	r0, [r4, #12]
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	4298      	cmp	r0, r3
 8008a94:	bfb8      	it	lt
 8008a96:	4618      	movlt	r0, r3
 8008a98:	e7a4      	b.n	80089e4 <_printf_i+0x168>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	47d0      	blx	sl
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d09b      	beq.n	80089e0 <_printf_i+0x164>
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	9903      	ldr	r1, [sp, #12]
 8008aae:	1a5b      	subs	r3, r3, r1
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	dcf2      	bgt.n	8008a9a <_printf_i+0x21e>
 8008ab4:	e7eb      	b.n	8008a8e <_printf_i+0x212>
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	f104 0619 	add.w	r6, r4, #25
 8008abc:	e7f5      	b.n	8008aaa <_printf_i+0x22e>
 8008abe:	bf00      	nop
 8008ac0:	08008d6d 	.word	0x08008d6d
 8008ac4:	08008d7e 	.word	0x08008d7e

08008ac8 <memcpy>:
 8008ac8:	440a      	add	r2, r1
 8008aca:	4291      	cmp	r1, r2
 8008acc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ad0:	d100      	bne.n	8008ad4 <memcpy+0xc>
 8008ad2:	4770      	bx	lr
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	d1f9      	bne.n	8008ad6 <memcpy+0xe>
 8008ae2:	bd10      	pop	{r4, pc}

08008ae4 <memmove>:
 8008ae4:	4288      	cmp	r0, r1
 8008ae6:	b510      	push	{r4, lr}
 8008ae8:	eb01 0402 	add.w	r4, r1, r2
 8008aec:	d902      	bls.n	8008af4 <memmove+0x10>
 8008aee:	4284      	cmp	r4, r0
 8008af0:	4623      	mov	r3, r4
 8008af2:	d807      	bhi.n	8008b04 <memmove+0x20>
 8008af4:	1e43      	subs	r3, r0, #1
 8008af6:	42a1      	cmp	r1, r4
 8008af8:	d008      	beq.n	8008b0c <memmove+0x28>
 8008afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b02:	e7f8      	b.n	8008af6 <memmove+0x12>
 8008b04:	4402      	add	r2, r0
 8008b06:	4601      	mov	r1, r0
 8008b08:	428a      	cmp	r2, r1
 8008b0a:	d100      	bne.n	8008b0e <memmove+0x2a>
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b16:	e7f7      	b.n	8008b08 <memmove+0x24>

08008b18 <_free_r>:
 8008b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b1a:	2900      	cmp	r1, #0
 8008b1c:	d048      	beq.n	8008bb0 <_free_r+0x98>
 8008b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b22:	9001      	str	r0, [sp, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f1a1 0404 	sub.w	r4, r1, #4
 8008b2a:	bfb8      	it	lt
 8008b2c:	18e4      	addlt	r4, r4, r3
 8008b2e:	f000 f8d3 	bl	8008cd8 <__malloc_lock>
 8008b32:	4a20      	ldr	r2, [pc, #128]	; (8008bb4 <_free_r+0x9c>)
 8008b34:	9801      	ldr	r0, [sp, #4]
 8008b36:	6813      	ldr	r3, [r2, #0]
 8008b38:	4615      	mov	r5, r2
 8008b3a:	b933      	cbnz	r3, 8008b4a <_free_r+0x32>
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	6014      	str	r4, [r2, #0]
 8008b40:	b003      	add	sp, #12
 8008b42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b46:	f000 b8cd 	b.w	8008ce4 <__malloc_unlock>
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	d90b      	bls.n	8008b66 <_free_r+0x4e>
 8008b4e:	6821      	ldr	r1, [r4, #0]
 8008b50:	1862      	adds	r2, r4, r1
 8008b52:	4293      	cmp	r3, r2
 8008b54:	bf04      	itt	eq
 8008b56:	681a      	ldreq	r2, [r3, #0]
 8008b58:	685b      	ldreq	r3, [r3, #4]
 8008b5a:	6063      	str	r3, [r4, #4]
 8008b5c:	bf04      	itt	eq
 8008b5e:	1852      	addeq	r2, r2, r1
 8008b60:	6022      	streq	r2, [r4, #0]
 8008b62:	602c      	str	r4, [r5, #0]
 8008b64:	e7ec      	b.n	8008b40 <_free_r+0x28>
 8008b66:	461a      	mov	r2, r3
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	b10b      	cbz	r3, 8008b70 <_free_r+0x58>
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	d9fa      	bls.n	8008b66 <_free_r+0x4e>
 8008b70:	6811      	ldr	r1, [r2, #0]
 8008b72:	1855      	adds	r5, r2, r1
 8008b74:	42a5      	cmp	r5, r4
 8008b76:	d10b      	bne.n	8008b90 <_free_r+0x78>
 8008b78:	6824      	ldr	r4, [r4, #0]
 8008b7a:	4421      	add	r1, r4
 8008b7c:	1854      	adds	r4, r2, r1
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	6011      	str	r1, [r2, #0]
 8008b82:	d1dd      	bne.n	8008b40 <_free_r+0x28>
 8008b84:	681c      	ldr	r4, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	6053      	str	r3, [r2, #4]
 8008b8a:	4421      	add	r1, r4
 8008b8c:	6011      	str	r1, [r2, #0]
 8008b8e:	e7d7      	b.n	8008b40 <_free_r+0x28>
 8008b90:	d902      	bls.n	8008b98 <_free_r+0x80>
 8008b92:	230c      	movs	r3, #12
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	e7d3      	b.n	8008b40 <_free_r+0x28>
 8008b98:	6825      	ldr	r5, [r4, #0]
 8008b9a:	1961      	adds	r1, r4, r5
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf04      	itt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	6063      	str	r3, [r4, #4]
 8008ba6:	bf04      	itt	eq
 8008ba8:	1949      	addeq	r1, r1, r5
 8008baa:	6021      	streq	r1, [r4, #0]
 8008bac:	6054      	str	r4, [r2, #4]
 8008bae:	e7c7      	b.n	8008b40 <_free_r+0x28>
 8008bb0:	b003      	add	sp, #12
 8008bb2:	bd30      	pop	{r4, r5, pc}
 8008bb4:	20000094 	.word	0x20000094

08008bb8 <_malloc_r>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	1ccd      	adds	r5, r1, #3
 8008bbc:	f025 0503 	bic.w	r5, r5, #3
 8008bc0:	3508      	adds	r5, #8
 8008bc2:	2d0c      	cmp	r5, #12
 8008bc4:	bf38      	it	cc
 8008bc6:	250c      	movcc	r5, #12
 8008bc8:	2d00      	cmp	r5, #0
 8008bca:	4606      	mov	r6, r0
 8008bcc:	db01      	blt.n	8008bd2 <_malloc_r+0x1a>
 8008bce:	42a9      	cmp	r1, r5
 8008bd0:	d903      	bls.n	8008bda <_malloc_r+0x22>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bda:	f000 f87d 	bl	8008cd8 <__malloc_lock>
 8008bde:	4921      	ldr	r1, [pc, #132]	; (8008c64 <_malloc_r+0xac>)
 8008be0:	680a      	ldr	r2, [r1, #0]
 8008be2:	4614      	mov	r4, r2
 8008be4:	b99c      	cbnz	r4, 8008c0e <_malloc_r+0x56>
 8008be6:	4f20      	ldr	r7, [pc, #128]	; (8008c68 <_malloc_r+0xb0>)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	b923      	cbnz	r3, 8008bf6 <_malloc_r+0x3e>
 8008bec:	4621      	mov	r1, r4
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f000 f862 	bl	8008cb8 <_sbrk_r>
 8008bf4:	6038      	str	r0, [r7, #0]
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f000 f85d 	bl	8008cb8 <_sbrk_r>
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	d123      	bne.n	8008c4a <_malloc_r+0x92>
 8008c02:	230c      	movs	r3, #12
 8008c04:	6033      	str	r3, [r6, #0]
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 f86c 	bl	8008ce4 <__malloc_unlock>
 8008c0c:	e7e3      	b.n	8008bd6 <_malloc_r+0x1e>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	1b5b      	subs	r3, r3, r5
 8008c12:	d417      	bmi.n	8008c44 <_malloc_r+0x8c>
 8008c14:	2b0b      	cmp	r3, #11
 8008c16:	d903      	bls.n	8008c20 <_malloc_r+0x68>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	441c      	add	r4, r3
 8008c1c:	6025      	str	r5, [r4, #0]
 8008c1e:	e004      	b.n	8008c2a <_malloc_r+0x72>
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	42a2      	cmp	r2, r4
 8008c24:	bf0c      	ite	eq
 8008c26:	600b      	streq	r3, [r1, #0]
 8008c28:	6053      	strne	r3, [r2, #4]
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f000 f85a 	bl	8008ce4 <__malloc_unlock>
 8008c30:	f104 000b 	add.w	r0, r4, #11
 8008c34:	1d23      	adds	r3, r4, #4
 8008c36:	f020 0007 	bic.w	r0, r0, #7
 8008c3a:	1ac2      	subs	r2, r0, r3
 8008c3c:	d0cc      	beq.n	8008bd8 <_malloc_r+0x20>
 8008c3e:	1a1b      	subs	r3, r3, r0
 8008c40:	50a3      	str	r3, [r4, r2]
 8008c42:	e7c9      	b.n	8008bd8 <_malloc_r+0x20>
 8008c44:	4622      	mov	r2, r4
 8008c46:	6864      	ldr	r4, [r4, #4]
 8008c48:	e7cc      	b.n	8008be4 <_malloc_r+0x2c>
 8008c4a:	1cc4      	adds	r4, r0, #3
 8008c4c:	f024 0403 	bic.w	r4, r4, #3
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d0e3      	beq.n	8008c1c <_malloc_r+0x64>
 8008c54:	1a21      	subs	r1, r4, r0
 8008c56:	4630      	mov	r0, r6
 8008c58:	f000 f82e 	bl	8008cb8 <_sbrk_r>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d1dd      	bne.n	8008c1c <_malloc_r+0x64>
 8008c60:	e7cf      	b.n	8008c02 <_malloc_r+0x4a>
 8008c62:	bf00      	nop
 8008c64:	20000094 	.word	0x20000094
 8008c68:	20000098 	.word	0x20000098

08008c6c <_realloc_r>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	4607      	mov	r7, r0
 8008c70:	4614      	mov	r4, r2
 8008c72:	460e      	mov	r6, r1
 8008c74:	b921      	cbnz	r1, 8008c80 <_realloc_r+0x14>
 8008c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	f7ff bf9c 	b.w	8008bb8 <_malloc_r>
 8008c80:	b922      	cbnz	r2, 8008c8c <_realloc_r+0x20>
 8008c82:	f7ff ff49 	bl	8008b18 <_free_r>
 8008c86:	4625      	mov	r5, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c8c:	f000 f830 	bl	8008cf0 <_malloc_usable_size_r>
 8008c90:	42a0      	cmp	r0, r4
 8008c92:	d20f      	bcs.n	8008cb4 <_realloc_r+0x48>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4638      	mov	r0, r7
 8008c98:	f7ff ff8e 	bl	8008bb8 <_malloc_r>
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d0f2      	beq.n	8008c88 <_realloc_r+0x1c>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	f7ff ff0f 	bl	8008ac8 <memcpy>
 8008caa:	4631      	mov	r1, r6
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ff33 	bl	8008b18 <_free_r>
 8008cb2:	e7e9      	b.n	8008c88 <_realloc_r+0x1c>
 8008cb4:	4635      	mov	r5, r6
 8008cb6:	e7e7      	b.n	8008c88 <_realloc_r+0x1c>

08008cb8 <_sbrk_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	; (8008cd4 <_sbrk_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f8 fe1c 	bl	8001900 <_sbrk>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_sbrk_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_sbrk_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	2000096c 	.word	0x2000096c

08008cd8 <__malloc_lock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__malloc_lock+0x8>)
 8008cda:	f000 b811 	b.w	8008d00 <__retarget_lock_acquire_recursive>
 8008cde:	bf00      	nop
 8008ce0:	20000974 	.word	0x20000974

08008ce4 <__malloc_unlock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__malloc_unlock+0x8>)
 8008ce6:	f000 b80c 	b.w	8008d02 <__retarget_lock_release_recursive>
 8008cea:	bf00      	nop
 8008cec:	20000974 	.word	0x20000974

08008cf0 <_malloc_usable_size_r>:
 8008cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf4:	1f18      	subs	r0, r3, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfbc      	itt	lt
 8008cfa:	580b      	ldrlt	r3, [r1, r0]
 8008cfc:	18c0      	addlt	r0, r0, r3
 8008cfe:	4770      	bx	lr

08008d00 <__retarget_lock_acquire_recursive>:
 8008d00:	4770      	bx	lr

08008d02 <__retarget_lock_release_recursive>:
 8008d02:	4770      	bx	lr

08008d04 <_init>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr

08008d10 <_fini>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr
