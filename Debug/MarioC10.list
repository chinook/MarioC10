
MarioC10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c24  08006c24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c2c  08006c2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000070  08006ca4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08006ca4  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bb7  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d43  00000000  00000000  00037c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296b2  00000000  00000000  0003cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164b8  00000000  00000000  00066422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001010d1  00000000  00000000  0007c8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d9ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  0017da00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006bb4 	.word	0x08006bb4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006bb4 	.word	0x08006bb4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0c0      	sub	sp, #256	; 0x100
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	index_buff = 0;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <main+0x88>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	ws_receive_flag = 0;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0x8c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	time_100ms_Flag = 0;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <main+0x90>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	vitesse = 0;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <main+0x94>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ffc2 	bl	800157e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f83f 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fab5 	bl	8000b6c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 fa55 	bl	8000ab0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000606:	f000 fa83 	bl	8000b10 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800060a:	f000 f94b 	bl	80008a4 <MX_CAN1_Init>
  MX_ADC1_Init();
 800060e:	f000 f8a5 	bl	800075c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000612:	f000 f8f5 	bl	8000800 <MX_ADC3_Init>
  MX_CAN2_Init();
 8000616:	f000 f979 	bl	800090c <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 800061a:	f000 f9ab 	bl	8000974 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800061e:	f000 f9d9 	bl	80009d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000622:	f000 fa15 	bl	8000a50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 10);
 8000626:	220a      	movs	r2, #10
 8000628:	4911      	ldr	r1, [pc, #68]	; (8000670 <main+0x98>)
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <main+0x9c>)
 800062c:	f004 f829 	bl	8004682 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */
	  //uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
	  //HAL_UART_Transmit(&huart3,Test,sizeof(Test),10);// Sending in normal mode
	  //HAL_Delay(1000);

	  if(time_100ms_Flag == 1)
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <main+0x90>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d1fb      	bne.n	8000630 <main+0x58>
	  {
		  char message[256];
		  time_100ms_Flag = 0 ;
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <main+0x90>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
		  snprintf(message,sizeof(message),"Rpm = %d \n\r",vitesse);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <main+0x94>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4638      	mov	r0, r7
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <main+0xa0>)
 8000646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064a:	f005 fe71 	bl	8006330 <sniprintf>
		  HAL_UART_Transmit(&huart3,message,sizeof(message),10);
 800064e:	4639      	mov	r1, r7
 8000650:	230a      	movs	r3, #10
 8000652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <main+0x9c>)
 8000658:	f003 ff80 	bl	800455c <HAL_UART_Transmit>
	  if(time_100ms_Flag == 1)
 800065c:	e7e8      	b.n	8000630 <main+0x58>
 800065e:	bf00      	nop
 8000660:	2000009c 	.word	0x2000009c
 8000664:	200007c8 	.word	0x200007c8
 8000668:	200006a4 	.word	0x200006a4
 800066c:	200006a8 	.word	0x200006a8
 8000670:	200006ac 	.word	0x200006ac
 8000674:	200000e0 	.word	0x200000e0
 8000678:	08006bcc 	.word	0x08006bcc

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fe48 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a0:	f001 ff72 	bl	8002588 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemClock_Config+0xd8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemClock_Config+0xd8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xd8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemClock_Config+0xdc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a24      	ldr	r2, [pc, #144]	; (8000758 <SystemClock_Config+0xdc>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f0:	2360      	movs	r3, #96	; 0x60
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff9f 	bl	8002648 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 fb7c 	bl	8000e0c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000714:	f001 ff48 	bl	80025a8 <HAL_PWREx_EnableOverDrive>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800071e:	f000 fb75 	bl	8000e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2101      	movs	r1, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fa31 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000748:	f000 fb60 	bl	8000e0c <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	; 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x9c>)
 8000772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800077a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x98>)
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_ADC1_Init+0xa0>)
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007be:	f000 ff5f 	bl	8001680 <HAL_ADC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c8:	f000 fb20 	bl	8000e0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007cc:	2303      	movs	r3, #3
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_ADC1_Init+0x98>)
 80007de:	f000 ff93 	bl	8001708 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e8:	f000 fb10 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200005ec 	.word	0x200005ec
 80007f8:	40012000 	.word	0x40012000
 80007fc:	0f000001 	.word	0x0f000001

08000800 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_ADC3_Init+0x98>)
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <MX_ADC3_Init+0x9c>)
 8000816:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_ADC3_Init+0x98>)
 800081a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800081e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_ADC3_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_ADC3_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_ADC3_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_ADC3_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_ADC3_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_ADC3_Init+0x98>)
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <MX_ADC3_Init+0xa0>)
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_ADC3_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_ADC3_Init+0x98>)
 800084e:	2201      	movs	r2, #1
 8000850:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_ADC3_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_ADC3_Init+0x98>)
 800085c:	2201      	movs	r2, #1
 800085e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_ADC3_Init+0x98>)
 8000862:	f000 ff0d 	bl	8001680 <HAL_ADC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 face 	bl	8000e0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000870:	230a      	movs	r3, #10
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000874:	2301      	movs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_ADC3_Init+0x98>)
 8000882:	f000 ff41 	bl	8001708 <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800088c:	f000 fabe 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000065c 	.word	0x2000065c
 800089c:	40012200 	.word	0x40012200
 80008a0:	0f000001 	.word	0x0f000001

080008a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_CAN1_Init+0x60>)
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_CAN1_Init+0x64>)
 80008ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_CAN1_Init+0x60>)
 80008b0:	2210      	movs	r2, #16
 80008b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_CAN1_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_CAN1_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_CAN1_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_CAN1_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_CAN1_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_CAN1_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_CAN1_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_CAN1_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_CAN1_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_CAN1_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_CAN1_Init+0x60>)
 80008f2:	f001 f959 	bl	8001ba8 <HAL_CAN_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 fa86 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200007a0 	.word	0x200007a0
 8000908:	40006400 	.word	0x40006400

0800090c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_CAN2_Init+0x60>)
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MX_CAN2_Init+0x64>)
 8000914:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_CAN2_Init+0x60>)
 8000918:	2210      	movs	r2, #16
 800091a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_CAN2_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_CAN2_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_CAN2_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_CAN2_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_CAN2_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_CAN2_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_CAN2_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_CAN2_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_CAN2_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_CAN2_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_CAN2_Init+0x60>)
 800095a:	f001 f925 	bl	8001ba8 <HAL_CAN_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fa52 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000634 	.word	0x20000634
 8000970:	40006800 	.word	0x40006800

08000974 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_SDMMC1_SD_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 80009a4:	f002 ff28 	bl	80037f8 <HAL_SD_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80009ae:	f000 fa2d 	bl	8000e0c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_SDMMC1_SD_Init+0x58>)
 80009b8:	f003 f97a 	bl	8003cb0 <HAL_SD_ConfigWideBusOperation>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 fa23 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000568 	.word	0x20000568
 80009d0:	40012c00 	.word	0x40012c00

080009d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_SPI1_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a34:	f003 fc99 	bl	800436a <HAL_SPI_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f9e5 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200006b8 	.word	0x200006b8
 8000a4c:	40013000 	.word	0x40013000

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_USART2_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a96:	f003 fd13 	bl	80044c0 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000aa0:	f000 f9b4 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000071c 	.word	0x2000071c
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_USART3_UART_Init+0x5c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART3_UART_Init+0x58>)
 8000af4:	f003 fce4 	bl	80044c0 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000afe:	f000 f985 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000e0 	.word	0x200000e0
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2206      	movs	r2, #6
 8000b20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b54:	f001 fbcf 	bl	80022f6 <HAL_PCD_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f000 f955 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000164 	.word	0x20000164

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b82:	4b9a      	ldr	r3, [pc, #616]	; (8000dec <MX_GPIO_Init+0x280>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a99      	ldr	r2, [pc, #612]	; (8000dec <MX_GPIO_Init+0x280>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b97      	ldr	r3, [pc, #604]	; (8000dec <MX_GPIO_Init+0x280>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	623b      	str	r3, [r7, #32]
 8000b98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4b94      	ldr	r3, [pc, #592]	; (8000dec <MX_GPIO_Init+0x280>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a93      	ldr	r2, [pc, #588]	; (8000dec <MX_GPIO_Init+0x280>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b91      	ldr	r3, [pc, #580]	; (8000dec <MX_GPIO_Init+0x280>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb2:	4b8e      	ldr	r3, [pc, #568]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a8d      	ldr	r2, [pc, #564]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bb8:	f043 0320 	orr.w	r3, r3, #32
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b8b      	ldr	r3, [pc, #556]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b88      	ldr	r3, [pc, #544]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a87      	ldr	r2, [pc, #540]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b85      	ldr	r3, [pc, #532]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b82      	ldr	r3, [pc, #520]	; (8000dec <MX_GPIO_Init+0x280>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a81      	ldr	r2, [pc, #516]	; (8000dec <MX_GPIO_Init+0x280>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b7c      	ldr	r3, [pc, #496]	; (8000dec <MX_GPIO_Init+0x280>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a7b      	ldr	r2, [pc, #492]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b79      	ldr	r3, [pc, #484]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c12:	4b76      	ldr	r3, [pc, #472]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a75      	ldr	r2, [pc, #468]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b73      	ldr	r3, [pc, #460]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b70      	ldr	r3, [pc, #448]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a6f      	ldr	r2, [pc, #444]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b6d      	ldr	r3, [pc, #436]	; (8000dec <MX_GPIO_Init+0x280>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LORA_RST_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210c      	movs	r1, #12
 8000c46:	486a      	ldr	r0, [pc, #424]	; (8000df0 <MX_GPIO_Init+0x284>)
 8000c48:	f001 fb3c 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED_WARNING_Pin|LED_CANB_Pin|LED_CANA_Pin
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f249 3184 	movw	r1, #37764	; 0x9384
 8000c52:	4868      	ldr	r0, [pc, #416]	; (8000df4 <MX_GPIO_Init+0x288>)
 8000c54:	f001 fb36 	bl	80022c4 <HAL_GPIO_WritePin>
                          |LORA_EN_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MAST_CLOCK_Pin|PITCH_CLOCK_Pin|LD3_Pin
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f246 0185 	movw	r1, #24709	; 0x6085
 8000c5e:	4866      	ldr	r0, [pc, #408]	; (8000df8 <MX_GPIO_Init+0x28c>)
 8000c60:	f001 fb30 	bl	80022c4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2142      	movs	r1, #66	; 0x42
 8000c68:	4864      	ldr	r0, [pc, #400]	; (8000dfc <MX_GPIO_Init+0x290>)
 8000c6a:	f001 fb2b 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_RST_Pin LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LED_ERROR_Pin;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	485a      	ldr	r0, [pc, #360]	; (8000df0 <MX_GPIO_Init+0x284>)
 8000c86:	f001 f971 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4854      	ldr	r0, [pc, #336]	; (8000df0 <MX_GPIO_Init+0x284>)
 8000c9e:	f001 f965 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED_WARNING_Pin LED_CANB_Pin LED_CANA_Pin
                           LORA_EN_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED_WARNING_Pin|LED_CANB_Pin|LED_CANA_Pin
 8000ca2:	f249 3384 	movw	r3, #37764	; 0x9384
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
                          |LORA_EN_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	484e      	ldr	r0, [pc, #312]	; (8000df4 <MX_GPIO_Init+0x288>)
 8000cbc:	f001 f956 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4849      	ldr	r0, [pc, #292]	; (8000e00 <MX_GPIO_Init+0x294>)
 8000cdc:	f001 f946 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4842      	ldr	r0, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x298>)
 8000cfc:	f001 f936 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MAST_CLOCK_Pin PITCH_CLOCK_Pin LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MAST_CLOCK_Pin|PITCH_CLOCK_Pin|LD3_Pin
 8000d00:	f246 0385 	movw	r3, #24709	; 0x6085
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4837      	ldr	r0, [pc, #220]	; (8000df8 <MX_GPIO_Init+0x28c>)
 8000d1a:	f001 f927 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000d1e:	2342      	movs	r3, #66	; 0x42
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4831      	ldr	r0, [pc, #196]	; (8000dfc <MX_GPIO_Init+0x290>)
 8000d36:	f001 f919 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROTOR_RPM2_Pin WHEEL_RPM_Pin ROTOR_RPM_Pin WHEEL_RPM2_Pin */
  GPIO_InitStruct.Pin = ROTOR_RPM2_Pin|WHEEL_RPM_Pin|ROTOR_RPM_Pin|WHEEL_RPM2_Pin;
 8000d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4827      	ldr	r0, [pc, #156]	; (8000df0 <MX_GPIO_Init+0x284>)
 8000d52:	f001 f90b 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_INT_Pin MAST_DATA_Pin */
  GPIO_InitStruct.Pin = LORA_INT_Pin|MAST_DATA_Pin;
 8000d56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4827      	ldr	r0, [pc, #156]	; (8000e08 <MX_GPIO_Init+0x29c>)
 8000d6c:	f001 f8fe 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT2_Pin LIMIT1_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = LIMIT2_Pin|LIMIT1_Pin|USB_OverCurrent_Pin;
 8000d70:	238c      	movs	r3, #140	; 0x8c
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	481e      	ldr	r0, [pc, #120]	; (8000dfc <MX_GPIO_Init+0x290>)
 8000d84:	f001 f8f2 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4815      	ldr	r0, [pc, #84]	; (8000dfc <MX_GPIO_Init+0x290>)
 8000da6:	f001 f8e1 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000daa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_GPIO_Init+0x290>)
 8000dc8:	f001 f8d0 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PITCH_DATA_Pin */
  GPIO_InitStruct.Pin = PITCH_DATA_Pin;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PITCH_DATA_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_GPIO_Init+0x28c>)
 8000de0:	f001 f8c4 	bl	8001f6c <HAL_GPIO_Init>

}
 8000de4:	bf00      	nop
 8000de6:	3738      	adds	r7, #56	; 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40021400 	.word	0x40021400
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020c00 	.word	0x40020c00

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a2a      	ldr	r2, [pc, #168]	; (8000f28 <HAL_ADC_MspInit+0xc8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d124      	bne.n	8000ecc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e82:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = LOADCELL_ADC_Pin;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LOADCELL_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481a      	ldr	r0, [pc, #104]	; (8000f30 <HAL_ADC_MspInit+0xd0>)
 8000ec6:	f001 f851 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000eca:	e028      	b.n	8000f1e <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_ADC_MspInit+0xd4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d123      	bne.n	8000f1e <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_ADC_MspInit+0xcc>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TORQUE_ADC_Pin;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TORQUE_ADC_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <HAL_ADC_MspInit+0xd8>)
 8000f1a:	f001 f827 	bl	8001f6c <HAL_GPIO_Init>
}
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40012200 	.word	0x40012200
 8000f38:	40020800 	.word	0x40020800

08000f3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	; 0x38
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a43      	ldr	r2, [pc, #268]	; (8001068 <HAL_CAN_MspInit+0x12c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d131      	bne.n	8000fc2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <HAL_CAN_MspInit+0x130>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a41      	ldr	r2, [pc, #260]	; (800106c <HAL_CAN_MspInit+0x130>)
 8000f66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f68:	4b40      	ldr	r3, [pc, #256]	; (800106c <HAL_CAN_MspInit+0x130>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10b      	bne.n	8000f88 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a3e      	ldr	r2, [pc, #248]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f88:	4b39      	ldr	r3, [pc, #228]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a38      	ldr	r2, [pc, #224]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fb0:	2309      	movs	r3, #9
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	482e      	ldr	r0, [pc, #184]	; (8001074 <HAL_CAN_MspInit+0x138>)
 8000fbc:	f000 ffd6 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000fc0:	e04d      	b.n	800105e <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2c      	ldr	r2, [pc, #176]	; (8001078 <HAL_CAN_MspInit+0x13c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d148      	bne.n	800105e <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a27      	ldr	r2, [pc, #156]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000fd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_CAN_MspInit+0x130>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_CAN_MspInit+0x130>)
 8001004:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_CAN_MspInit+0x130>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d10b      	bne.n	8001026 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8001014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_CAN_MspInit+0x134>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_CAN_MspInit+0x134>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_CAN_MspInit+0x134>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800103e:	2360      	movs	r3, #96	; 0x60
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800104e:	2309      	movs	r3, #9
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <HAL_CAN_MspInit+0x140>)
 800105a:	f000 ff87 	bl	8001f6c <HAL_GPIO_Init>
}
 800105e:	bf00      	nop
 8001060:	3738      	adds	r7, #56	; 0x38
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40006400 	.word	0x40006400
 800106c:	2000008c 	.word	0x2000008c
 8001070:	40023800 	.word	0x40023800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40006800 	.word	0x40006800
 800107c:	40020400 	.word	0x40020400

08001080 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0ae      	sub	sp, #184	; 0xb8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2290      	movs	r2, #144	; 0x90
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 f93d 	bl	8006320 <memset>
  if(hsd->Instance==SDMMC1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a33      	ldr	r2, [pc, #204]	; (8001178 <HAL_SD_MspInit+0xf8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d15f      	bne.n	8001170 <HAL_SD_MspInit+0xf0>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80010b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80010b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 ff70 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80010ce:	f7ff fe9d 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_SD_MspInit+0xfc>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a29      	ldr	r2, [pc, #164]	; (800117c <HAL_SD_MspInit+0xfc>)
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_SD_MspInit+0xfc>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_SD_MspInit+0xfc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <HAL_SD_MspInit+0xfc>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_SD_MspInit+0xfc>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <HAL_SD_MspInit+0xfc>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_SD_MspInit+0xfc>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_SD_MspInit+0xfc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800111a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800111e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001134:	230c      	movs	r3, #12
 8001136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800113e:	4619      	mov	r1, r3
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <HAL_SD_MspInit+0x100>)
 8001142:	f000 ff13 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001146:	2304      	movs	r3, #4
 8001148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800115e:	230c      	movs	r3, #12
 8001160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001164:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_SD_MspInit+0x104>)
 800116c:	f000 fefe 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	37b8      	adds	r7, #184	; 0xb8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012c00 	.word	0x40012c00
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_SPI_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d127      	bne.n	80011fa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_SPI_MspInit+0x80>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011da:	23e0      	movs	r3, #224	; 0xe0
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_SPI_MspInit+0x84>)
 80011f6:	f000 feb9 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40013000 	.word	0x40013000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0b0      	sub	sp, #192	; 0xc0
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	2290      	movs	r2, #144	; 0x90
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f005 f875 	bl	8006320 <memset>
  if(huart->Instance==USART2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a42      	ldr	r2, [pc, #264]	; (8001344 <HAL_UART_MspInit+0x134>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d13b      	bne.n	80012b8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001244:	2300      	movs	r3, #0
 8001246:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4618      	mov	r0, r3
 800124e:	f001 feab 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001258:	f7ff fdd8 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_UART_MspInit+0x138>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a39      	ldr	r2, [pc, #228]	; (8001348 <HAL_UART_MspInit+0x138>)
 8001262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b37      	ldr	r3, [pc, #220]	; (8001348 <HAL_UART_MspInit+0x138>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_UART_MspInit+0x138>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a33      	ldr	r2, [pc, #204]	; (8001348 <HAL_UART_MspInit+0x138>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_UART_MspInit+0x138>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800128c:	2378      	movs	r3, #120	; 0x78
 800128e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a4:	2307      	movs	r3, #7
 80012a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ae:	4619      	mov	r1, r3
 80012b0:	4826      	ldr	r0, [pc, #152]	; (800134c <HAL_UART_MspInit+0x13c>)
 80012b2:	f000 fe5b 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b6:	e041      	b.n	800133c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a24      	ldr	r2, [pc, #144]	; (8001350 <HAL_UART_MspInit+0x140>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d13c      	bne.n	800133c <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fe69 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80012dc:	f7ff fd96 	bl	8000e0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0x138>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	4a18      	ldr	r2, [pc, #96]	; (8001348 <HAL_UART_MspInit+0x138>)
 80012e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ea:	6413      	str	r3, [r2, #64]	; 0x40
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_UART_MspInit+0x138>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_UART_MspInit+0x138>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_UART_MspInit+0x138>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_UART_MspInit+0x138>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001310:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800132a:	2307      	movs	r3, #7
 800132c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_UART_MspInit+0x13c>)
 8001338:	f000 fe18 	bl	8001f6c <HAL_GPIO_Init>
}
 800133c:	bf00      	nop
 800133e:	37c0      	adds	r7, #192	; 0xc0
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40004400 	.word	0x40004400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40004800 	.word	0x40004800

08001354 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0ae      	sub	sp, #184	; 0xb8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2290      	movs	r2, #144	; 0x90
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f004 ffd3 	bl	8006320 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001382:	d159      	bne.n	8001438 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001388:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fe07 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f7ff fd34 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a25      	ldr	r2, [pc, #148]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d6:	230a      	movs	r3, #10
 80013d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <HAL_PCD_MspInit+0xf0>)
 80013e4:	f000 fdc2 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001400:	4619      	mov	r1, r3
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <HAL_PCD_MspInit+0xf0>)
 8001404:	f000 fdb2 	bl	8001f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800140e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001412:	6353      	str	r3, [r2, #52]	; 0x34
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6453      	str	r3, [r2, #68]	; 0x44
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	37b8      	adds	r7, #184	; 0xb8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 f8b0 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f004 fefe 	bl	80062cc <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20080000 	.word	0x20080000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000090 	.word	0x20000090
 8001504:	200007e0 	.word	0x200007e0

08001508 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	; (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001556:	f7ff ffd7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f004 febd 	bl	80062d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff f83b 	bl	80005d8 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001570:	08006c34 	.word	0x08006c34
  ldr r2, =_sbss
 8001574:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001578:	200007e0 	.word	0x200007e0

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>

0800157e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	2003      	movs	r0, #3
 8001584:	f000 fcbe 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f805 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fc43 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fccb 	bl	8001f52 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	f000 fca1 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	200007cc 	.word	0x200007cc

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200007cc 	.word	0x200007cc

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e031      	b.n	80016fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fbde 	bl	8000e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_ADC_Init+0x84>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f970 	bl	80019b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ea:	e001      	b.n	80016f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	ffffeefd 	.word	0xffffeefd

08001708 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1c>
 8001720:	2302      	movs	r3, #2
 8001722:	e136      	b.n	8001992 <HAL_ADC_ConfigChannel+0x28a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d93a      	bls.n	80017aa <HAL_ADC_ConfigChannel+0xa2>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800173c:	d035      	beq.n	80017aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68d9      	ldr	r1, [r3, #12]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	3b1e      	subs	r3, #30
 8001754:	2207      	movs	r2, #7
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a8d      	ldr	r2, [pc, #564]	; (80019a0 <HAL_ADC_ConfigChannel+0x298>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10a      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68d9      	ldr	r1, [r3, #12]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	061a      	lsls	r2, r3, #24
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001782:	e035      	b.n	80017f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	4603      	mov	r3, r0
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4403      	add	r3, r0
 800179c:	3b1e      	subs	r3, #30
 800179e:	409a      	lsls	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017a8:	e022      	b.n	80017f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6919      	ldr	r1, [r3, #16]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	2207      	movs	r2, #7
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43da      	mvns	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	400a      	ands	r2, r1
 80017cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6919      	ldr	r1, [r3, #16]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	4603      	mov	r3, r0
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4403      	add	r3, r0
 80017e6:	409a      	lsls	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d824      	bhi.n	8001842 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b05      	subs	r3, #5
 800180a:	221f      	movs	r2, #31
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43da      	mvns	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	400a      	ands	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b05      	subs	r3, #5
 8001834:	fa00 f203 	lsl.w	r2, r0, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
 8001840:	e04c      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d824      	bhi.n	8001894 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b23      	subs	r3, #35	; 0x23
 800185c:	221f      	movs	r2, #31
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	400a      	ands	r2, r1
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b23      	subs	r3, #35	; 0x23
 8001886:	fa00 f203 	lsl.w	r2, r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	e023      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b41      	subs	r3, #65	; 0x41
 80018a6:	221f      	movs	r2, #31
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43da      	mvns	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	400a      	ands	r2, r1
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b41      	subs	r3, #65	; 0x41
 80018d0:	fa00 f203 	lsl.w	r2, r0, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <HAL_ADC_ConfigChannel+0x29c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10a      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1f4>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018ee:	d105      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_ADC_ConfigChannel+0x29c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10f      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b12      	cmp	r3, #18
 800190c:	d10b      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001914:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001918:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001924:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_ADC_ConfigChannel+0x29c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12b      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x280>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_ADC_ConfigChannel+0x298>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d003      	beq.n	8001942 <HAL_ADC_ConfigChannel+0x23a>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b11      	cmp	r3, #17
 8001940:	d122      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001948:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800194c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001958:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_ADC_ConfigChannel+0x298>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d111      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_ADC_ConfigChannel+0x2a4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9a      	lsrs	r2, r3, #18
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800197a:	e002      	b.n	8001982 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3b01      	subs	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	10000012 	.word	0x10000012
 80019a4:	40012000 	.word	0x40012000
 80019a8:	40012300 	.word	0x40012300
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019bc:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <ADC_Init+0x1ec>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <ADC_Init+0x1ec>)
 80019c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019c8:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <ADC_Init+0x1ec>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4973      	ldr	r1, [pc, #460]	; (8001ba0 <ADC_Init+0x1ec>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	021a      	lsls	r2, r3, #8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6899      	ldr	r1, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <ADC_Init+0x1f0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e00f      	b.n	8001aae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0202 	bic.w	r2, r2, #2
 8001abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	005a      	lsls	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001afa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	3b01      	subs	r3, #1
 8001b08:	035a      	lsls	r2, r3, #13
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	e007      	b.n	8001b24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	051a      	lsls	r2, r3, #20
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6899      	ldr	r1, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b66:	025a      	lsls	r2, r3, #9
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6899      	ldr	r1, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	029a      	lsls	r2, r3, #10
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	0f000001 	.word	0x0f000001

08001ba8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0ed      	b.n	8001d96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff f9b8 	bl	8000f3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bdc:	f7ff fd20 	bl	8001620 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001be2:	e012      	b.n	8001c0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be4:	f7ff fd1c 	bl	8001620 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d90b      	bls.n	8001c0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2205      	movs	r2, #5
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0c5      	b.n	8001d96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0e5      	beq.n	8001be4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0202 	bic.w	r2, r2, #2
 8001c26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c28:	f7ff fcfa 	bl	8001620 <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c2e:	e012      	b.n	8001c56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c30:	f7ff fcf6 	bl	8001620 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b0a      	cmp	r3, #10
 8001c3c:	d90b      	bls.n	8001c56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2205      	movs	r2, #5
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e09f      	b.n	8001d96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e5      	bne.n	8001c30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7e1b      	ldrb	r3, [r3, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7e5b      	ldrb	r3, [r3, #25]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7e9b      	ldrb	r3, [r3, #26]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d108      	bne.n	8001cd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e007      	b.n	8001ce2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0220 	bic.w	r2, r2, #32
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7edb      	ldrb	r3, [r3, #27]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0210 	bic.w	r2, r2, #16
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e007      	b.n	8001d0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0210 	orr.w	r2, r2, #16
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7f1b      	ldrb	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d108      	bne.n	8001d26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0208 	orr.w	r2, r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e007      	b.n	8001d36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0208 	bic.w	r2, r2, #8
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7f5b      	ldrb	r3, [r3, #29]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0204 	orr.w	r2, r2, #4
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e007      	b.n	8001d60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0204 	bic.w	r2, r2, #4
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00
 8001de4:	05fa0000 	.word	0x05fa0000

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff47 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff5c 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffb0 	bl	8001ec0 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e175      	b.n	8002278 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 8164 	bne.w	8002272 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_GPIO_Init+0x56>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d130      	bne.n	8002024 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b03      	cmp	r3, #3
 800202e:	d017      	beq.n	8002060 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80be 	beq.w	8002272 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_GPIO_Init+0x324>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_GPIO_Init+0x324>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_GPIO_Init+0x324>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800210e:	4a61      	ldr	r2, [pc, #388]	; (8002294 <HAL_GPIO_Init+0x328>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_GPIO_Init+0x32c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d037      	beq.n	80021aa <HAL_GPIO_Init+0x23e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a57      	ldr	r2, [pc, #348]	; (800229c <HAL_GPIO_Init+0x330>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_GPIO_Init+0x23a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a56      	ldr	r2, [pc, #344]	; (80022a0 <HAL_GPIO_Init+0x334>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d02b      	beq.n	80021a2 <HAL_GPIO_Init+0x236>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a55      	ldr	r2, [pc, #340]	; (80022a4 <HAL_GPIO_Init+0x338>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d025      	beq.n	800219e <HAL_GPIO_Init+0x232>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a54      	ldr	r2, [pc, #336]	; (80022a8 <HAL_GPIO_Init+0x33c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01f      	beq.n	800219a <HAL_GPIO_Init+0x22e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a53      	ldr	r2, [pc, #332]	; (80022ac <HAL_GPIO_Init+0x340>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d019      	beq.n	8002196 <HAL_GPIO_Init+0x22a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x344>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x348>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00d      	beq.n	800218e <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x34c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x350>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x21a>
 8002182:	2309      	movs	r3, #9
 8002184:	e012      	b.n	80021ac <HAL_GPIO_Init+0x240>
 8002186:	230a      	movs	r3, #10
 8002188:	e010      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800218a:	2308      	movs	r3, #8
 800218c:	e00e      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800218e:	2307      	movs	r3, #7
 8002190:	e00c      	b.n	80021ac <HAL_GPIO_Init+0x240>
 8002192:	2306      	movs	r3, #6
 8002194:	e00a      	b.n	80021ac <HAL_GPIO_Init+0x240>
 8002196:	2305      	movs	r3, #5
 8002198:	e008      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800219a:	2304      	movs	r3, #4
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x240>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x240>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x240>
 80021aa:	2300      	movs	r3, #0
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	; (8002294 <HAL_GPIO_Init+0x328>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_GPIO_Init+0x354>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_GPIO_Init+0x354>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_GPIO_Init+0x354>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a29      	ldr	r2, [pc, #164]	; (80022c0 <HAL_GPIO_Init+0x354>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_GPIO_Init+0x354>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_GPIO_Init+0x354>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_GPIO_Init+0x354>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <HAL_GPIO_Init+0x354>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f67f ae86 	bls.w	8001f8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40021800 	.word	0x40021800
 80022b4:	40021c00 	.word	0x40021c00
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40022400 	.word	0x40022400
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f8:	b08f      	sub	sp, #60	; 0x3c
 80022fa:	af0a      	add	r7, sp, #40	; 0x28
 80022fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e116      	b.n	8002536 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff f816 	bl	8001354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fd2a 	bl	8005da0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	687e      	ldr	r6, [r7, #4]
 8002354:	466d      	mov	r5, sp
 8002356:	f106 0410 	add.w	r4, r6, #16
 800235a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800235c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002366:	e885 0003 	stmia.w	r5, {r0, r1}
 800236a:	1d33      	adds	r3, r6, #4
 800236c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236e:	6838      	ldr	r0, [r7, #0]
 8002370:	f003 fcbe 	bl	8005cf0 <USB_CoreInit>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0d7      	b.n	8002536 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fd18 	bl	8005dc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e04a      	b.n	800242e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	333d      	adds	r3, #61	; 0x3d
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	333c      	adds	r3, #60	; 0x3c
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	b298      	uxth	r0, r3
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3342      	adds	r3, #66	; 0x42
 80023d4:	4602      	mov	r2, r0
 80023d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	333f      	adds	r3, #63	; 0x3f
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3344      	adds	r3, #68	; 0x44
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3348      	adds	r3, #72	; 0x48
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3350      	adds	r3, #80	; 0x50
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	3301      	adds	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d3af      	bcc.n	8002398 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	e044      	b.n	80024c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	3301      	adds	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d3b5      	bcc.n	800243e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	687e      	ldr	r6, [r7, #4]
 80024da:	466d      	mov	r5, sp
 80024dc:	f106 0410 	add.w	r4, r6, #16
 80024e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80024f0:	1d33      	adds	r3, r6, #4
 80024f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f4:	6838      	ldr	r0, [r7, #0]
 80024f6:	f003 fcb1 	bl	8005e5c <USB_DevInit>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e014      	b.n	8002536 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f80b 	bl	8002540 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fe6b 	bl	800620a <USB_DevDisconnect>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002540 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_PCDEx_ActivateLPM+0x44>)
 8002570:	4313      	orrs	r3, r2
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	10000003 	.word	0x10000003

08002588 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40007000 	.word	0x40007000

080025a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_PWREx_EnableOverDrive+0x98>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d6:	f7ff f823 	bl	8001620 <HAL_GetTick>
 80025da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025dc:	e009      	b.n	80025f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025de:	f7ff f81f 	bl	8001620 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ec:	d901      	bls.n	80025f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e022      	b.n	8002638 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fe:	d1ee      	bne.n	80025de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800260c:	f7ff f808 	bl	8001620 <HAL_GetTick>
 8002610:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002612:	e009      	b.n	8002628 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002614:	f7ff f804 	bl	8001620 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002622:	d901      	bls.n	8002628 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e007      	b.n	8002638 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_PWREx_EnableOverDrive+0x9c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002634:	d1ee      	bne.n	8002614 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000

08002648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e29b      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b96      	ldr	r3, [pc, #600]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002678:	4b93      	ldr	r3, [pc, #588]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x62>
 8002684:	4b90      	ldr	r3, [pc, #576]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b8d      	ldr	r3, [pc, #564]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x130>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e275      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x7a>
 80026b4:	4b84      	ldr	r3, [pc, #528]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a83      	ldr	r2, [pc, #524]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x9c>
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7e      	ldr	r2, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7b      	ldr	r2, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xc0>
 80026ee:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a75      	ldr	r2, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a72      	ldr	r2, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd8>
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6e      	ldr	r2, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6b      	ldr	r2, [pc, #428]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe ff7a 	bl	8001620 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe ff76 	bl	8001620 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e229      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe8>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe ff66 	bl	8001620 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe ff62 	bl	8001620 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e215      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x110>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d069      	beq.n	800285a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002786:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x190>
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x17a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1e9      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	493d      	ldr	r1, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e040      	b.n	800285a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d023      	beq.n	8002828 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe ff18 	bl	8001620 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f4:	f7fe ff14 	bl	8001620 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e1c7      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4929      	ldr	r1, [pc, #164]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
 8002826:	e018      	b.n	800285a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a26      	ldr	r2, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fef4 	bl	8001620 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7fe fef0 	bl	8001620 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1a3      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d038      	beq.n	80028d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fed1 	bl	8001620 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe fecd 	bl	8001620 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e180      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x23a>
 80028a0:	e01a      	b.n	80028d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80028a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCC_OscConfig+0x280>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7fe feb7 	bl	8001620 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe feb3 	bl	8001620 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d903      	bls.n	80028cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e166      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
 80028c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b92      	ldr	r3, [pc, #584]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ee      	bne.n	80028b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a4 	beq.w	8002a2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e6:	4b8c      	ldr	r3, [pc, #560]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	4b89      	ldr	r3, [pc, #548]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a88      	ldr	r2, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b86      	ldr	r3, [pc, #536]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290e:	4b83      	ldr	r3, [pc, #524]	; (8002b1c <HAL_RCC_OscConfig+0x4d4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d118      	bne.n	800294c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800291a:	4b80      	ldr	r3, [pc, #512]	; (8002b1c <HAL_RCC_OscConfig+0x4d4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7f      	ldr	r2, [pc, #508]	; (8002b1c <HAL_RCC_OscConfig+0x4d4>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7fe fe7b 	bl	8001620 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7fe fe77 	bl	8001620 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e12a      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002940:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x4d4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x31a>
 8002954:	4b70      	ldr	r3, [pc, #448]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a6f      	ldr	r2, [pc, #444]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e02d      	b.n	80029be <HAL_RCC_OscConfig+0x376>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x33c>
 800296a:	4b6b      	ldr	r3, [pc, #428]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a6a      	ldr	r2, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a67      	ldr	r2, [pc, #412]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	e01c      	b.n	80029be <HAL_RCC_OscConfig+0x376>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b05      	cmp	r3, #5
 800298a:	d10c      	bne.n	80029a6 <HAL_RCC_OscConfig+0x35e>
 800298c:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a61      	ldr	r2, [pc, #388]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	e00b      	b.n	80029be <HAL_RCC_OscConfig+0x376>
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5b      	ldr	r2, [pc, #364]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d015      	beq.n	80029f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fe2b 	bl	8001620 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fe27 	bl	8001620 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0d8      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ee      	beq.n	80029ce <HAL_RCC_OscConfig+0x386>
 80029f0:	e014      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fe15 	bl	8001620 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fe11 	bl	8001620 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0c2      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ee      	bne.n	80029fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d105      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80ae 	beq.w	8002b94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a38:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d06d      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d14b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a31      	ldr	r2, [pc, #196]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fde2 	bl	8001620 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fdde 	bl	8001620 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e091      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	071b      	lsls	r3, r3, #28
 8002aaa:	491b      	ldr	r1, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fdb0 	bl	8001620 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fdac 	bl	8001620 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e05f      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
 8002ae2:	e057      	b.n	8002b94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fd96 	bl	8001620 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fd92 	bl	8001620 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e045      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_RCC_OscConfig+0x4d0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4b0>
 8002b16:	e03d      	b.n	8002b94 <HAL_RCC_OscConfig+0x54c>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_RCC_OscConfig+0x558>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d030      	beq.n	8002b90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d129      	bne.n	8002b90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d122      	bne.n	8002b90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d119      	bne.n	8002b90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d10f      	bne.n	8002b90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0d0      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b6a      	ldr	r3, [pc, #424]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d910      	bls.n	8002bec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b67      	ldr	r3, [pc, #412]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	4965      	ldr	r1, [pc, #404]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0b8      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d020      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c04:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a52      	ldr	r2, [pc, #328]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	494d      	ldr	r1, [pc, #308]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d040      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d115      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e07f      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e073      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06b      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4936      	ldr	r1, [pc, #216]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c98:	f7fe fcc2 	bl	8001620 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe fcbe 	bl	8001620 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e053      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d210      	bcs.n	8002cf8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	4922      	ldr	r1, [pc, #136]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e032      	b.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4916      	ldr	r1, [pc, #88]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	490e      	ldr	r1, [pc, #56]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d36:	f000 f821 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	490a      	ldr	r1, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x1cc>)
 8002d48:	5ccb      	ldrb	r3, [r1, r3]
 8002d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1d0>)
 8002d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1d4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fc1e 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023c00 	.word	0x40023c00
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	08006bd8 	.word	0x08006bd8
 8002d74:	20000000 	.word	0x20000000
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d94:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d00d      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x40>
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	f200 80bd 	bhi.w	8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x34>
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dae:	e0b7      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002db2:	60bb      	str	r3, [r7, #8]
      break;
 8002db4:	e0b7      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002db6:	4b61      	ldr	r3, [pc, #388]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002db8:	60bb      	str	r3, [r7, #8]
      break;
 8002dba:	e0b4      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dbc:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04d      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	ea02 0800 	and.w	r8, r2, r0
 8002dea:	ea03 0901 	and.w	r9, r3, r1
 8002dee:	4640      	mov	r0, r8
 8002df0:	4649      	mov	r1, r9
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	014b      	lsls	r3, r1, #5
 8002dfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e00:	0142      	lsls	r2, r0, #5
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	ebb0 0008 	subs.w	r0, r0, r8
 8002e0a:	eb61 0109 	sbc.w	r1, r1, r9
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e1c:	0182      	lsls	r2, r0, #6
 8002e1e:	1a12      	subs	r2, r2, r0
 8002e20:	eb63 0301 	sbc.w	r3, r3, r1
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	00d9      	lsls	r1, r3, #3
 8002e2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e32:	00d0      	lsls	r0, r2, #3
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	eb12 0208 	adds.w	r2, r2, r8
 8002e3c:	eb43 0309 	adc.w	r3, r3, r9
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	0259      	lsls	r1, r3, #9
 8002e4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e4e:	0250      	lsls	r0, r2, #9
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f7fd fa3e 	bl	80002e0 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e04a      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	099b      	lsrs	r3, r3, #6
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	ea02 0400 	and.w	r4, r2, r0
 8002e86:	ea03 0501 	and.w	r5, r3, r1
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	014b      	lsls	r3, r1, #5
 8002e98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e9c:	0142      	lsls	r2, r0, #5
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	1b00      	subs	r0, r0, r4
 8002ea4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	018b      	lsls	r3, r1, #6
 8002eb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eb6:	0182      	lsls	r2, r0, #6
 8002eb8:	1a12      	subs	r2, r2, r0
 8002eba:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebe:	f04f 0000 	mov.w	r0, #0
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	00d9      	lsls	r1, r3, #3
 8002ec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ecc:	00d0      	lsls	r0, r2, #3
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	1912      	adds	r2, r2, r4
 8002ed4:	eb45 0303 	adc.w	r3, r5, r3
 8002ed8:	f04f 0000 	mov.w	r0, #0
 8002edc:	f04f 0100 	mov.w	r1, #0
 8002ee0:	0299      	lsls	r1, r3, #10
 8002ee2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ee6:	0290      	lsls	r0, r2, #10
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	f7fd f9f2 	bl	80002e0 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4613      	mov	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	60bb      	str	r3, [r7, #8]
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f22:	60bb      	str	r3, [r7, #8]
      break;
 8002f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f26:	68bb      	ldr	r3, [r7, #8]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200

08002f40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff0 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4903      	ldr	r1, [pc, #12]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	08006be8 	.word	0x08006be8

08002f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f84:	f7ff ffdc 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0b5b      	lsrs	r3, r3, #13
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	08006be8 	.word	0x08006be8

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fd0:	4b69      	ldr	r3, [pc, #420]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a68      	ldr	r2, [pc, #416]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	4964      	ldr	r1, [pc, #400]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d017      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	4959      	ldr	r1, [pc, #356]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003020:	d101      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d017      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800303e:	4b4e      	ldr	r3, [pc, #312]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	494a      	ldr	r1, [pc, #296]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 808b 	beq.w	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	4a39      	ldr	r2, [pc, #228]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	; 0x40
 8003098:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a34      	ldr	r2, [pc, #208]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b0:	f7fe fab6 	bl	8001620 <HAL_GetTick>
 80030b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe fab2 	bl	8001620 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e38f      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030ca:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030d6:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d035      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d02e      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003114:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800311c:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d114      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe fa7a 	bl	8001620 <HAL_GetTick>
 800312c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe fa76 	bl	8001620 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e351      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ee      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d111      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800316e:	400b      	ands	r3, r1
 8003170:	4901      	ldr	r1, [pc, #4]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
 8003176:	e00b      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	0ffffcff 	.word	0x0ffffcff
 8003184:	4bb3      	ldr	r3, [pc, #716]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4ab2      	ldr	r2, [pc, #712]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800318a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800318e:	6093      	str	r3, [r2, #8]
 8003190:	4bb0      	ldr	r3, [pc, #704]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	49ad      	ldr	r1, [pc, #692]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ae:	4ba9      	ldr	r3, [pc, #676]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b4:	4aa7      	ldr	r2, [pc, #668]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031be:	4ba5      	ldr	r3, [pc, #660]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	49a2      	ldr	r1, [pc, #648]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031dc:	4b9d      	ldr	r3, [pc, #628]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ea:	499a      	ldr	r1, [pc, #616]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031fe:	4b95      	ldr	r3, [pc, #596]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800320c:	4991      	ldr	r1, [pc, #580]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003220:	4b8c      	ldr	r3, [pc, #560]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322e:	4989      	ldr	r1, [pc, #548]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003242:	4b84      	ldr	r3, [pc, #528]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4980      	ldr	r1, [pc, #512]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003264:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4978      	ldr	r1, [pc, #480]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003286:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f023 020c 	bic.w	r2, r3, #12
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	496f      	ldr	r1, [pc, #444]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a8:	4b6a      	ldr	r3, [pc, #424]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	4967      	ldr	r1, [pc, #412]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	495e      	ldr	r1, [pc, #376]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ec:	4b59      	ldr	r3, [pc, #356]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	4956      	ldr	r1, [pc, #344]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	494d      	ldr	r1, [pc, #308]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003330:	4b48      	ldr	r3, [pc, #288]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	4945      	ldr	r1, [pc, #276]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003352:	4b40      	ldr	r3, [pc, #256]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	493c      	ldr	r1, [pc, #240]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003374:	4b37      	ldr	r3, [pc, #220]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003382:	4934      	ldr	r1, [pc, #208]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d011      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a4:	492b      	ldr	r1, [pc, #172]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d6:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	491b      	ldr	r1, [pc, #108]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003408:	4912      	ldr	r1, [pc, #72]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00b      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	4909      	ldr	r1, [pc, #36]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00f      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003446:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	e002      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	4986      	ldr	r1, [pc, #536]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800346c:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003472:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800347c:	497d      	ldr	r1, [pc, #500]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d006      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80d6 	beq.w	8003644 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003498:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a75      	ldr	r2, [pc, #468]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe f8bc 	bl	8001620 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034ac:	f7fe f8b8 	bl	8001620 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e195      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034be:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d021      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11d      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	0e1b      	lsrs	r3, r3, #24
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	019a      	lsls	r2, r3, #6
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	061b      	lsls	r3, r3, #24
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	071b      	lsls	r3, r3, #28
 8003512:	4958      	ldr	r1, [pc, #352]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003544:	d129      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003554:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355a:	0f1b      	lsrs	r3, r3, #28
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	019a      	lsls	r2, r3, #6
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	071b      	lsls	r3, r3, #28
 800357a:	493e      	ldr	r1, [pc, #248]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003582:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003588:	f023 021f 	bic.w	r2, r3, #31
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	3b01      	subs	r3, #1
 8003592:	4938      	ldr	r1, [pc, #224]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01d      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ac:	0e1b      	lsrs	r3, r3, #24
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035b4:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ba:	0f1b      	lsrs	r3, r3, #28
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	019a      	lsls	r2, r3, #6
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	071b      	lsls	r3, r3, #28
 80035da:	4926      	ldr	r1, [pc, #152]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d011      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	019a      	lsls	r2, r3, #6
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	071b      	lsls	r3, r3, #28
 800360a:	491a      	ldr	r1, [pc, #104]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800361c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361e:	f7fd ffff 	bl	8001620 <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003626:	f7fd fffb 	bl	8001620 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b64      	cmp	r3, #100	; 0x64
 8003632:	d901      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0d8      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b01      	cmp	r3, #1
 8003648:	f040 80ce 	bne.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a08      	ldr	r2, [pc, #32]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fd ffe2 	bl	8001620 <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800365e:	e00b      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003660:	f7fd ffde 	bl	8001620 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d904      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0bb      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003678:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003684:	d0ec      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02e      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d12a      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036ae:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036bc:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	0f1b      	lsrs	r3, r3, #28
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	019a      	lsls	r2, r3, #6
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	061b      	lsls	r3, r3, #24
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	071b      	lsls	r3, r3, #28
 80036e2:	4944      	ldr	r1, [pc, #272]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036ea:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	493d      	ldr	r1, [pc, #244]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d022      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003718:	d11d      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800371a:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	0e1b      	lsrs	r3, r3, #24
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	0f1b      	lsrs	r3, r3, #28
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	019a      	lsls	r2, r3, #6
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	061b      	lsls	r3, r3, #24
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	071b      	lsls	r3, r3, #28
 800374e:	4929      	ldr	r1, [pc, #164]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d028      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	0e1b      	lsrs	r3, r3, #24
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	019a      	lsls	r2, r3, #6
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	431a      	orrs	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	4917      	ldr	r1, [pc, #92]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4911      	ldr	r1, [pc, #68]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fd ff2e 	bl	8001620 <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037c8:	f7fd ff2a 	bl	8001620 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e007      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e6:	d1ef      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e022      	b.n	8003850 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd fc2f 	bl	8001080 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f814 	bl	8003858 <HAL_SD_InitCard>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00a      	b.n	8003850 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003858:	b5b0      	push	{r4, r5, r7, lr}
 800385a:	b08e      	sub	sp, #56	; 0x38
 800385c:	af04      	add	r7, sp, #16
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003874:	2376      	movs	r3, #118	; 0x76
 8003876:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681d      	ldr	r5, [r3, #0]
 800387c:	466c      	mov	r4, sp
 800387e:	f107 0314 	add.w	r3, r7, #20
 8003882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003890:	4628      	mov	r0, r5
 8003892:	f001 fd93 	bl	80053bc <SDMMC_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800389c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e059      	b.n	800395c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fdb6 	bl	800542e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80038d2:	2002      	movs	r0, #2
 80038d4:	f7fd feb0 	bl	8001638 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb4f 	bl	8003f7c <SD_PowerON>
 80038de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e02e      	b.n	800395c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa70 	bl	8003de4 <SD_InitCard>
 8003904:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e01b      	b.n	800395c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800392c:	4618      	mov	r0, r3
 800392e:	f001 fe11 	bl	8005554 <SDMMC_CmdBlockLength>
 8003932:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00f      	beq.n	800395a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <HAL_SD_InitCard+0x10c>)
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bdb0      	pop	{r4, r5, r7, pc}
 8003964:	004005ff 	.word	0x004005ff

08003968 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003976:	0f9b      	lsrs	r3, r3, #30
 8003978:	b2da      	uxtb	r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	b2da      	uxtb	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	b2da      	uxtb	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c8:	0d1b      	lsrs	r3, r3, #20
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e6:	0bdb      	lsrs	r3, r3, #15
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f8:	0b9b      	lsrs	r3, r3, #14
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1c:	0b1b      	lsrs	r3, r3, #12
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d163      	bne.n	8003b00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3c:	009a      	lsls	r2, r3, #2
 8003a3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a42:	4013      	ands	r3, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003a48:	0f92      	lsrs	r2, r2, #30
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a54:	0edb      	lsrs	r3, r3, #27
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a66:	0e1b      	lsrs	r3, r3, #24
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a78:	0d5b      	lsrs	r3, r3, #21
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8a:	0c9b      	lsrs	r3, r3, #18
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9c:	0bdb      	lsrs	r3, r3, #15
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	7e1b      	ldrb	r3, [r3, #24]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	3302      	adds	r3, #2
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003aca:	fb02 f203 	mul.w	r2, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	7a1b      	ldrb	r3, [r3, #8]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003aec:	0a52      	lsrs	r2, r2, #9
 8003aee:	fb02 f203 	mul.w	r2, r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60
 8003afe:	e031      	b.n	8003b64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d11d      	bne.n	8003b44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b16:	0c1b      	lsrs	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	3301      	adds	r3, #1
 8003b24:	029a      	lsls	r2, r3, #10
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
 8003b42:	e00f      	b.n	8003b64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_SD_GetCardCSD+0x344>)
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e09d      	b.n	8003ca0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b68:	0b9b      	lsrs	r3, r3, #14
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7a:	09db      	lsrs	r3, r3, #7
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	0fdb      	lsrs	r3, r3, #31
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	0f5b      	lsrs	r3, r3, #29
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	0e9b      	lsrs	r3, r3, #26
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	0d9b      	lsrs	r3, r3, #22
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	0d5b      	lsrs	r3, r3, #21
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	0c1b      	lsrs	r3, r3, #16
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	0bdb      	lsrs	r3, r3, #15
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	0b9b      	lsrs	r3, r3, #14
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	0b5b      	lsrs	r3, r3, #13
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	0b1b      	lsrs	r3, r3, #12
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	004005ff 	.word	0x004005ff

08003cb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003cb0:	b5b0      	push	{r4, r5, r7, lr}
 8003cb2:	b08e      	sub	sp, #56	; 0x38
 8003cb4:	af04      	add	r7, sp, #16
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d02e      	beq.n	8003d2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd6:	d106      	bne.n	8003ce6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ce4:	e029      	b.n	8003d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cec:	d10a      	bne.n	8003d04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9d2 	bl	8004098 <SD_WideBus_Enable>
 8003cf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
 8003d02:	e01a      	b.n	8003d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa0f 	bl	800412e <SD_WideBus_Disable>
 8003d10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d1e:	e00c      	b.n	8003d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d2c:	e005      	b.n	8003d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d58:	e01f      	b.n	8003d9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681d      	ldr	r5, [r3, #0]
 8003d80:	466c      	mov	r4, sp
 8003d82:	f107 0314 	add.w	r3, r7, #20
 8003d86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d8e:	f107 0308 	add.w	r3, r7, #8
 8003d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d94:	4628      	mov	r0, r5
 8003d96:	f001 fb11 	bl	80053bc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fbd6 	bl	8005554 <SDMMC_CmdBlockLength>
 8003da8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3728      	adds	r7, #40	; 0x28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	004005ff 	.word	0x004005ff

08003de4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003de4:	b5b0      	push	{r4, r5, r7, lr}
 8003de6:	b094      	sub	sp, #80	; 0x50
 8003de8:	af04      	add	r7, sp, #16
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003dec:	2301      	movs	r3, #1
 8003dee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fb28 	bl	800544a <SDMMC_GetPowerState>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e04:	e0b6      	b.n	8003f74 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d02f      	beq.n	8003e6e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 fca9 	bl	800576a <SDMMC_CmdSendCID>
 8003e18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <SD_InitCard+0x40>
    {
      return errorstate;
 8003e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e22:	e0a7      	b.n	8003f74 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 fb53 	bl	80054d6 <SDMMC_GetResponse>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2104      	movs	r1, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fb4a 	bl	80054d6 <SDMMC_GetResponse>
 8003e42:	4602      	mov	r2, r0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2108      	movs	r1, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 fb41 	bl	80054d6 <SDMMC_GetResponse>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	210c      	movs	r1, #12
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 fb38 	bl	80054d6 <SDMMC_GetResponse>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d00d      	beq.n	8003e92 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f107 020e 	add.w	r2, r7, #14
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 fcaf 	bl	80057e4 <SDMMC_CmdSetRelAdd>
 8003e86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <SD_InitCard+0xae>
    {
      return errorstate;
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e90:	e070      	b.n	8003f74 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d036      	beq.n	8003f08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f001 fc79 	bl	80057a6 <SDMMC_CmdSendCSD>
 8003eb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebe:	e059      	b.n	8003f74 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 fb05 	bl	80054d6 <SDMMC_GetResponse>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 fafc 	bl	80054d6 <SDMMC_GetResponse>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2108      	movs	r1, #8
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 faf3 	bl	80054d6 <SDMMC_GetResponse>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	210c      	movs	r1, #12
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 faea 	bl	80054d6 <SDMMC_GetResponse>
 8003f02:	4602      	mov	r2, r0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fae1 	bl	80054d6 <SDMMC_GetResponse>
 8003f14:	4603      	mov	r3, r0
 8003f16:	0d1a      	lsrs	r2, r3, #20
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f1c:	f107 0310 	add.w	r3, r7, #16
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fd20 	bl	8003968 <HAL_SD_GetCardCSD>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f32:	e01f      	b.n	8003f74 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	4608      	mov	r0, r1
 8003f46:	f001 fb27 	bl	8005598 <SDMMC_CmdSelDesel>
 8003f4a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <SD_InitCard+0x172>
  {
    return errorstate;
 8003f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f54:	e00e      	b.n	8003f74 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681d      	ldr	r5, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	466c      	mov	r4, sp
 8003f5e:	f103 0210 	add.w	r2, r3, #16
 8003f62:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f68:	3304      	adds	r3, #4
 8003f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f001 fa25 	bl	80053bc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3740      	adds	r7, #64	; 0x40
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bdb0      	pop	{r4, r5, r7, pc}

08003f7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fb22 	bl	80055de <SDMMC_CmdGoIdleState>
 8003f9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	e072      	b.n	800408c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 fb35 	bl	800561a <SDMMC_CmdOperCond>
 8003fb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fb0b 	bl	80055de <SDMMC_CmdGoIdleState>
 8003fc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <SD_PowerON+0x5e>
    {
      return errorstate;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	e05b      	b.n	800408c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d137      	bne.n	8004052 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 fb35 	bl	8005658 <SDMMC_CmdAppCommand>
 8003fee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02d      	beq.n	8004052 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ff6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ffa:	e047      	b.n	800408c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f001 fb28 	bl	8005658 <SDMMC_CmdAppCommand>
 8004008:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <SD_PowerON+0x98>
    {
      return errorstate;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	e03b      	b.n	800408c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	491e      	ldr	r1, [pc, #120]	; (8004094 <SD_PowerON+0x118>)
 800401a:	4618      	mov	r0, r3
 800401c:	f001 fb3e 	bl	800569c <SDMMC_CmdAppOperCommand>
 8004020:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800402c:	e02e      	b.n	800408c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f001 fa4e 	bl	80054d6 <SDMMC_GetResponse>
 800403a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	0fdb      	lsrs	r3, r3, #31
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <SD_PowerON+0xcc>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <SD_PowerON+0xce>
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]

    count++;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	3301      	adds	r3, #1
 8004050:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004058:	4293      	cmp	r3, r2
 800405a:	d802      	bhi.n	8004062 <SD_PowerON+0xe6>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0cc      	beq.n	8003ffc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004068:	4293      	cmp	r3, r2
 800406a:	d902      	bls.n	8004072 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800406c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004070:	e00c      	b.n	800408c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
 8004082:	e002      	b.n	800408a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	c1100000 	.word	0xc1100000

08004098 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fa11 	bl	80054d6 <SDMMC_GetResponse>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040be:	d102      	bne.n	80040c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80040c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040c4:	e02f      	b.n	8004126 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80040c6:	f107 030c 	add.w	r3, r7, #12
 80040ca:	4619      	mov	r1, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f879 	bl	80041c4 <SD_FindSCR>
 80040d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	e023      	b.n	8004126 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01c      	beq.n	8004122 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f001 faaf 	bl	8005658 <SDMMC_CmdAppCommand>
 80040fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	e00f      	b.n	8004126 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fae9 	bl	80056e4 <SDMMC_CmdBusWidth>
 8004112:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	e003      	b.n	8004126 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800411e:	2300      	movs	r3, #0
 8004120:	e001      	b.n	8004126 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004122:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f001 f9c6 	bl	80054d6 <SDMMC_GetResponse>
 800414a:	4603      	mov	r3, r0
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004154:	d102      	bne.n	800415c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800415a:	e02f      	b.n	80041bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800415c:	f107 030c 	add.w	r3, r7, #12
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f82e 	bl	80041c4 <SD_FindSCR>
 8004168:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	e023      	b.n	80041bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01c      	beq.n	80041b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f001 fa64 	bl	8005658 <SDMMC_CmdAppCommand>
 8004190:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	e00f      	b.n	80041bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fa9e 	bl	80056e4 <SDMMC_CmdBusWidth>
 80041a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	e003      	b.n	80041bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e001      	b.n	80041bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b08f      	sub	sp, #60	; 0x3c
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80041ce:	f7fd fa27 	bl	8001620 <HAL_GetTick>
 80041d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2108      	movs	r1, #8
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f9b2 	bl	8005554 <SDMMC_CmdBlockLength>
 80041f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SD_FindSCR+0x38>
  {
    return errorstate;
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	e0b2      	b.n	8004362 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f001 fa25 	bl	8005658 <SDMMC_CmdAppCommand>
 800420e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	e0a3      	b.n	8004362 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004220:	2308      	movs	r3, #8
 8004222:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004224:	2330      	movs	r3, #48	; 0x30
 8004226:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004228:	2302      	movs	r3, #2
 800422a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800422c:	2300      	movs	r3, #0
 800422e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004230:	2301      	movs	r3, #1
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f107 0210 	add.w	r2, r7, #16
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f001 f95c 	bl	80054fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f001 fa6d 	bl	8005728 <SDMMC_CmdSendSCR>
 800424e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d02a      	beq.n	80042ac <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	e083      	b.n	8004362 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00f      	beq.n	8004288 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	f107 0208 	add.w	r2, r7, #8
 8004274:	18d4      	adds	r4, r2, r3
 8004276:	4608      	mov	r0, r1
 8004278:	f001 f8cc 	bl	8005414 <SDMMC_ReadFIFO>
 800427c:	4603      	mov	r3, r0
 800427e:	6023      	str	r3, [r4, #0]
      index++;
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	3301      	adds	r3, #1
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
 8004286:	e006      	b.n	8004296 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004296:	f7fd f9c3 	bl	8001620 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a4:	d102      	bne.n	80042ac <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80042a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042aa:	e05a      	b.n	8004362 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0cf      	beq.n	800425a <SD_FindSCR+0x96>
 80042ba:	e000      	b.n	80042be <SD_FindSCR+0xfa>
      break;
 80042bc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2208      	movs	r2, #8
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80042d4:	2308      	movs	r3, #8
 80042d6:	e044      	b.n	8004362 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2202      	movs	r2, #2
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80042ee:	2302      	movs	r3, #2
 80042f0:	e037      	b.n	8004362 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2220      	movs	r2, #32
 8004306:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004308:	2320      	movs	r3, #32
 800430a:	e02a      	b.n	8004362 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f240 523a 	movw	r2, #1338	; 0x53a
 8004314:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	061a      	lsls	r2, r3, #24
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004322:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800432c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	0e1b      	lsrs	r3, r3, #24
 8004332:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	601a      	str	r2, [r3, #0]
    scr++;
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	3304      	adds	r3, #4
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	061a      	lsls	r2, r3, #24
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800434a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004354:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0e1b      	lsrs	r3, r3, #24
 800435a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	373c      	adds	r7, #60	; 0x3c
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}

0800436a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e09d      	b.n	80044b8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438c:	d009      	beq.n	80043a2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	61da      	str	r2, [r3, #28]
 8004394:	e005      	b.n	80043a2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fc fee3 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043e2:	d902      	bls.n	80043ea <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e002      	b.n	80043f0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043f8:	d007      	beq.n	800440a <HAL_SPI_Init+0xa0>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004402:	d002      	beq.n	800440a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	ea42 0103 	orr.w	r1, r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0204 	and.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004486:	ea42 0103 	orr.w	r1, r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e040      	b.n	8004554 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fe94 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2224      	movs	r2, #36	; 0x24
 80044ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f924 	bl	800474c <UART_SetConfig>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e022      	b.n	8004554 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fb7a 	bl	8004c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800452a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800453a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fc01 	bl	8004d54 <UART_CheckIdleState>
 8004552:	4603      	mov	r3, r0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004570:	2b20      	cmp	r3, #32
 8004572:	f040 8081 	bne.w	8004678 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_UART_Transmit+0x26>
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e079      	b.n	800467a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_UART_Transmit+0x38>
 8004590:	2302      	movs	r3, #2
 8004592:	e072      	b.n	800467a <HAL_UART_Transmit+0x11e>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2221      	movs	r2, #33	; 0x21
 80045a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045aa:	f7fd f839 	bl	8001620 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c8:	d108      	bne.n	80045dc <HAL_UART_Transmit+0x80>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e003      	b.n	80045e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80045ec:	e02c      	b.n	8004648 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2180      	movs	r1, #128	; 0x80
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fbf4 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e038      	b.n	800467a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800461c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	3302      	adds	r3, #2
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	e007      	b.n	8004636 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3301      	adds	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1cc      	bne.n	80045ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2200      	movs	r2, #0
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fbc1 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e005      	b.n	800467a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b08a      	sub	sp, #40	; 0x28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	4613      	mov	r3, r2
 800468e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004694:	2b20      	cmp	r3, #32
 8004696:	d13d      	bne.n	8004714 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_UART_Receive_IT+0x22>
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e036      	b.n	8004716 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Receive_IT+0x34>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e02f      	b.n	8004716 <HAL_UART_Receive_IT+0x94>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d018      	beq.n	8004704 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	613b      	str	r3, [r7, #16]
   return(result);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	69f9      	ldr	r1, [r7, #28]
 80046f6:	6a3a      	ldr	r2, [r7, #32]
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e6      	bne.n	80046d2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	461a      	mov	r2, r3
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fc30 	bl	8004f70 <UART_Start_Receive_IT>
 8004710:	4603      	mov	r3, r0
 8004712:	e000      	b.n	8004716 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3728      	adds	r7, #40	; 0x28
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4ba7      	ldr	r3, [pc, #668]	; (8004a14 <UART_SetConfig+0x2c8>)
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	6979      	ldr	r1, [r7, #20]
 8004780:	430b      	orrs	r3, r1
 8004782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a95      	ldr	r2, [pc, #596]	; (8004a18 <UART_SetConfig+0x2cc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d120      	bne.n	800480a <UART_SetConfig+0xbe>
 80047c8:	4b94      	ldr	r3, [pc, #592]	; (8004a1c <UART_SetConfig+0x2d0>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d816      	bhi.n	8004804 <UART_SetConfig+0xb8>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x90>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	080047f9 	.word	0x080047f9
 80047e4:	080047f3 	.word	0x080047f3
 80047e8:	080047ff 	.word	0x080047ff
 80047ec:	2301      	movs	r3, #1
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e14f      	b.n	8004a92 <UART_SetConfig+0x346>
 80047f2:	2302      	movs	r3, #2
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e14c      	b.n	8004a92 <UART_SetConfig+0x346>
 80047f8:	2304      	movs	r3, #4
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e149      	b.n	8004a92 <UART_SetConfig+0x346>
 80047fe:	2308      	movs	r3, #8
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e146      	b.n	8004a92 <UART_SetConfig+0x346>
 8004804:	2310      	movs	r3, #16
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e143      	b.n	8004a92 <UART_SetConfig+0x346>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a84      	ldr	r2, [pc, #528]	; (8004a20 <UART_SetConfig+0x2d4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d132      	bne.n	800487a <UART_SetConfig+0x12e>
 8004814:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <UART_SetConfig+0x2d0>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d828      	bhi.n	8004874 <UART_SetConfig+0x128>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <UART_SetConfig+0xdc>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	0800485d 	.word	0x0800485d
 800482c:	08004875 	.word	0x08004875
 8004830:	08004875 	.word	0x08004875
 8004834:	08004875 	.word	0x08004875
 8004838:	08004869 	.word	0x08004869
 800483c:	08004875 	.word	0x08004875
 8004840:	08004875 	.word	0x08004875
 8004844:	08004875 	.word	0x08004875
 8004848:	08004863 	.word	0x08004863
 800484c:	08004875 	.word	0x08004875
 8004850:	08004875 	.word	0x08004875
 8004854:	08004875 	.word	0x08004875
 8004858:	0800486f 	.word	0x0800486f
 800485c:	2300      	movs	r3, #0
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e117      	b.n	8004a92 <UART_SetConfig+0x346>
 8004862:	2302      	movs	r3, #2
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e114      	b.n	8004a92 <UART_SetConfig+0x346>
 8004868:	2304      	movs	r3, #4
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e111      	b.n	8004a92 <UART_SetConfig+0x346>
 800486e:	2308      	movs	r3, #8
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e10e      	b.n	8004a92 <UART_SetConfig+0x346>
 8004874:	2310      	movs	r3, #16
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e10b      	b.n	8004a92 <UART_SetConfig+0x346>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a69      	ldr	r2, [pc, #420]	; (8004a24 <UART_SetConfig+0x2d8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d120      	bne.n	80048c6 <UART_SetConfig+0x17a>
 8004884:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <UART_SetConfig+0x2d0>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800488e:	2b30      	cmp	r3, #48	; 0x30
 8004890:	d013      	beq.n	80048ba <UART_SetConfig+0x16e>
 8004892:	2b30      	cmp	r3, #48	; 0x30
 8004894:	d814      	bhi.n	80048c0 <UART_SetConfig+0x174>
 8004896:	2b20      	cmp	r3, #32
 8004898:	d009      	beq.n	80048ae <UART_SetConfig+0x162>
 800489a:	2b20      	cmp	r3, #32
 800489c:	d810      	bhi.n	80048c0 <UART_SetConfig+0x174>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <UART_SetConfig+0x15c>
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d006      	beq.n	80048b4 <UART_SetConfig+0x168>
 80048a6:	e00b      	b.n	80048c0 <UART_SetConfig+0x174>
 80048a8:	2300      	movs	r3, #0
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0f1      	b.n	8004a92 <UART_SetConfig+0x346>
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0ee      	b.n	8004a92 <UART_SetConfig+0x346>
 80048b4:	2304      	movs	r3, #4
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0eb      	b.n	8004a92 <UART_SetConfig+0x346>
 80048ba:	2308      	movs	r3, #8
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e0e8      	b.n	8004a92 <UART_SetConfig+0x346>
 80048c0:	2310      	movs	r3, #16
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e0e5      	b.n	8004a92 <UART_SetConfig+0x346>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <UART_SetConfig+0x2dc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d120      	bne.n	8004912 <UART_SetConfig+0x1c6>
 80048d0:	4b52      	ldr	r3, [pc, #328]	; (8004a1c <UART_SetConfig+0x2d0>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048da:	2bc0      	cmp	r3, #192	; 0xc0
 80048dc:	d013      	beq.n	8004906 <UART_SetConfig+0x1ba>
 80048de:	2bc0      	cmp	r3, #192	; 0xc0
 80048e0:	d814      	bhi.n	800490c <UART_SetConfig+0x1c0>
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	d009      	beq.n	80048fa <UART_SetConfig+0x1ae>
 80048e6:	2b80      	cmp	r3, #128	; 0x80
 80048e8:	d810      	bhi.n	800490c <UART_SetConfig+0x1c0>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <UART_SetConfig+0x1a8>
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d006      	beq.n	8004900 <UART_SetConfig+0x1b4>
 80048f2:	e00b      	b.n	800490c <UART_SetConfig+0x1c0>
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e0cb      	b.n	8004a92 <UART_SetConfig+0x346>
 80048fa:	2302      	movs	r3, #2
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e0c8      	b.n	8004a92 <UART_SetConfig+0x346>
 8004900:	2304      	movs	r3, #4
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e0c5      	b.n	8004a92 <UART_SetConfig+0x346>
 8004906:	2308      	movs	r3, #8
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e0c2      	b.n	8004a92 <UART_SetConfig+0x346>
 800490c:	2310      	movs	r3, #16
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e0bf      	b.n	8004a92 <UART_SetConfig+0x346>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a45      	ldr	r2, [pc, #276]	; (8004a2c <UART_SetConfig+0x2e0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d125      	bne.n	8004968 <UART_SetConfig+0x21c>
 800491c:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <UART_SetConfig+0x2d0>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800492a:	d017      	beq.n	800495c <UART_SetConfig+0x210>
 800492c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004930:	d817      	bhi.n	8004962 <UART_SetConfig+0x216>
 8004932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004936:	d00b      	beq.n	8004950 <UART_SetConfig+0x204>
 8004938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493c:	d811      	bhi.n	8004962 <UART_SetConfig+0x216>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <UART_SetConfig+0x1fe>
 8004942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004946:	d006      	beq.n	8004956 <UART_SetConfig+0x20a>
 8004948:	e00b      	b.n	8004962 <UART_SetConfig+0x216>
 800494a:	2300      	movs	r3, #0
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e0a0      	b.n	8004a92 <UART_SetConfig+0x346>
 8004950:	2302      	movs	r3, #2
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e09d      	b.n	8004a92 <UART_SetConfig+0x346>
 8004956:	2304      	movs	r3, #4
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e09a      	b.n	8004a92 <UART_SetConfig+0x346>
 800495c:	2308      	movs	r3, #8
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e097      	b.n	8004a92 <UART_SetConfig+0x346>
 8004962:	2310      	movs	r3, #16
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e094      	b.n	8004a92 <UART_SetConfig+0x346>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <UART_SetConfig+0x2e4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d125      	bne.n	80049be <UART_SetConfig+0x272>
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <UART_SetConfig+0x2d0>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800497c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004980:	d017      	beq.n	80049b2 <UART_SetConfig+0x266>
 8004982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004986:	d817      	bhi.n	80049b8 <UART_SetConfig+0x26c>
 8004988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498c:	d00b      	beq.n	80049a6 <UART_SetConfig+0x25a>
 800498e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004992:	d811      	bhi.n	80049b8 <UART_SetConfig+0x26c>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <UART_SetConfig+0x254>
 8004998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499c:	d006      	beq.n	80049ac <UART_SetConfig+0x260>
 800499e:	e00b      	b.n	80049b8 <UART_SetConfig+0x26c>
 80049a0:	2301      	movs	r3, #1
 80049a2:	77fb      	strb	r3, [r7, #31]
 80049a4:	e075      	b.n	8004a92 <UART_SetConfig+0x346>
 80049a6:	2302      	movs	r3, #2
 80049a8:	77fb      	strb	r3, [r7, #31]
 80049aa:	e072      	b.n	8004a92 <UART_SetConfig+0x346>
 80049ac:	2304      	movs	r3, #4
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e06f      	b.n	8004a92 <UART_SetConfig+0x346>
 80049b2:	2308      	movs	r3, #8
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e06c      	b.n	8004a92 <UART_SetConfig+0x346>
 80049b8:	2310      	movs	r3, #16
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e069      	b.n	8004a92 <UART_SetConfig+0x346>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <UART_SetConfig+0x2e8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d137      	bne.n	8004a38 <UART_SetConfig+0x2ec>
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <UART_SetConfig+0x2d0>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049d6:	d017      	beq.n	8004a08 <UART_SetConfig+0x2bc>
 80049d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049dc:	d817      	bhi.n	8004a0e <UART_SetConfig+0x2c2>
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e2:	d00b      	beq.n	80049fc <UART_SetConfig+0x2b0>
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d811      	bhi.n	8004a0e <UART_SetConfig+0x2c2>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <UART_SetConfig+0x2aa>
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f2:	d006      	beq.n	8004a02 <UART_SetConfig+0x2b6>
 80049f4:	e00b      	b.n	8004a0e <UART_SetConfig+0x2c2>
 80049f6:	2300      	movs	r3, #0
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e04a      	b.n	8004a92 <UART_SetConfig+0x346>
 80049fc:	2302      	movs	r3, #2
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e047      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a02:	2304      	movs	r3, #4
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e044      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e041      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a0e:	2310      	movs	r3, #16
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e03e      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a14:	efff69f3 	.word	0xefff69f3
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40004400 	.word	0x40004400
 8004a24:	40004800 	.word	0x40004800
 8004a28:	40004c00 	.word	0x40004c00
 8004a2c:	40005000 	.word	0x40005000
 8004a30:	40011400 	.word	0x40011400
 8004a34:	40007800 	.word	0x40007800
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a71      	ldr	r2, [pc, #452]	; (8004c04 <UART_SetConfig+0x4b8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d125      	bne.n	8004a8e <UART_SetConfig+0x342>
 8004a42:	4b71      	ldr	r3, [pc, #452]	; (8004c08 <UART_SetConfig+0x4bc>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a50:	d017      	beq.n	8004a82 <UART_SetConfig+0x336>
 8004a52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a56:	d817      	bhi.n	8004a88 <UART_SetConfig+0x33c>
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	d00b      	beq.n	8004a76 <UART_SetConfig+0x32a>
 8004a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a62:	d811      	bhi.n	8004a88 <UART_SetConfig+0x33c>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <UART_SetConfig+0x324>
 8004a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6c:	d006      	beq.n	8004a7c <UART_SetConfig+0x330>
 8004a6e:	e00b      	b.n	8004a88 <UART_SetConfig+0x33c>
 8004a70:	2300      	movs	r3, #0
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e00d      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a76:	2302      	movs	r3, #2
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e00a      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e007      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a82:	2308      	movs	r3, #8
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e004      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e001      	b.n	8004a92 <UART_SetConfig+0x346>
 8004a8e:	2310      	movs	r3, #16
 8004a90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9a:	d15a      	bne.n	8004b52 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004a9c:	7ffb      	ldrb	r3, [r7, #31]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d827      	bhi.n	8004af2 <UART_SetConfig+0x3a6>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <UART_SetConfig+0x35c>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004ad5 	.word	0x08004ad5
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	08004af3 	.word	0x08004af3
 8004ab8:	08004ae3 	.word	0x08004ae3
 8004abc:	08004af3 	.word	0x08004af3
 8004ac0:	08004af3 	.word	0x08004af3
 8004ac4:	08004af3 	.word	0x08004af3
 8004ac8:	08004aeb 	.word	0x08004aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004acc:	f7fe fa44 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004ad0:	61b8      	str	r0, [r7, #24]
        break;
 8004ad2:	e013      	b.n	8004afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad4:	f7fe fa54 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8004ad8:	61b8      	str	r0, [r7, #24]
        break;
 8004ada:	e00f      	b.n	8004afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004adc:	4b4b      	ldr	r3, [pc, #300]	; (8004c0c <UART_SetConfig+0x4c0>)
 8004ade:	61bb      	str	r3, [r7, #24]
        break;
 8004ae0:	e00c      	b.n	8004afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae2:	f7fe f94b 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8004ae6:	61b8      	str	r0, [r7, #24]
        break;
 8004ae8:	e008      	b.n	8004afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aee:	61bb      	str	r3, [r7, #24]
        break;
 8004af0:	e004      	b.n	8004afc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	77bb      	strb	r3, [r7, #30]
        break;
 8004afa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d074      	beq.n	8004bec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	005a      	lsls	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	441a      	add	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	2b0f      	cmp	r3, #15
 8004b1c:	d916      	bls.n	8004b4c <UART_SetConfig+0x400>
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b24:	d212      	bcs.n	8004b4c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f023 030f 	bic.w	r3, r3, #15
 8004b2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	89fb      	ldrh	r3, [r7, #14]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	89fa      	ldrh	r2, [r7, #14]
 8004b48:	60da      	str	r2, [r3, #12]
 8004b4a:	e04f      	b.n	8004bec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	77bb      	strb	r3, [r7, #30]
 8004b50:	e04c      	b.n	8004bec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b52:	7ffb      	ldrb	r3, [r7, #31]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d828      	bhi.n	8004baa <UART_SetConfig+0x45e>
 8004b58:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0x414>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004bab 	.word	0x08004bab
 8004b7c:	08004bab 	.word	0x08004bab
 8004b80:	08004ba3 	.word	0x08004ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b84:	f7fe f9e8 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004b88:	61b8      	str	r0, [r7, #24]
        break;
 8004b8a:	e013      	b.n	8004bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe f9f8 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8004b90:	61b8      	str	r0, [r7, #24]
        break;
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b94:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <UART_SetConfig+0x4c0>)
 8004b96:	61bb      	str	r3, [r7, #24]
        break;
 8004b98:	e00c      	b.n	8004bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9a:	f7fe f8ef 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8004b9e:	61b8      	str	r0, [r7, #24]
        break;
 8004ba0:	e008      	b.n	8004bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba6:	61bb      	str	r3, [r7, #24]
        break;
 8004ba8:	e004      	b.n	8004bb4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bb2:	bf00      	nop
    }

    if (pclk != 0U)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d018      	beq.n	8004bec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085a      	lsrs	r2, r3, #1
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d909      	bls.n	8004be8 <UART_SetConfig+0x49c>
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bda:	d205      	bcs.n	8004be8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	e001      	b.n	8004bec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bf8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40007c00 	.word	0x40007c00
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	00f42400 	.word	0x00f42400

08004c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01a      	beq.n	8004d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0e:	d10a      	bne.n	8004d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d64:	f7fc fc5c 	bl	8001620 <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d10e      	bne.n	8004d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f82d 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e023      	b.n	8004dde <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d10e      	bne.n	8004dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f817 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e00d      	b.n	8004dde <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b09c      	sub	sp, #112	; 0x70
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df6:	e0a5      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfe:	f000 80a1 	beq.w	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fc fc0d 	bl	8001620 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d13e      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	663b      	str	r3, [r7, #96]	; 0x60
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e067      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d04f      	beq.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d147      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f10:	623a      	str	r2, [r7, #32]
 8004f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e010      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	f43f af4a 	beq.w	8004df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3770      	adds	r7, #112	; 0x70
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b097      	sub	sp, #92	; 0x5c
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d10e      	bne.n	8004fc2 <UART_Start_Receive_IT+0x52>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <UART_Start_Receive_IT+0x48>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fb6:	e02d      	b.n	8005014 <UART_Start_Receive_IT+0xa4>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fc0:	e028      	b.n	8005014 <UART_Start_Receive_IT+0xa4>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <UART_Start_Receive_IT+0x76>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <UART_Start_Receive_IT+0x6c>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	22ff      	movs	r2, #255	; 0xff
 8004fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fda:	e01b      	b.n	8005014 <UART_Start_Receive_IT+0xa4>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	227f      	movs	r2, #127	; 0x7f
 8004fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fe4:	e016      	b.n	8005014 <UART_Start_Receive_IT+0xa4>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fee:	d10d      	bne.n	800500c <UART_Start_Receive_IT+0x9c>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <UART_Start_Receive_IT+0x92>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	227f      	movs	r2, #127	; 0x7f
 8004ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005000:	e008      	b.n	8005014 <UART_Start_Receive_IT+0xa4>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	223f      	movs	r2, #63	; 0x3f
 8005006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800500a:	e003      	b.n	8005014 <UART_Start_Receive_IT+0xa4>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2222      	movs	r2, #34	; 0x22
 8005020:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	657b      	str	r3, [r7, #84]	; 0x54
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3308      	adds	r3, #8
 8005040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005042:	64ba      	str	r2, [r7, #72]	; 0x48
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e5      	bne.n	8005022 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505e:	d107      	bne.n	8005070 <UART_Start_Receive_IT+0x100>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d103      	bne.n	8005070 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a24      	ldr	r2, [pc, #144]	; (80050fc <UART_Start_Receive_IT+0x18c>)
 800506c:	665a      	str	r2, [r3, #100]	; 0x64
 800506e:	e002      	b.n	8005076 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4a23      	ldr	r2, [pc, #140]	; (8005100 <UART_Start_Receive_IT+0x190>)
 8005074:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d019      	beq.n	80050ba <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
 80050a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e6      	bne.n	8005086 <UART_Start_Receive_IT+0x116>
 80050b8:	e018      	b.n	80050ec <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	613b      	str	r3, [r7, #16]
   return(result);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f043 0320 	orr.w	r3, r3, #32
 80050ce:	653b      	str	r3, [r7, #80]	; 0x50
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	6a3a      	ldr	r2, [r7, #32]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	375c      	adds	r7, #92	; 0x5c
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	08005261 	.word	0x08005261
 8005100:	08005105 	.word	0x08005105

08005104 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b096      	sub	sp, #88	; 0x58
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005112:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511a:	2b22      	cmp	r3, #34	; 0x22
 800511c:	f040 8094 	bne.w	8005248 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800512a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800512e:	b2d9      	uxtb	r1, r3
 8005130:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005134:	b2da      	uxtb	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	400a      	ands	r2, r1
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d177      	bne.n	8005258 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517c:	653b      	str	r3, [r7, #80]	; 0x50
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005186:	647b      	str	r3, [r7, #68]	; 0x44
 8005188:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800518c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e6      	bne.n	8005168 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	623b      	str	r3, [r7, #32]
   return(result);
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3308      	adds	r3, #8
 80051b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ba:	633a      	str	r2, [r7, #48]	; 0x30
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e5      	bne.n	800519a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d12e      	bne.n	8005240 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	617b      	str	r3, [r7, #20]
   return(result);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e6      	bne.n	80051e8 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d103      	bne.n	8005230 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2210      	movs	r2, #16
 800522e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fa7a 	bl	8004732 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800523e:	e00b      	b.n	8005258 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff fa6c 	bl	800471e <HAL_UART_RxCpltCallback>
}
 8005246:	e007      	b.n	8005258 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0208 	orr.w	r2, r2, #8
 8005256:	619a      	str	r2, [r3, #24]
}
 8005258:	bf00      	nop
 800525a:	3758      	adds	r7, #88	; 0x58
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b096      	sub	sp, #88	; 0x58
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800526e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005276:	2b22      	cmp	r3, #34	; 0x22
 8005278:	f040 8094 	bne.w	80053a4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800528c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005290:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005294:	4013      	ands	r3, r2
 8005296:	b29a      	uxth	r2, r3
 8005298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	1c9a      	adds	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d177      	bne.n	80053b4 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e2:	643b      	str	r3, [r7, #64]	; 0x40
 80052e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e6      	bne.n	80052c4 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	61fb      	str	r3, [r7, #28]
   return(result);
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	64bb      	str	r3, [r7, #72]	; 0x48
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3308      	adds	r3, #8
 8005314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800531c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e5      	bne.n	80052f6 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533a:	2b01      	cmp	r3, #1
 800533c:	d12e      	bne.n	800539c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	60bb      	str	r3, [r7, #8]
   return(result);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 0310 	bic.w	r3, r3, #16
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	613b      	str	r3, [r7, #16]
   return(result);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d103      	bne.n	800538c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2210      	movs	r2, #16
 800538a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff f9cc 	bl	8004732 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800539a:	e00b      	b.n	80053b4 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff f9be 	bl	800471e <HAL_UART_RxCpltCallback>
}
 80053a2:	e007      	b.n	80053b4 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0208 	orr.w	r2, r2, #8
 80053b2:	619a      	str	r2, [r3, #24]
}
 80053b4:	bf00      	nop
 80053b6:	3758      	adds	r7, #88	; 0x58
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80053bc:	b084      	sub	sp, #16
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	f107 001c 	add.w	r0, r7, #28
 80053ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80053d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80053d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80053d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80053da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80053de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80053e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80053e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <SDMMC_Init+0x54>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	b004      	add	sp, #16
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	ffff8100 	.word	0xffff8100

08005414 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2203      	movs	r2, #3
 800543a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0303 	and.w	r3, r3, #3
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005486:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800548c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005492:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <SDMMC_SendCommand+0x50>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	fffff000 	.word	0xfffff000

080054bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	b2db      	uxtb	r3, r3
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3314      	adds	r3, #20
 80054e4:	461a      	mov	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
}  
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005522:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005528:	431a      	orrs	r2, r3
                       Data->DPSM);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800552e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0

}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005562:	2310      	movs	r3, #16
 8005564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005566:	2340      	movs	r3, #64	; 0x40
 8005568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800556e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005572:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ff74 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	2110      	movs	r1, #16
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f94e 	bl	8005828 <SDMMC_GetCmdResp1>
 800558c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800558e:	69fb      	ldr	r3, [r7, #28]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80055a8:	2307      	movs	r3, #7
 80055aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055ac:	2340      	movs	r3, #64	; 0x40
 80055ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055ba:	f107 0310 	add.w	r3, r7, #16
 80055be:	4619      	mov	r1, r3
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ff51 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	2107      	movs	r1, #7
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f92b 	bl	8005828 <SDMMC_GetCmdResp1>
 80055d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3728      	adds	r7, #40	; 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b088      	sub	sp, #32
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055fc:	f107 0308 	add.w	r3, r7, #8
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ff30 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fb45 	bl	8005c98 <SDMMC_GetCmdError>
 800560e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005610:	69fb      	ldr	r3, [r7, #28]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b088      	sub	sp, #32
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005622:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005628:	2308      	movs	r3, #8
 800562a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800562c:	2340      	movs	r3, #64	; 0x40
 800562e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ff11 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fad8 	bl	8005bfc <SDMMC_GetCmdResp7>
 800564c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800564e:	69fb      	ldr	r3, [r7, #28]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005666:	2337      	movs	r3, #55	; 0x37
 8005668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800566a:	2340      	movs	r3, #64	; 0x40
 800566c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005678:	f107 0308 	add.w	r3, r7, #8
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fef2 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005684:	f241 3288 	movw	r2, #5000	; 0x1388
 8005688:	2137      	movs	r1, #55	; 0x37
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8cc 	bl	8005828 <SDMMC_GetCmdResp1>
 8005690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005692:	69fb      	ldr	r3, [r7, #28]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <SDMMC_CmdAppOperCommand+0x44>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80056ae:	2329      	movs	r3, #41	; 0x29
 80056b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056c0:	f107 0308 	add.w	r3, r7, #8
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff fece 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f9e1 	bl	8005a94 <SDMMC_GetCmdResp3>
 80056d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	80100000 	.word	0x80100000

080056e4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80056f2:	2306      	movs	r3, #6
 80056f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005704:	f107 0308 	add.w	r3, r7, #8
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff feac 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	2106      	movs	r1, #6
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f886 	bl	8005828 <SDMMC_GetCmdResp1>
 800571c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800571e:	69fb      	ldr	r3, [r7, #28]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005734:	2333      	movs	r3, #51	; 0x33
 8005736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005738:	2340      	movs	r3, #64	; 0x40
 800573a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fe8b 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	2133      	movs	r1, #51	; 0x33
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f865 	bl	8005828 <SDMMC_GetCmdResp1>
 800575e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005760:	69fb      	ldr	r3, [r7, #28]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005776:	2302      	movs	r3, #2
 8005778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800577a:	23c0      	movs	r3, #192	; 0xc0
 800577c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005788:	f107 0308 	add.w	r3, r7, #8
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fe6a 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f935 	bl	8005a04 <SDMMC_GetCmdResp2>
 800579a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800579c:	69fb      	ldr	r3, [r7, #28]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b088      	sub	sp, #32
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80057b4:	2309      	movs	r3, #9
 80057b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80057b8:	23c0      	movs	r3, #192	; 0xc0
 80057ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fe4b 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f916 	bl	8005a04 <SDMMC_GetCmdResp2>
 80057d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057da:	69fb      	ldr	r3, [r7, #28]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80057f2:	2303      	movs	r3, #3
 80057f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057f6:	2340      	movs	r3, #64	; 0x40
 80057f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fe2c 	bl	8005468 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	2103      	movs	r1, #3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f97b 	bl	8005b10 <SDMMC_GetCmdResp6>
 800581a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800581c:	69fb      	ldr	r3, [r7, #28]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	460b      	mov	r3, r1
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005836:	4b70      	ldr	r3, [pc, #448]	; (80059f8 <SDMMC_GetCmdResp1+0x1d0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a70      	ldr	r2, [pc, #448]	; (80059fc <SDMMC_GetCmdResp1+0x1d4>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	0a5a      	lsrs	r2, r3, #9
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	61fa      	str	r2, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005858:	e0c9      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ef      	beq.n	800584a <SDMMC_GetCmdResp1+0x22>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ea      	bne.n	800584a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2204      	movs	r2, #4
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005886:	2304      	movs	r3, #4
 8005888:	e0b1      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800589c:	2301      	movs	r3, #1
 800589e:	e0a6      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	22c5      	movs	r2, #197	; 0xc5
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fe08 	bl	80054bc <SDMMC_GetCommandResponse>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	7afb      	ldrb	r3, [r7, #11]
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d001      	beq.n	80058ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e099      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80058ba:	2100      	movs	r1, #0
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fe0a 	bl	80054d6 <SDMMC_GetResponse>
 80058c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <SDMMC_GetCmdResp1+0x1d8>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e08d      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	da02      	bge.n	80058de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80058d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058dc:	e087      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	e080      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	e079      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005908:	e071      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005918:	e069      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005928:	e061      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005938:	e059      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005948:	e051      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005958:	e049      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005968:	e041      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005978:	e039      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005988:	e031      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005994:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005998:	e029      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80059a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059a8:	e021      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80059b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059b8:	e019      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80059c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059c8:	e011      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80059d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059d8:	e009      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80059e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80059e8:	e001      	b.n	80059ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80059ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000000 	.word	0x20000000
 80059fc:	10624dd3 	.word	0x10624dd3
 8005a00:	fdffe008 	.word	0xfdffe008

08005a04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <SDMMC_GetCmdResp2+0x88>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <SDMMC_GetCmdResp2+0x8c>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	0a5b      	lsrs	r3, r3, #9
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1e5a      	subs	r2, r3, #1
 8005a26:	60fa      	str	r2, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a30:	e026      	b.n	8005a80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ef      	beq.n	8005a22 <SDMMC_GetCmdResp2+0x1e>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ea      	bne.n	8005a22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a5e:	2304      	movs	r3, #4
 8005a60:	e00e      	b.n	8005a80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d004      	beq.n	8005a78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e003      	b.n	8005a80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	22c5      	movs	r2, #197	; 0xc5
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000000 	.word	0x20000000
 8005a90:	10624dd3 	.word	0x10624dd3

08005a94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a9c:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <SDMMC_GetCmdResp3+0x74>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <SDMMC_GetCmdResp3+0x78>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	0a5b      	lsrs	r3, r3, #9
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1e5a      	subs	r2, r3, #1
 8005ab6:	60fa      	str	r2, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005abc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ac0:	e01b      	b.n	8005afa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0ef      	beq.n	8005ab2 <SDMMC_GetCmdResp3+0x1e>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ea      	bne.n	8005ab2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2204      	movs	r2, #4
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005aee:	2304      	movs	r3, #4
 8005af0:	e003      	b.n	8005afa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	22c5      	movs	r2, #197	; 0xc5
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20000000 	.word	0x20000000
 8005b0c:	10624dd3 	.word	0x10624dd3

08005b10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b1e:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <SDMMC_GetCmdResp6+0xe4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a35      	ldr	r2, [pc, #212]	; (8005bf8 <SDMMC_GetCmdResp6+0xe8>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	0a5b      	lsrs	r3, r3, #9
 8005b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	1e5a      	subs	r2, r3, #1
 8005b38:	61fa      	str	r2, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b42:	e052      	b.n	8005bea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0ef      	beq.n	8005b34 <SDMMC_GetCmdResp6+0x24>
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ea      	bne.n	8005b34 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b70:	2304      	movs	r3, #4
 8005b72:	e03a      	b.n	8005bea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e02f      	b.n	8005bea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff fc96 	bl	80054bc <SDMMC_GetCommandResponse>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	7afb      	ldrb	r3, [r7, #11]
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d001      	beq.n	8005b9e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e025      	b.n	8005bea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	22c5      	movs	r2, #197	; 0xc5
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff fc95 	bl	80054d6 <SDMMC_GetResponse>
 8005bac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e011      	b.n	8005bea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bd4:	e009      	b.n	8005bea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005be4:	e001      	b.n	8005bea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000000 	.word	0x20000000
 8005bf8:	10624dd3 	.word	0x10624dd3

08005bfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c04:	4b22      	ldr	r3, [pc, #136]	; (8005c90 <SDMMC_GetCmdResp7+0x94>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <SDMMC_GetCmdResp7+0x98>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	0a5b      	lsrs	r3, r3, #9
 8005c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	60fa      	str	r2, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c28:	e02c      	b.n	8005c84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ef      	beq.n	8005c1a <SDMMC_GetCmdResp7+0x1e>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ea      	bne.n	8005c1a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2204      	movs	r2, #4
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c56:	2304      	movs	r3, #4
 8005c58:	e014      	b.n	8005c84 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e009      	b.n	8005c84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2240      	movs	r2, #64	; 0x40
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c82:	2300      	movs	r3, #0
  
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20000000 	.word	0x20000000
 8005c94:	10624dd3 	.word	0x10624dd3

08005c98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ca0:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <SDMMC_GetCmdError+0x50>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a11      	ldr	r2, [pc, #68]	; (8005cec <SDMMC_GetCmdError+0x54>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	0a5b      	lsrs	r3, r3, #9
 8005cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1e5a      	subs	r2, r3, #1
 8005cba:	60fa      	str	r2, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cc4:	e009      	b.n	8005cda <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f1      	beq.n	8005cb6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	22c5      	movs	r2, #197	; 0xc5
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000000 	.word	0x20000000
 8005cec:	10624dd3 	.word	0x10624dd3

08005cf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	f107 001c 	add.w	r0, r7, #28
 8005cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d120      	bne.n	8005d4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <USB_CoreInit+0xac>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d105      	bne.n	8005d3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa92 	bl	8006268 <USB_CoreReset>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]
 8005d48:	e010      	b.n	8005d6c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa86 	bl	8006268 <USB_CoreReset>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10b      	bne.n	8005d8a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f043 0206 	orr.w	r2, r3, #6
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d96:	b004      	add	sp, #16
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	ffbdffbf 	.word	0xffbdffbf

08005da0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f023 0201 	bic.w	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d115      	bne.n	8005e10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005df0:	2001      	movs	r0, #1
 8005df2:	f7fb fc21 	bl	8001638 <HAL_Delay>
      ms++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa25 	bl	800624c <USB_GetMode>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d01e      	beq.n	8005e46 <USB_SetCurrentMode+0x84>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b31      	cmp	r3, #49	; 0x31
 8005e0c:	d9f0      	bls.n	8005df0 <USB_SetCurrentMode+0x2e>
 8005e0e:	e01a      	b.n	8005e46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d115      	bne.n	8005e42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e22:	2001      	movs	r0, #1
 8005e24:	f7fb fc08 	bl	8001638 <HAL_Delay>
      ms++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa0c 	bl	800624c <USB_GetMode>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <USB_SetCurrentMode+0x84>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b31      	cmp	r3, #49	; 0x31
 8005e3e:	d9f0      	bls.n	8005e22 <USB_SetCurrentMode+0x60>
 8005e40:	e001      	b.n	8005e46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e005      	b.n	8005e52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b32      	cmp	r3, #50	; 0x32
 8005e4a:	d101      	bne.n	8005e50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e009      	b.n	8005e90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	3340      	adds	r3, #64	; 0x40
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	2200      	movs	r2, #0
 8005e88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b0e      	cmp	r3, #14
 8005e94:	d9f2      	bls.n	8005e7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11c      	bne.n	8005ed6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e005      	b.n	8005ee2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	461a      	mov	r2, r3
 8005efe:	680b      	ldr	r3, [r1, #0]
 8005f00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10c      	bne.n	8005f22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f0e:	2100      	movs	r1, #0
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f961 	bl	80061d8 <USB_SetDevSpeed>
 8005f16:	e008      	b.n	8005f2a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f95c 	bl	80061d8 <USB_SetDevSpeed>
 8005f20:	e003      	b.n	8005f2a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f22:	2103      	movs	r1, #3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f957 	bl	80061d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f2a:	2110      	movs	r1, #16
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8f3 	bl	8006118 <USB_FlushTxFifo>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f91d 	bl	800617c <USB_FlushRxFifo>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	461a      	mov	r2, r3
 8005f54:	2300      	movs	r3, #0
 8005f56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e043      	b.n	8005ffe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f8c:	d118      	bne.n	8005fc0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e013      	b.n	8005fd2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e008      	b.n	8005fd2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ff6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	429a      	cmp	r2, r3
 8006004:	d3b7      	bcc.n	8005f76 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	e043      	b.n	8006094 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800601e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006022:	d118      	bne.n	8006056 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	461a      	mov	r2, r3
 8006038:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e013      	b.n	8006068 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	461a      	mov	r2, r3
 800604e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	e008      	b.n	8006068 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	461a      	mov	r2, r3
 8006064:	2300      	movs	r3, #0
 8006066:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	461a      	mov	r2, r3
 8006076:	2300      	movs	r3, #0
 8006078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	461a      	mov	r2, r3
 8006088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800608c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	3301      	adds	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	429a      	cmp	r2, r3
 800609a:	d3b7      	bcc.n	800600c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d105      	bne.n	80060d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f043 0210 	orr.w	r2, r3, #16
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <USB_DevInit+0x2b4>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f043 0208 	orr.w	r2, r3, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d105      	bne.n	8006100 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <USB_DevInit+0x2b8>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800610c:	b004      	add	sp, #16
 800610e:	4770      	bx	lr
 8006110:	803c3800 	.word	0x803c3800
 8006114:	40000004 	.word	0x40000004

08006118 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	4a12      	ldr	r2, [pc, #72]	; (8006178 <USB_FlushTxFifo+0x60>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d901      	bls.n	8006136 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e01a      	b.n	800616c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	daf3      	bge.n	8006126 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	019b      	lsls	r3, r3, #6
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	4a08      	ldr	r2, [pc, #32]	; (8006178 <USB_FlushTxFifo+0x60>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e006      	b.n	800616c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b20      	cmp	r3, #32
 8006168:	d0f1      	beq.n	800614e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	00030d40 	.word	0x00030d40

0800617c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	4a11      	ldr	r2, [pc, #68]	; (80061d4 <USB_FlushRxFifo+0x58>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e017      	b.n	80061c8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	daf3      	bge.n	8006188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2210      	movs	r2, #16
 80061a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <USB_FlushRxFifo+0x58>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e006      	b.n	80061c8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d0f1      	beq.n	80061aa <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	00030d40 	.word	0x00030d40

080061d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006224:	f023 0303 	bic.w	r3, r3, #3
 8006228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006238:	f043 0302 	orr.w	r3, r3, #2
 800623c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0301 	and.w	r3, r3, #1
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <USB_CoreReset+0x60>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d901      	bls.n	8006284 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e01a      	b.n	80062ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	daf3      	bge.n	8006274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f043 0201 	orr.w	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <USB_CoreReset+0x60>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e006      	b.n	80062ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d0f1      	beq.n	800629c <USB_CoreReset+0x34>

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	00030d40 	.word	0x00030d40

080062cc <__errno>:
 80062cc:	4b01      	ldr	r3, [pc, #4]	; (80062d4 <__errno+0x8>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c

080062d8 <__libc_init_array>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4d0d      	ldr	r5, [pc, #52]	; (8006310 <__libc_init_array+0x38>)
 80062dc:	4c0d      	ldr	r4, [pc, #52]	; (8006314 <__libc_init_array+0x3c>)
 80062de:	1b64      	subs	r4, r4, r5
 80062e0:	10a4      	asrs	r4, r4, #2
 80062e2:	2600      	movs	r6, #0
 80062e4:	42a6      	cmp	r6, r4
 80062e6:	d109      	bne.n	80062fc <__libc_init_array+0x24>
 80062e8:	4d0b      	ldr	r5, [pc, #44]	; (8006318 <__libc_init_array+0x40>)
 80062ea:	4c0c      	ldr	r4, [pc, #48]	; (800631c <__libc_init_array+0x44>)
 80062ec:	f000 fc62 	bl	8006bb4 <_init>
 80062f0:	1b64      	subs	r4, r4, r5
 80062f2:	10a4      	asrs	r4, r4, #2
 80062f4:	2600      	movs	r6, #0
 80062f6:	42a6      	cmp	r6, r4
 80062f8:	d105      	bne.n	8006306 <__libc_init_array+0x2e>
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006300:	4798      	blx	r3
 8006302:	3601      	adds	r6, #1
 8006304:	e7ee      	b.n	80062e4 <__libc_init_array+0xc>
 8006306:	f855 3b04 	ldr.w	r3, [r5], #4
 800630a:	4798      	blx	r3
 800630c:	3601      	adds	r6, #1
 800630e:	e7f2      	b.n	80062f6 <__libc_init_array+0x1e>
 8006310:	08006c2c 	.word	0x08006c2c
 8006314:	08006c2c 	.word	0x08006c2c
 8006318:	08006c2c 	.word	0x08006c2c
 800631c:	08006c30 	.word	0x08006c30

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <sniprintf>:
 8006330:	b40c      	push	{r2, r3}
 8006332:	b530      	push	{r4, r5, lr}
 8006334:	4b17      	ldr	r3, [pc, #92]	; (8006394 <sniprintf+0x64>)
 8006336:	1e0c      	subs	r4, r1, #0
 8006338:	681d      	ldr	r5, [r3, #0]
 800633a:	b09d      	sub	sp, #116	; 0x74
 800633c:	da08      	bge.n	8006350 <sniprintf+0x20>
 800633e:	238b      	movs	r3, #139	; 0x8b
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006346:	b01d      	add	sp, #116	; 0x74
 8006348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800634c:	b002      	add	sp, #8
 800634e:	4770      	bx	lr
 8006350:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006354:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006358:	bf14      	ite	ne
 800635a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800635e:	4623      	moveq	r3, r4
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006368:	9002      	str	r0, [sp, #8]
 800636a:	9006      	str	r0, [sp, #24]
 800636c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006370:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006372:	ab21      	add	r3, sp, #132	; 0x84
 8006374:	a902      	add	r1, sp, #8
 8006376:	4628      	mov	r0, r5
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	f000 f869 	bl	8006450 <_svfiprintf_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	bfbc      	itt	lt
 8006382:	238b      	movlt	r3, #139	; 0x8b
 8006384:	602b      	strlt	r3, [r5, #0]
 8006386:	2c00      	cmp	r4, #0
 8006388:	d0dd      	beq.n	8006346 <sniprintf+0x16>
 800638a:	9b02      	ldr	r3, [sp, #8]
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	e7d9      	b.n	8006346 <sniprintf+0x16>
 8006392:	bf00      	nop
 8006394:	2000000c 	.word	0x2000000c

08006398 <__ssputs_r>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	688e      	ldr	r6, [r1, #8]
 800639e:	429e      	cmp	r6, r3
 80063a0:	4682      	mov	sl, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	4690      	mov	r8, r2
 80063a6:	461f      	mov	r7, r3
 80063a8:	d838      	bhi.n	800641c <__ssputs_r+0x84>
 80063aa:	898a      	ldrh	r2, [r1, #12]
 80063ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063b0:	d032      	beq.n	8006418 <__ssputs_r+0x80>
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	6909      	ldr	r1, [r1, #16]
 80063b6:	eba5 0901 	sub.w	r9, r5, r1
 80063ba:	6965      	ldr	r5, [r4, #20]
 80063bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063c4:	3301      	adds	r3, #1
 80063c6:	444b      	add	r3, r9
 80063c8:	106d      	asrs	r5, r5, #1
 80063ca:	429d      	cmp	r5, r3
 80063cc:	bf38      	it	cc
 80063ce:	461d      	movcc	r5, r3
 80063d0:	0553      	lsls	r3, r2, #21
 80063d2:	d531      	bpl.n	8006438 <__ssputs_r+0xa0>
 80063d4:	4629      	mov	r1, r5
 80063d6:	f000 fb47 	bl	8006a68 <_malloc_r>
 80063da:	4606      	mov	r6, r0
 80063dc:	b950      	cbnz	r0, 80063f4 <__ssputs_r+0x5c>
 80063de:	230c      	movs	r3, #12
 80063e0:	f8ca 3000 	str.w	r3, [sl]
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f4:	6921      	ldr	r1, [r4, #16]
 80063f6:	464a      	mov	r2, r9
 80063f8:	f000 fabe 	bl	8006978 <memcpy>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	6126      	str	r6, [r4, #16]
 800640a:	6165      	str	r5, [r4, #20]
 800640c:	444e      	add	r6, r9
 800640e:	eba5 0509 	sub.w	r5, r5, r9
 8006412:	6026      	str	r6, [r4, #0]
 8006414:	60a5      	str	r5, [r4, #8]
 8006416:	463e      	mov	r6, r7
 8006418:	42be      	cmp	r6, r7
 800641a:	d900      	bls.n	800641e <__ssputs_r+0x86>
 800641c:	463e      	mov	r6, r7
 800641e:	4632      	mov	r2, r6
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	4641      	mov	r1, r8
 8006424:	f000 fab6 	bl	8006994 <memmove>
 8006428:	68a3      	ldr	r3, [r4, #8]
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	1b9b      	subs	r3, r3, r6
 800642e:	4432      	add	r2, r6
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	6022      	str	r2, [r4, #0]
 8006434:	2000      	movs	r0, #0
 8006436:	e7db      	b.n	80063f0 <__ssputs_r+0x58>
 8006438:	462a      	mov	r2, r5
 800643a:	f000 fb6f 	bl	8006b1c <_realloc_r>
 800643e:	4606      	mov	r6, r0
 8006440:	2800      	cmp	r0, #0
 8006442:	d1e1      	bne.n	8006408 <__ssputs_r+0x70>
 8006444:	6921      	ldr	r1, [r4, #16]
 8006446:	4650      	mov	r0, sl
 8006448:	f000 fabe 	bl	80069c8 <_free_r>
 800644c:	e7c7      	b.n	80063de <__ssputs_r+0x46>
	...

08006450 <_svfiprintf_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	4698      	mov	r8, r3
 8006456:	898b      	ldrh	r3, [r1, #12]
 8006458:	061b      	lsls	r3, r3, #24
 800645a:	b09d      	sub	sp, #116	; 0x74
 800645c:	4607      	mov	r7, r0
 800645e:	460d      	mov	r5, r1
 8006460:	4614      	mov	r4, r2
 8006462:	d50e      	bpl.n	8006482 <_svfiprintf_r+0x32>
 8006464:	690b      	ldr	r3, [r1, #16]
 8006466:	b963      	cbnz	r3, 8006482 <_svfiprintf_r+0x32>
 8006468:	2140      	movs	r1, #64	; 0x40
 800646a:	f000 fafd 	bl	8006a68 <_malloc_r>
 800646e:	6028      	str	r0, [r5, #0]
 8006470:	6128      	str	r0, [r5, #16]
 8006472:	b920      	cbnz	r0, 800647e <_svfiprintf_r+0x2e>
 8006474:	230c      	movs	r3, #12
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800647c:	e0d1      	b.n	8006622 <_svfiprintf_r+0x1d2>
 800647e:	2340      	movs	r3, #64	; 0x40
 8006480:	616b      	str	r3, [r5, #20]
 8006482:	2300      	movs	r3, #0
 8006484:	9309      	str	r3, [sp, #36]	; 0x24
 8006486:	2320      	movs	r3, #32
 8006488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800648c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006490:	2330      	movs	r3, #48	; 0x30
 8006492:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800663c <_svfiprintf_r+0x1ec>
 8006496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800649a:	f04f 0901 	mov.w	r9, #1
 800649e:	4623      	mov	r3, r4
 80064a0:	469a      	mov	sl, r3
 80064a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064a6:	b10a      	cbz	r2, 80064ac <_svfiprintf_r+0x5c>
 80064a8:	2a25      	cmp	r2, #37	; 0x25
 80064aa:	d1f9      	bne.n	80064a0 <_svfiprintf_r+0x50>
 80064ac:	ebba 0b04 	subs.w	fp, sl, r4
 80064b0:	d00b      	beq.n	80064ca <_svfiprintf_r+0x7a>
 80064b2:	465b      	mov	r3, fp
 80064b4:	4622      	mov	r2, r4
 80064b6:	4629      	mov	r1, r5
 80064b8:	4638      	mov	r0, r7
 80064ba:	f7ff ff6d 	bl	8006398 <__ssputs_r>
 80064be:	3001      	adds	r0, #1
 80064c0:	f000 80aa 	beq.w	8006618 <_svfiprintf_r+0x1c8>
 80064c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c6:	445a      	add	r2, fp
 80064c8:	9209      	str	r2, [sp, #36]	; 0x24
 80064ca:	f89a 3000 	ldrb.w	r3, [sl]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 80a2 	beq.w	8006618 <_svfiprintf_r+0x1c8>
 80064d4:	2300      	movs	r3, #0
 80064d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064de:	f10a 0a01 	add.w	sl, sl, #1
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	9307      	str	r3, [sp, #28]
 80064e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ea:	931a      	str	r3, [sp, #104]	; 0x68
 80064ec:	4654      	mov	r4, sl
 80064ee:	2205      	movs	r2, #5
 80064f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f4:	4851      	ldr	r0, [pc, #324]	; (800663c <_svfiprintf_r+0x1ec>)
 80064f6:	f7f9 fea3 	bl	8000240 <memchr>
 80064fa:	9a04      	ldr	r2, [sp, #16]
 80064fc:	b9d8      	cbnz	r0, 8006536 <_svfiprintf_r+0xe6>
 80064fe:	06d0      	lsls	r0, r2, #27
 8006500:	bf44      	itt	mi
 8006502:	2320      	movmi	r3, #32
 8006504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006508:	0711      	lsls	r1, r2, #28
 800650a:	bf44      	itt	mi
 800650c:	232b      	movmi	r3, #43	; 0x2b
 800650e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006512:	f89a 3000 	ldrb.w	r3, [sl]
 8006516:	2b2a      	cmp	r3, #42	; 0x2a
 8006518:	d015      	beq.n	8006546 <_svfiprintf_r+0xf6>
 800651a:	9a07      	ldr	r2, [sp, #28]
 800651c:	4654      	mov	r4, sl
 800651e:	2000      	movs	r0, #0
 8006520:	f04f 0c0a 	mov.w	ip, #10
 8006524:	4621      	mov	r1, r4
 8006526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800652a:	3b30      	subs	r3, #48	; 0x30
 800652c:	2b09      	cmp	r3, #9
 800652e:	d94e      	bls.n	80065ce <_svfiprintf_r+0x17e>
 8006530:	b1b0      	cbz	r0, 8006560 <_svfiprintf_r+0x110>
 8006532:	9207      	str	r2, [sp, #28]
 8006534:	e014      	b.n	8006560 <_svfiprintf_r+0x110>
 8006536:	eba0 0308 	sub.w	r3, r0, r8
 800653a:	fa09 f303 	lsl.w	r3, r9, r3
 800653e:	4313      	orrs	r3, r2
 8006540:	9304      	str	r3, [sp, #16]
 8006542:	46a2      	mov	sl, r4
 8006544:	e7d2      	b.n	80064ec <_svfiprintf_r+0x9c>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	1d19      	adds	r1, r3, #4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	9103      	str	r1, [sp, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	bfbb      	ittet	lt
 8006552:	425b      	neglt	r3, r3
 8006554:	f042 0202 	orrlt.w	r2, r2, #2
 8006558:	9307      	strge	r3, [sp, #28]
 800655a:	9307      	strlt	r3, [sp, #28]
 800655c:	bfb8      	it	lt
 800655e:	9204      	strlt	r2, [sp, #16]
 8006560:	7823      	ldrb	r3, [r4, #0]
 8006562:	2b2e      	cmp	r3, #46	; 0x2e
 8006564:	d10c      	bne.n	8006580 <_svfiprintf_r+0x130>
 8006566:	7863      	ldrb	r3, [r4, #1]
 8006568:	2b2a      	cmp	r3, #42	; 0x2a
 800656a:	d135      	bne.n	80065d8 <_svfiprintf_r+0x188>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	9203      	str	r2, [sp, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfb8      	it	lt
 8006578:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800657c:	3402      	adds	r4, #2
 800657e:	9305      	str	r3, [sp, #20]
 8006580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800664c <_svfiprintf_r+0x1fc>
 8006584:	7821      	ldrb	r1, [r4, #0]
 8006586:	2203      	movs	r2, #3
 8006588:	4650      	mov	r0, sl
 800658a:	f7f9 fe59 	bl	8000240 <memchr>
 800658e:	b140      	cbz	r0, 80065a2 <_svfiprintf_r+0x152>
 8006590:	2340      	movs	r3, #64	; 0x40
 8006592:	eba0 000a 	sub.w	r0, r0, sl
 8006596:	fa03 f000 	lsl.w	r0, r3, r0
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	4303      	orrs	r3, r0
 800659e:	3401      	adds	r4, #1
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a6:	4826      	ldr	r0, [pc, #152]	; (8006640 <_svfiprintf_r+0x1f0>)
 80065a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ac:	2206      	movs	r2, #6
 80065ae:	f7f9 fe47 	bl	8000240 <memchr>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d038      	beq.n	8006628 <_svfiprintf_r+0x1d8>
 80065b6:	4b23      	ldr	r3, [pc, #140]	; (8006644 <_svfiprintf_r+0x1f4>)
 80065b8:	bb1b      	cbnz	r3, 8006602 <_svfiprintf_r+0x1b2>
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	3307      	adds	r3, #7
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	3308      	adds	r3, #8
 80065c4:	9303      	str	r3, [sp, #12]
 80065c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c8:	4433      	add	r3, r6
 80065ca:	9309      	str	r3, [sp, #36]	; 0x24
 80065cc:	e767      	b.n	800649e <_svfiprintf_r+0x4e>
 80065ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d2:	460c      	mov	r4, r1
 80065d4:	2001      	movs	r0, #1
 80065d6:	e7a5      	b.n	8006524 <_svfiprintf_r+0xd4>
 80065d8:	2300      	movs	r3, #0
 80065da:	3401      	adds	r4, #1
 80065dc:	9305      	str	r3, [sp, #20]
 80065de:	4619      	mov	r1, r3
 80065e0:	f04f 0c0a 	mov.w	ip, #10
 80065e4:	4620      	mov	r0, r4
 80065e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ea:	3a30      	subs	r2, #48	; 0x30
 80065ec:	2a09      	cmp	r2, #9
 80065ee:	d903      	bls.n	80065f8 <_svfiprintf_r+0x1a8>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0c5      	beq.n	8006580 <_svfiprintf_r+0x130>
 80065f4:	9105      	str	r1, [sp, #20]
 80065f6:	e7c3      	b.n	8006580 <_svfiprintf_r+0x130>
 80065f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80065fc:	4604      	mov	r4, r0
 80065fe:	2301      	movs	r3, #1
 8006600:	e7f0      	b.n	80065e4 <_svfiprintf_r+0x194>
 8006602:	ab03      	add	r3, sp, #12
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	462a      	mov	r2, r5
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <_svfiprintf_r+0x1f8>)
 800660a:	a904      	add	r1, sp, #16
 800660c:	4638      	mov	r0, r7
 800660e:	f3af 8000 	nop.w
 8006612:	1c42      	adds	r2, r0, #1
 8006614:	4606      	mov	r6, r0
 8006616:	d1d6      	bne.n	80065c6 <_svfiprintf_r+0x176>
 8006618:	89ab      	ldrh	r3, [r5, #12]
 800661a:	065b      	lsls	r3, r3, #25
 800661c:	f53f af2c 	bmi.w	8006478 <_svfiprintf_r+0x28>
 8006620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006622:	b01d      	add	sp, #116	; 0x74
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	ab03      	add	r3, sp, #12
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	462a      	mov	r2, r5
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <_svfiprintf_r+0x1f8>)
 8006630:	a904      	add	r1, sp, #16
 8006632:	4638      	mov	r0, r7
 8006634:	f000 f87a 	bl	800672c <_printf_i>
 8006638:	e7eb      	b.n	8006612 <_svfiprintf_r+0x1c2>
 800663a:	bf00      	nop
 800663c:	08006bf0 	.word	0x08006bf0
 8006640:	08006bfa 	.word	0x08006bfa
 8006644:	00000000 	.word	0x00000000
 8006648:	08006399 	.word	0x08006399
 800664c:	08006bf6 	.word	0x08006bf6

08006650 <_printf_common>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	4616      	mov	r6, r2
 8006656:	4699      	mov	r9, r3
 8006658:	688a      	ldr	r2, [r1, #8]
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006660:	4293      	cmp	r3, r2
 8006662:	bfb8      	it	lt
 8006664:	4613      	movlt	r3, r2
 8006666:	6033      	str	r3, [r6, #0]
 8006668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800666c:	4607      	mov	r7, r0
 800666e:	460c      	mov	r4, r1
 8006670:	b10a      	cbz	r2, 8006676 <_printf_common+0x26>
 8006672:	3301      	adds	r3, #1
 8006674:	6033      	str	r3, [r6, #0]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	0699      	lsls	r1, r3, #26
 800667a:	bf42      	ittt	mi
 800667c:	6833      	ldrmi	r3, [r6, #0]
 800667e:	3302      	addmi	r3, #2
 8006680:	6033      	strmi	r3, [r6, #0]
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	f015 0506 	ands.w	r5, r5, #6
 8006688:	d106      	bne.n	8006698 <_printf_common+0x48>
 800668a:	f104 0a19 	add.w	sl, r4, #25
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	6832      	ldr	r2, [r6, #0]
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	42ab      	cmp	r3, r5
 8006696:	dc26      	bgt.n	80066e6 <_printf_common+0x96>
 8006698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800669c:	1e13      	subs	r3, r2, #0
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	bf18      	it	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	0692      	lsls	r2, r2, #26
 80066a6:	d42b      	bmi.n	8006700 <_printf_common+0xb0>
 80066a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066ac:	4649      	mov	r1, r9
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	3001      	adds	r0, #1
 80066b4:	d01e      	beq.n	80066f4 <_printf_common+0xa4>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	68e5      	ldr	r5, [r4, #12]
 80066ba:	6832      	ldr	r2, [r6, #0]
 80066bc:	f003 0306 	and.w	r3, r3, #6
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	bf08      	it	eq
 80066c4:	1aad      	subeq	r5, r5, r2
 80066c6:	68a3      	ldr	r3, [r4, #8]
 80066c8:	6922      	ldr	r2, [r4, #16]
 80066ca:	bf0c      	ite	eq
 80066cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d0:	2500      	movne	r5, #0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	bfc4      	itt	gt
 80066d6:	1a9b      	subgt	r3, r3, r2
 80066d8:	18ed      	addgt	r5, r5, r3
 80066da:	2600      	movs	r6, #0
 80066dc:	341a      	adds	r4, #26
 80066de:	42b5      	cmp	r5, r6
 80066e0:	d11a      	bne.n	8006718 <_printf_common+0xc8>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e008      	b.n	80066f8 <_printf_common+0xa8>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4652      	mov	r2, sl
 80066ea:	4649      	mov	r1, r9
 80066ec:	4638      	mov	r0, r7
 80066ee:	47c0      	blx	r8
 80066f0:	3001      	adds	r0, #1
 80066f2:	d103      	bne.n	80066fc <_printf_common+0xac>
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fc:	3501      	adds	r5, #1
 80066fe:	e7c6      	b.n	800668e <_printf_common+0x3e>
 8006700:	18e1      	adds	r1, r4, r3
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	2030      	movs	r0, #48	; 0x30
 8006706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800670a:	4422      	add	r2, r4
 800670c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006714:	3302      	adds	r3, #2
 8006716:	e7c7      	b.n	80066a8 <_printf_common+0x58>
 8006718:	2301      	movs	r3, #1
 800671a:	4622      	mov	r2, r4
 800671c:	4649      	mov	r1, r9
 800671e:	4638      	mov	r0, r7
 8006720:	47c0      	blx	r8
 8006722:	3001      	adds	r0, #1
 8006724:	d0e6      	beq.n	80066f4 <_printf_common+0xa4>
 8006726:	3601      	adds	r6, #1
 8006728:	e7d9      	b.n	80066de <_printf_common+0x8e>
	...

0800672c <_printf_i>:
 800672c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	460c      	mov	r4, r1
 8006732:	4691      	mov	r9, r2
 8006734:	7e27      	ldrb	r7, [r4, #24]
 8006736:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006738:	2f78      	cmp	r7, #120	; 0x78
 800673a:	4680      	mov	r8, r0
 800673c:	469a      	mov	sl, r3
 800673e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006742:	d807      	bhi.n	8006754 <_printf_i+0x28>
 8006744:	2f62      	cmp	r7, #98	; 0x62
 8006746:	d80a      	bhi.n	800675e <_printf_i+0x32>
 8006748:	2f00      	cmp	r7, #0
 800674a:	f000 80d8 	beq.w	80068fe <_printf_i+0x1d2>
 800674e:	2f58      	cmp	r7, #88	; 0x58
 8006750:	f000 80a3 	beq.w	800689a <_printf_i+0x16e>
 8006754:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800675c:	e03a      	b.n	80067d4 <_printf_i+0xa8>
 800675e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006762:	2b15      	cmp	r3, #21
 8006764:	d8f6      	bhi.n	8006754 <_printf_i+0x28>
 8006766:	a001      	add	r0, pc, #4	; (adr r0, 800676c <_printf_i+0x40>)
 8006768:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800676c:	080067c5 	.word	0x080067c5
 8006770:	080067d9 	.word	0x080067d9
 8006774:	08006755 	.word	0x08006755
 8006778:	08006755 	.word	0x08006755
 800677c:	08006755 	.word	0x08006755
 8006780:	08006755 	.word	0x08006755
 8006784:	080067d9 	.word	0x080067d9
 8006788:	08006755 	.word	0x08006755
 800678c:	08006755 	.word	0x08006755
 8006790:	08006755 	.word	0x08006755
 8006794:	08006755 	.word	0x08006755
 8006798:	080068e5 	.word	0x080068e5
 800679c:	08006809 	.word	0x08006809
 80067a0:	080068c7 	.word	0x080068c7
 80067a4:	08006755 	.word	0x08006755
 80067a8:	08006755 	.word	0x08006755
 80067ac:	08006907 	.word	0x08006907
 80067b0:	08006755 	.word	0x08006755
 80067b4:	08006809 	.word	0x08006809
 80067b8:	08006755 	.word	0x08006755
 80067bc:	08006755 	.word	0x08006755
 80067c0:	080068cf 	.word	0x080068cf
 80067c4:	680b      	ldr	r3, [r1, #0]
 80067c6:	1d1a      	adds	r2, r3, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	600a      	str	r2, [r1, #0]
 80067cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0a3      	b.n	8006920 <_printf_i+0x1f4>
 80067d8:	6825      	ldr	r5, [r4, #0]
 80067da:	6808      	ldr	r0, [r1, #0]
 80067dc:	062e      	lsls	r6, r5, #24
 80067de:	f100 0304 	add.w	r3, r0, #4
 80067e2:	d50a      	bpl.n	80067fa <_printf_i+0xce>
 80067e4:	6805      	ldr	r5, [r0, #0]
 80067e6:	600b      	str	r3, [r1, #0]
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	da03      	bge.n	80067f4 <_printf_i+0xc8>
 80067ec:	232d      	movs	r3, #45	; 0x2d
 80067ee:	426d      	negs	r5, r5
 80067f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f4:	485e      	ldr	r0, [pc, #376]	; (8006970 <_printf_i+0x244>)
 80067f6:	230a      	movs	r3, #10
 80067f8:	e019      	b.n	800682e <_printf_i+0x102>
 80067fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80067fe:	6805      	ldr	r5, [r0, #0]
 8006800:	600b      	str	r3, [r1, #0]
 8006802:	bf18      	it	ne
 8006804:	b22d      	sxthne	r5, r5
 8006806:	e7ef      	b.n	80067e8 <_printf_i+0xbc>
 8006808:	680b      	ldr	r3, [r1, #0]
 800680a:	6825      	ldr	r5, [r4, #0]
 800680c:	1d18      	adds	r0, r3, #4
 800680e:	6008      	str	r0, [r1, #0]
 8006810:	0628      	lsls	r0, r5, #24
 8006812:	d501      	bpl.n	8006818 <_printf_i+0xec>
 8006814:	681d      	ldr	r5, [r3, #0]
 8006816:	e002      	b.n	800681e <_printf_i+0xf2>
 8006818:	0669      	lsls	r1, r5, #25
 800681a:	d5fb      	bpl.n	8006814 <_printf_i+0xe8>
 800681c:	881d      	ldrh	r5, [r3, #0]
 800681e:	4854      	ldr	r0, [pc, #336]	; (8006970 <_printf_i+0x244>)
 8006820:	2f6f      	cmp	r7, #111	; 0x6f
 8006822:	bf0c      	ite	eq
 8006824:	2308      	moveq	r3, #8
 8006826:	230a      	movne	r3, #10
 8006828:	2100      	movs	r1, #0
 800682a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800682e:	6866      	ldr	r6, [r4, #4]
 8006830:	60a6      	str	r6, [r4, #8]
 8006832:	2e00      	cmp	r6, #0
 8006834:	bfa2      	ittt	ge
 8006836:	6821      	ldrge	r1, [r4, #0]
 8006838:	f021 0104 	bicge.w	r1, r1, #4
 800683c:	6021      	strge	r1, [r4, #0]
 800683e:	b90d      	cbnz	r5, 8006844 <_printf_i+0x118>
 8006840:	2e00      	cmp	r6, #0
 8006842:	d04d      	beq.n	80068e0 <_printf_i+0x1b4>
 8006844:	4616      	mov	r6, r2
 8006846:	fbb5 f1f3 	udiv	r1, r5, r3
 800684a:	fb03 5711 	mls	r7, r3, r1, r5
 800684e:	5dc7      	ldrb	r7, [r0, r7]
 8006850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006854:	462f      	mov	r7, r5
 8006856:	42bb      	cmp	r3, r7
 8006858:	460d      	mov	r5, r1
 800685a:	d9f4      	bls.n	8006846 <_printf_i+0x11a>
 800685c:	2b08      	cmp	r3, #8
 800685e:	d10b      	bne.n	8006878 <_printf_i+0x14c>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	07df      	lsls	r7, r3, #31
 8006864:	d508      	bpl.n	8006878 <_printf_i+0x14c>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	6861      	ldr	r1, [r4, #4]
 800686a:	4299      	cmp	r1, r3
 800686c:	bfde      	ittt	le
 800686e:	2330      	movle	r3, #48	; 0x30
 8006870:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006874:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006878:	1b92      	subs	r2, r2, r6
 800687a:	6122      	str	r2, [r4, #16]
 800687c:	f8cd a000 	str.w	sl, [sp]
 8006880:	464b      	mov	r3, r9
 8006882:	aa03      	add	r2, sp, #12
 8006884:	4621      	mov	r1, r4
 8006886:	4640      	mov	r0, r8
 8006888:	f7ff fee2 	bl	8006650 <_printf_common>
 800688c:	3001      	adds	r0, #1
 800688e:	d14c      	bne.n	800692a <_printf_i+0x1fe>
 8006890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006894:	b004      	add	sp, #16
 8006896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689a:	4835      	ldr	r0, [pc, #212]	; (8006970 <_printf_i+0x244>)
 800689c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	680e      	ldr	r6, [r1, #0]
 80068a4:	061f      	lsls	r7, r3, #24
 80068a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80068aa:	600e      	str	r6, [r1, #0]
 80068ac:	d514      	bpl.n	80068d8 <_printf_i+0x1ac>
 80068ae:	07d9      	lsls	r1, r3, #31
 80068b0:	bf44      	itt	mi
 80068b2:	f043 0320 	orrmi.w	r3, r3, #32
 80068b6:	6023      	strmi	r3, [r4, #0]
 80068b8:	b91d      	cbnz	r5, 80068c2 <_printf_i+0x196>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f023 0320 	bic.w	r3, r3, #32
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	2310      	movs	r3, #16
 80068c4:	e7b0      	b.n	8006828 <_printf_i+0xfc>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	f043 0320 	orr.w	r3, r3, #32
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	2378      	movs	r3, #120	; 0x78
 80068d0:	4828      	ldr	r0, [pc, #160]	; (8006974 <_printf_i+0x248>)
 80068d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068d6:	e7e3      	b.n	80068a0 <_printf_i+0x174>
 80068d8:	065e      	lsls	r6, r3, #25
 80068da:	bf48      	it	mi
 80068dc:	b2ad      	uxthmi	r5, r5
 80068de:	e7e6      	b.n	80068ae <_printf_i+0x182>
 80068e0:	4616      	mov	r6, r2
 80068e2:	e7bb      	b.n	800685c <_printf_i+0x130>
 80068e4:	680b      	ldr	r3, [r1, #0]
 80068e6:	6826      	ldr	r6, [r4, #0]
 80068e8:	6960      	ldr	r0, [r4, #20]
 80068ea:	1d1d      	adds	r5, r3, #4
 80068ec:	600d      	str	r5, [r1, #0]
 80068ee:	0635      	lsls	r5, r6, #24
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	d501      	bpl.n	80068f8 <_printf_i+0x1cc>
 80068f4:	6018      	str	r0, [r3, #0]
 80068f6:	e002      	b.n	80068fe <_printf_i+0x1d2>
 80068f8:	0671      	lsls	r1, r6, #25
 80068fa:	d5fb      	bpl.n	80068f4 <_printf_i+0x1c8>
 80068fc:	8018      	strh	r0, [r3, #0]
 80068fe:	2300      	movs	r3, #0
 8006900:	6123      	str	r3, [r4, #16]
 8006902:	4616      	mov	r6, r2
 8006904:	e7ba      	b.n	800687c <_printf_i+0x150>
 8006906:	680b      	ldr	r3, [r1, #0]
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	600a      	str	r2, [r1, #0]
 800690c:	681e      	ldr	r6, [r3, #0]
 800690e:	6862      	ldr	r2, [r4, #4]
 8006910:	2100      	movs	r1, #0
 8006912:	4630      	mov	r0, r6
 8006914:	f7f9 fc94 	bl	8000240 <memchr>
 8006918:	b108      	cbz	r0, 800691e <_printf_i+0x1f2>
 800691a:	1b80      	subs	r0, r0, r6
 800691c:	6060      	str	r0, [r4, #4]
 800691e:	6863      	ldr	r3, [r4, #4]
 8006920:	6123      	str	r3, [r4, #16]
 8006922:	2300      	movs	r3, #0
 8006924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006928:	e7a8      	b.n	800687c <_printf_i+0x150>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	4632      	mov	r2, r6
 800692e:	4649      	mov	r1, r9
 8006930:	4640      	mov	r0, r8
 8006932:	47d0      	blx	sl
 8006934:	3001      	adds	r0, #1
 8006936:	d0ab      	beq.n	8006890 <_printf_i+0x164>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	079b      	lsls	r3, r3, #30
 800693c:	d413      	bmi.n	8006966 <_printf_i+0x23a>
 800693e:	68e0      	ldr	r0, [r4, #12]
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	4298      	cmp	r0, r3
 8006944:	bfb8      	it	lt
 8006946:	4618      	movlt	r0, r3
 8006948:	e7a4      	b.n	8006894 <_printf_i+0x168>
 800694a:	2301      	movs	r3, #1
 800694c:	4632      	mov	r2, r6
 800694e:	4649      	mov	r1, r9
 8006950:	4640      	mov	r0, r8
 8006952:	47d0      	blx	sl
 8006954:	3001      	adds	r0, #1
 8006956:	d09b      	beq.n	8006890 <_printf_i+0x164>
 8006958:	3501      	adds	r5, #1
 800695a:	68e3      	ldr	r3, [r4, #12]
 800695c:	9903      	ldr	r1, [sp, #12]
 800695e:	1a5b      	subs	r3, r3, r1
 8006960:	42ab      	cmp	r3, r5
 8006962:	dcf2      	bgt.n	800694a <_printf_i+0x21e>
 8006964:	e7eb      	b.n	800693e <_printf_i+0x212>
 8006966:	2500      	movs	r5, #0
 8006968:	f104 0619 	add.w	r6, r4, #25
 800696c:	e7f5      	b.n	800695a <_printf_i+0x22e>
 800696e:	bf00      	nop
 8006970:	08006c01 	.word	0x08006c01
 8006974:	08006c12 	.word	0x08006c12

08006978 <memcpy>:
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006980:	d100      	bne.n	8006984 <memcpy+0xc>
 8006982:	4770      	bx	lr
 8006984:	b510      	push	{r4, lr}
 8006986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698e:	4291      	cmp	r1, r2
 8006990:	d1f9      	bne.n	8006986 <memcpy+0xe>
 8006992:	bd10      	pop	{r4, pc}

08006994 <memmove>:
 8006994:	4288      	cmp	r0, r1
 8006996:	b510      	push	{r4, lr}
 8006998:	eb01 0402 	add.w	r4, r1, r2
 800699c:	d902      	bls.n	80069a4 <memmove+0x10>
 800699e:	4284      	cmp	r4, r0
 80069a0:	4623      	mov	r3, r4
 80069a2:	d807      	bhi.n	80069b4 <memmove+0x20>
 80069a4:	1e43      	subs	r3, r0, #1
 80069a6:	42a1      	cmp	r1, r4
 80069a8:	d008      	beq.n	80069bc <memmove+0x28>
 80069aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069b2:	e7f8      	b.n	80069a6 <memmove+0x12>
 80069b4:	4402      	add	r2, r0
 80069b6:	4601      	mov	r1, r0
 80069b8:	428a      	cmp	r2, r1
 80069ba:	d100      	bne.n	80069be <memmove+0x2a>
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069c6:	e7f7      	b.n	80069b8 <memmove+0x24>

080069c8 <_free_r>:
 80069c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ca:	2900      	cmp	r1, #0
 80069cc:	d048      	beq.n	8006a60 <_free_r+0x98>
 80069ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d2:	9001      	str	r0, [sp, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f1a1 0404 	sub.w	r4, r1, #4
 80069da:	bfb8      	it	lt
 80069dc:	18e4      	addlt	r4, r4, r3
 80069de:	f000 f8d3 	bl	8006b88 <__malloc_lock>
 80069e2:	4a20      	ldr	r2, [pc, #128]	; (8006a64 <_free_r+0x9c>)
 80069e4:	9801      	ldr	r0, [sp, #4]
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	4615      	mov	r5, r2
 80069ea:	b933      	cbnz	r3, 80069fa <_free_r+0x32>
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6014      	str	r4, [r2, #0]
 80069f0:	b003      	add	sp, #12
 80069f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069f6:	f000 b8cd 	b.w	8006b94 <__malloc_unlock>
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	d90b      	bls.n	8006a16 <_free_r+0x4e>
 80069fe:	6821      	ldr	r1, [r4, #0]
 8006a00:	1862      	adds	r2, r4, r1
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bf04      	itt	eq
 8006a06:	681a      	ldreq	r2, [r3, #0]
 8006a08:	685b      	ldreq	r3, [r3, #4]
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	bf04      	itt	eq
 8006a0e:	1852      	addeq	r2, r2, r1
 8006a10:	6022      	streq	r2, [r4, #0]
 8006a12:	602c      	str	r4, [r5, #0]
 8006a14:	e7ec      	b.n	80069f0 <_free_r+0x28>
 8006a16:	461a      	mov	r2, r3
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	b10b      	cbz	r3, 8006a20 <_free_r+0x58>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d9fa      	bls.n	8006a16 <_free_r+0x4e>
 8006a20:	6811      	ldr	r1, [r2, #0]
 8006a22:	1855      	adds	r5, r2, r1
 8006a24:	42a5      	cmp	r5, r4
 8006a26:	d10b      	bne.n	8006a40 <_free_r+0x78>
 8006a28:	6824      	ldr	r4, [r4, #0]
 8006a2a:	4421      	add	r1, r4
 8006a2c:	1854      	adds	r4, r2, r1
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	6011      	str	r1, [r2, #0]
 8006a32:	d1dd      	bne.n	80069f0 <_free_r+0x28>
 8006a34:	681c      	ldr	r4, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	6053      	str	r3, [r2, #4]
 8006a3a:	4421      	add	r1, r4
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	e7d7      	b.n	80069f0 <_free_r+0x28>
 8006a40:	d902      	bls.n	8006a48 <_free_r+0x80>
 8006a42:	230c      	movs	r3, #12
 8006a44:	6003      	str	r3, [r0, #0]
 8006a46:	e7d3      	b.n	80069f0 <_free_r+0x28>
 8006a48:	6825      	ldr	r5, [r4, #0]
 8006a4a:	1961      	adds	r1, r4, r5
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	bf04      	itt	eq
 8006a50:	6819      	ldreq	r1, [r3, #0]
 8006a52:	685b      	ldreq	r3, [r3, #4]
 8006a54:	6063      	str	r3, [r4, #4]
 8006a56:	bf04      	itt	eq
 8006a58:	1949      	addeq	r1, r1, r5
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	6054      	str	r4, [r2, #4]
 8006a5e:	e7c7      	b.n	80069f0 <_free_r+0x28>
 8006a60:	b003      	add	sp, #12
 8006a62:	bd30      	pop	{r4, r5, pc}
 8006a64:	20000094 	.word	0x20000094

08006a68 <_malloc_r>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	1ccd      	adds	r5, r1, #3
 8006a6c:	f025 0503 	bic.w	r5, r5, #3
 8006a70:	3508      	adds	r5, #8
 8006a72:	2d0c      	cmp	r5, #12
 8006a74:	bf38      	it	cc
 8006a76:	250c      	movcc	r5, #12
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	db01      	blt.n	8006a82 <_malloc_r+0x1a>
 8006a7e:	42a9      	cmp	r1, r5
 8006a80:	d903      	bls.n	8006a8a <_malloc_r+0x22>
 8006a82:	230c      	movs	r3, #12
 8006a84:	6033      	str	r3, [r6, #0]
 8006a86:	2000      	movs	r0, #0
 8006a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a8a:	f000 f87d 	bl	8006b88 <__malloc_lock>
 8006a8e:	4921      	ldr	r1, [pc, #132]	; (8006b14 <_malloc_r+0xac>)
 8006a90:	680a      	ldr	r2, [r1, #0]
 8006a92:	4614      	mov	r4, r2
 8006a94:	b99c      	cbnz	r4, 8006abe <_malloc_r+0x56>
 8006a96:	4f20      	ldr	r7, [pc, #128]	; (8006b18 <_malloc_r+0xb0>)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	b923      	cbnz	r3, 8006aa6 <_malloc_r+0x3e>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f000 f862 	bl	8006b68 <_sbrk_r>
 8006aa4:	6038      	str	r0, [r7, #0]
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f85d 	bl	8006b68 <_sbrk_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d123      	bne.n	8006afa <_malloc_r+0x92>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	6033      	str	r3, [r6, #0]
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f000 f86c 	bl	8006b94 <__malloc_unlock>
 8006abc:	e7e3      	b.n	8006a86 <_malloc_r+0x1e>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	1b5b      	subs	r3, r3, r5
 8006ac2:	d417      	bmi.n	8006af4 <_malloc_r+0x8c>
 8006ac4:	2b0b      	cmp	r3, #11
 8006ac6:	d903      	bls.n	8006ad0 <_malloc_r+0x68>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	441c      	add	r4, r3
 8006acc:	6025      	str	r5, [r4, #0]
 8006ace:	e004      	b.n	8006ada <_malloc_r+0x72>
 8006ad0:	6863      	ldr	r3, [r4, #4]
 8006ad2:	42a2      	cmp	r2, r4
 8006ad4:	bf0c      	ite	eq
 8006ad6:	600b      	streq	r3, [r1, #0]
 8006ad8:	6053      	strne	r3, [r2, #4]
 8006ada:	4630      	mov	r0, r6
 8006adc:	f000 f85a 	bl	8006b94 <__malloc_unlock>
 8006ae0:	f104 000b 	add.w	r0, r4, #11
 8006ae4:	1d23      	adds	r3, r4, #4
 8006ae6:	f020 0007 	bic.w	r0, r0, #7
 8006aea:	1ac2      	subs	r2, r0, r3
 8006aec:	d0cc      	beq.n	8006a88 <_malloc_r+0x20>
 8006aee:	1a1b      	subs	r3, r3, r0
 8006af0:	50a3      	str	r3, [r4, r2]
 8006af2:	e7c9      	b.n	8006a88 <_malloc_r+0x20>
 8006af4:	4622      	mov	r2, r4
 8006af6:	6864      	ldr	r4, [r4, #4]
 8006af8:	e7cc      	b.n	8006a94 <_malloc_r+0x2c>
 8006afa:	1cc4      	adds	r4, r0, #3
 8006afc:	f024 0403 	bic.w	r4, r4, #3
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d0e3      	beq.n	8006acc <_malloc_r+0x64>
 8006b04:	1a21      	subs	r1, r4, r0
 8006b06:	4630      	mov	r0, r6
 8006b08:	f000 f82e 	bl	8006b68 <_sbrk_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d1dd      	bne.n	8006acc <_malloc_r+0x64>
 8006b10:	e7cf      	b.n	8006ab2 <_malloc_r+0x4a>
 8006b12:	bf00      	nop
 8006b14:	20000094 	.word	0x20000094
 8006b18:	20000098 	.word	0x20000098

08006b1c <_realloc_r>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	4607      	mov	r7, r0
 8006b20:	4614      	mov	r4, r2
 8006b22:	460e      	mov	r6, r1
 8006b24:	b921      	cbnz	r1, 8006b30 <_realloc_r+0x14>
 8006b26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	f7ff bf9c 	b.w	8006a68 <_malloc_r>
 8006b30:	b922      	cbnz	r2, 8006b3c <_realloc_r+0x20>
 8006b32:	f7ff ff49 	bl	80069c8 <_free_r>
 8006b36:	4625      	mov	r5, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3c:	f000 f830 	bl	8006ba0 <_malloc_usable_size_r>
 8006b40:	42a0      	cmp	r0, r4
 8006b42:	d20f      	bcs.n	8006b64 <_realloc_r+0x48>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff ff8e 	bl	8006a68 <_malloc_r>
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d0f2      	beq.n	8006b38 <_realloc_r+0x1c>
 8006b52:	4631      	mov	r1, r6
 8006b54:	4622      	mov	r2, r4
 8006b56:	f7ff ff0f 	bl	8006978 <memcpy>
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f7ff ff33 	bl	80069c8 <_free_r>
 8006b62:	e7e9      	b.n	8006b38 <_realloc_r+0x1c>
 8006b64:	4635      	mov	r5, r6
 8006b66:	e7e7      	b.n	8006b38 <_realloc_r+0x1c>

08006b68 <_sbrk_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d06      	ldr	r5, [pc, #24]	; (8006b84 <_sbrk_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	602b      	str	r3, [r5, #0]
 8006b74:	f7fa fc92 	bl	800149c <_sbrk>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_sbrk_r+0x1a>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_sbrk_r+0x1a>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	200007d0 	.word	0x200007d0

08006b88 <__malloc_lock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__malloc_lock+0x8>)
 8006b8a:	f000 b811 	b.w	8006bb0 <__retarget_lock_acquire_recursive>
 8006b8e:	bf00      	nop
 8006b90:	200007d8 	.word	0x200007d8

08006b94 <__malloc_unlock>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__malloc_unlock+0x8>)
 8006b96:	f000 b80c 	b.w	8006bb2 <__retarget_lock_release_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	200007d8 	.word	0x200007d8

08006ba0 <_malloc_usable_size_r>:
 8006ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba4:	1f18      	subs	r0, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bfbc      	itt	lt
 8006baa:	580b      	ldrlt	r3, [r1, r0]
 8006bac:	18c0      	addlt	r0, r0, r3
 8006bae:	4770      	bx	lr

08006bb0 <__retarget_lock_acquire_recursive>:
 8006bb0:	4770      	bx	lr

08006bb2 <__retarget_lock_release_recursive>:
 8006bb2:	4770      	bx	lr

08006bb4 <_init>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr

08006bc0 <_fini>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr
